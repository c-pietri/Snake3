
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00061b3c  0800ff88  0800ff88  0001ff88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08071ac4  08071ac4  0009013c  2**0
                  CONTENTS
  4 .ARM          00000008  08071ac4  08071ac4  00081ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08071acc  08071acc  0009013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08071acc  08071acc  00081acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08071ad0  08071ad0  00081ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08071ad4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  2000013c  08071c10  0009013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad0  08071c10  00094ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003183e  00000000  00000000  0009016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e36  00000000  00000000  000c19aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026f8  00000000  00000000  000c77e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002480  00000000  00000000  000c9ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebff  00000000  00000000  000cc358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ea14  00000000  00000000  000faf57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001176be  00000000  00000000  0012996b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00241029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa70  00000000  00000000  0024107c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ff70 	.word	0x0800ff70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000140 	.word	0x20000140
 800020c:	0800ff70 	.word	0x0800ff70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000158 	.word	0x20000158
 80005e4:	2000020c 	.word	0x2000020c

080005e8 <ft5336_Init>:
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f002 fce2 	bl	8002fbc <TS_IO_Delay>
 80005f8:	f000 fa7a 	bl	8000af0 <ft5336_I2C_InitializeIfRequired>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <ft5336_Reset>:
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <ft5336_ReadID>:
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
 8000624:	2300      	movs	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]
 8000630:	f000 fa5e 	bl	8000af0 <ft5336_I2C_InitializeIfRequired>
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e010      	b.n	800065c <ft5336_ReadID+0x42>
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	21a8      	movs	r1, #168	; 0xa8
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fc9d 	bl	8002f80 <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b51      	cmp	r3, #81	; 0x51
 8000650:	d101      	bne.n	8000656 <ft5336_ReadID+0x3c>
 8000652:	2301      	movs	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d802      	bhi.n	8000668 <ft5336_ReadID+0x4e>
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e8      	beq.n	800063a <ft5336_ReadID+0x20>
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b29b      	uxth	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <ft5336_TS_Start>:
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fa44 	bl	8000b10 <ft5336_TS_Configure>
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f932 	bl	80008f4 <ft5336_TS_DisableIT>
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ft5336_TS_DetectTouch>:
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fc67 	bl	8002f80 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d901      	bls.n	80006ce <ft5336_TS_DetectTouch+0x36>
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000040c 	.word	0x2000040c

080006ec <ft5336_TS_GetXY>:
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
 80006fa:	2300      	movs	r3, #0
 80006fc:	74fb      	strb	r3, [r7, #19]
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
 8000706:	2300      	movs	r3, #0
 8000708:	757b      	strb	r3, [r7, #21]
 800070a:	2300      	movs	r3, #0
 800070c:	753b      	strb	r3, [r7, #20]
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000710:	789a      	ldrb	r2, [r3, #2]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	429a      	cmp	r2, r3
 8000718:	f080 80cf 	bcs.w	80008ba <ft5336_TS_GetXY+0x1ce>
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d871      	bhi.n	8000808 <ft5336_TS_GetXY+0x11c>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <ft5336_TS_GetXY+0x40>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000755 	.word	0x08000755
 8000730:	08000767 	.word	0x08000767
 8000734:	08000779 	.word	0x08000779
 8000738:	0800078b 	.word	0x0800078b
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007af 	.word	0x080007af
 8000744:	080007c1 	.word	0x080007c1
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007e5 	.word	0x080007e5
 8000750:	080007f7 	.word	0x080007f7
 8000754:	2304      	movs	r3, #4
 8000756:	75fb      	strb	r3, [r7, #23]
 8000758:	2303      	movs	r3, #3
 800075a:	75bb      	strb	r3, [r7, #22]
 800075c:	2306      	movs	r3, #6
 800075e:	757b      	strb	r3, [r7, #21]
 8000760:	2305      	movs	r3, #5
 8000762:	753b      	strb	r3, [r7, #20]
 8000764:	e051      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000766:	230a      	movs	r3, #10
 8000768:	75fb      	strb	r3, [r7, #23]
 800076a:	2309      	movs	r3, #9
 800076c:	75bb      	strb	r3, [r7, #22]
 800076e:	230c      	movs	r3, #12
 8000770:	757b      	strb	r3, [r7, #21]
 8000772:	230b      	movs	r3, #11
 8000774:	753b      	strb	r3, [r7, #20]
 8000776:	e048      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000778:	2310      	movs	r3, #16
 800077a:	75fb      	strb	r3, [r7, #23]
 800077c:	230f      	movs	r3, #15
 800077e:	75bb      	strb	r3, [r7, #22]
 8000780:	2312      	movs	r3, #18
 8000782:	757b      	strb	r3, [r7, #21]
 8000784:	2311      	movs	r3, #17
 8000786:	753b      	strb	r3, [r7, #20]
 8000788:	e03f      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 800078a:	2316      	movs	r3, #22
 800078c:	75fb      	strb	r3, [r7, #23]
 800078e:	2315      	movs	r3, #21
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	2318      	movs	r3, #24
 8000794:	757b      	strb	r3, [r7, #21]
 8000796:	2317      	movs	r3, #23
 8000798:	753b      	strb	r3, [r7, #20]
 800079a:	e036      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 800079c:	231c      	movs	r3, #28
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	231b      	movs	r3, #27
 80007a2:	75bb      	strb	r3, [r7, #22]
 80007a4:	231e      	movs	r3, #30
 80007a6:	757b      	strb	r3, [r7, #21]
 80007a8:	231d      	movs	r3, #29
 80007aa:	753b      	strb	r3, [r7, #20]
 80007ac:	e02d      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	75fb      	strb	r3, [r7, #23]
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	75bb      	strb	r3, [r7, #22]
 80007b6:	2324      	movs	r3, #36	; 0x24
 80007b8:	757b      	strb	r3, [r7, #21]
 80007ba:	2323      	movs	r3, #35	; 0x23
 80007bc:	753b      	strb	r3, [r7, #20]
 80007be:	e024      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	75bb      	strb	r3, [r7, #22]
 80007c8:	232a      	movs	r3, #42	; 0x2a
 80007ca:	757b      	strb	r3, [r7, #21]
 80007cc:	2329      	movs	r3, #41	; 0x29
 80007ce:	753b      	strb	r3, [r7, #20]
 80007d0:	e01b      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007d2:	232e      	movs	r3, #46	; 0x2e
 80007d4:	75fb      	strb	r3, [r7, #23]
 80007d6:	232d      	movs	r3, #45	; 0x2d
 80007d8:	75bb      	strb	r3, [r7, #22]
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	757b      	strb	r3, [r7, #21]
 80007de:	232f      	movs	r3, #47	; 0x2f
 80007e0:	753b      	strb	r3, [r7, #20]
 80007e2:	e012      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	75fb      	strb	r3, [r7, #23]
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	75bb      	strb	r3, [r7, #22]
 80007ec:	2336      	movs	r3, #54	; 0x36
 80007ee:	757b      	strb	r3, [r7, #21]
 80007f0:	2335      	movs	r3, #53	; 0x35
 80007f2:	753b      	strb	r3, [r7, #20]
 80007f4:	e009      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	75fb      	strb	r3, [r7, #23]
 80007fa:	2339      	movs	r3, #57	; 0x39
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	233c      	movs	r3, #60	; 0x3c
 8000800:	757b      	strb	r3, [r7, #21]
 8000802:	233b      	movs	r3, #59	; 0x3b
 8000804:	753b      	strb	r3, [r7, #20]
 8000806:	e000      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000808:	bf00      	nop
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7dfa      	ldrb	r2, [r7, #23]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fbb4 	bl	8002f80 <TS_IO_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	74fb      	strb	r3, [r7, #19]
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7dba      	ldrb	r2, [r7, #22]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fba6 	bl	8002f80 <TS_IO_Read>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	7d7a      	ldrb	r2, [r7, #21]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fb8b 	bl	8002f80 <TS_IO_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	74fb      	strb	r3, [r7, #19]
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	801a      	strh	r2, [r3, #0]
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	7d3a      	ldrb	r2, [r7, #20]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fb7d 	bl	8002f80 <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	801a      	strh	r2, [r3, #0]
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b8:	709a      	strb	r2, [r3, #2]
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000040c 	.word	0x2000040c
 80008c8:	20000410 	.word	0x20000410

080008cc <ft5336_TS_EnableIT>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fb30 	bl	8002f4c <TS_IO_Write>
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_DisableIT>:
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fb1c 	bl	8002f4c <TS_IO_Write>
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_ITStatus>:
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	2300      	movs	r3, #0
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <ft5336_TS_ClearIT>:
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <ft5336_TS_GetGestureID>:
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	6039      	str	r1, [r7, #0]
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fb0d 	bl	8002f80 <TS_IO_Read>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <ft5336_TS_GetTouchInfo>:
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4603      	mov	r3, r0
 800098a:	81fb      	strh	r3, [r7, #14]
 800098c:	2300      	movs	r3, #0
 800098e:	753b      	strb	r3, [r7, #20]
 8000990:	2300      	movs	r3, #0
 8000992:	75fb      	strb	r3, [r7, #23]
 8000994:	2300      	movs	r3, #0
 8000996:	75bb      	strb	r3, [r7, #22]
 8000998:	2300      	movs	r3, #0
 800099a:	757b      	strb	r3, [r7, #21]
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <ft5336_TS_GetTouchInfo+0x158>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f080 8090 	bcs.w	8000aca <ft5336_TS_GetTouchInfo+0x14e>
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	d85d      	bhi.n	8000a6c <ft5336_TS_GetTouchInfo+0xf0>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	080009ef 	.word	0x080009ef
 80009c0:	080009fd 	.word	0x080009fd
 80009c4:	08000a0b 	.word	0x08000a0b
 80009c8:	08000a19 	.word	0x08000a19
 80009cc:	08000a27 	.word	0x08000a27
 80009d0:	08000a35 	.word	0x08000a35
 80009d4:	08000a43 	.word	0x08000a43
 80009d8:	08000a51 	.word	0x08000a51
 80009dc:	08000a5f 	.word	0x08000a5f
 80009e0:	2303      	movs	r3, #3
 80009e2:	75fb      	strb	r3, [r7, #23]
 80009e4:	2307      	movs	r3, #7
 80009e6:	75bb      	strb	r3, [r7, #22]
 80009e8:	2308      	movs	r3, #8
 80009ea:	757b      	strb	r3, [r7, #21]
 80009ec:	e03f      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 80009ee:	2309      	movs	r3, #9
 80009f0:	75fb      	strb	r3, [r7, #23]
 80009f2:	230d      	movs	r3, #13
 80009f4:	75bb      	strb	r3, [r7, #22]
 80009f6:	230e      	movs	r3, #14
 80009f8:	757b      	strb	r3, [r7, #21]
 80009fa:	e038      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 80009fc:	230f      	movs	r3, #15
 80009fe:	75fb      	strb	r3, [r7, #23]
 8000a00:	2313      	movs	r3, #19
 8000a02:	75bb      	strb	r3, [r7, #22]
 8000a04:	2314      	movs	r3, #20
 8000a06:	757b      	strb	r3, [r7, #21]
 8000a08:	e031      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a0a:	2315      	movs	r3, #21
 8000a0c:	75fb      	strb	r3, [r7, #23]
 8000a0e:	2319      	movs	r3, #25
 8000a10:	75bb      	strb	r3, [r7, #22]
 8000a12:	231a      	movs	r3, #26
 8000a14:	757b      	strb	r3, [r7, #21]
 8000a16:	e02a      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a18:	231b      	movs	r3, #27
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	231f      	movs	r3, #31
 8000a1e:	75bb      	strb	r3, [r7, #22]
 8000a20:	2320      	movs	r3, #32
 8000a22:	757b      	strb	r3, [r7, #21]
 8000a24:	e023      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a26:	2321      	movs	r3, #33	; 0x21
 8000a28:	75fb      	strb	r3, [r7, #23]
 8000a2a:	2325      	movs	r3, #37	; 0x25
 8000a2c:	75bb      	strb	r3, [r7, #22]
 8000a2e:	2326      	movs	r3, #38	; 0x26
 8000a30:	757b      	strb	r3, [r7, #21]
 8000a32:	e01c      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a34:	2327      	movs	r3, #39	; 0x27
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	232b      	movs	r3, #43	; 0x2b
 8000a3a:	75bb      	strb	r3, [r7, #22]
 8000a3c:	232c      	movs	r3, #44	; 0x2c
 8000a3e:	757b      	strb	r3, [r7, #21]
 8000a40:	e015      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a42:	232d      	movs	r3, #45	; 0x2d
 8000a44:	75fb      	strb	r3, [r7, #23]
 8000a46:	2331      	movs	r3, #49	; 0x31
 8000a48:	75bb      	strb	r3, [r7, #22]
 8000a4a:	2332      	movs	r3, #50	; 0x32
 8000a4c:	757b      	strb	r3, [r7, #21]
 8000a4e:	e00e      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a50:	2333      	movs	r3, #51	; 0x33
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	2337      	movs	r3, #55	; 0x37
 8000a56:	75bb      	strb	r3, [r7, #22]
 8000a58:	2338      	movs	r3, #56	; 0x38
 8000a5a:	757b      	strb	r3, [r7, #21]
 8000a5c:	e007      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a5e:	2339      	movs	r3, #57	; 0x39
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	233d      	movs	r3, #61	; 0x3d
 8000a64:	75bb      	strb	r3, [r7, #22]
 8000a66:	233e      	movs	r3, #62	; 0x3e
 8000a68:	757b      	strb	r3, [r7, #21]
 8000a6a:	e000      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a6c:	bf00      	nop
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	7dfa      	ldrb	r2, [r7, #23]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fa82 	bl	8002f80 <TS_IO_Read>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	753b      	strb	r3, [r7, #20]
 8000a80:	7d3b      	ldrb	r3, [r7, #20]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	119b      	asrs	r3, r3, #6
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7dba      	ldrb	r2, [r7, #22]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fa72 	bl	8002f80 <TS_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	753b      	strb	r3, [r7, #20]
 8000aa0:	7d3b      	ldrb	r3, [r7, #20]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fa64 	bl	8002f80 <TS_IO_Read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	753b      	strb	r3, [r7, #20]
 8000abc:	7d3b      	ldrb	r3, [r7, #20]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	111b      	asrs	r3, r3, #4
 8000ac2:	f003 0204 	and.w	r2, r3, #4
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000040c 	.word	0x2000040c

08000ad8 <ft5336_Get_I2C_InitializedStatus>:
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000040c 	.word	0x2000040c

08000af0 <ft5336_I2C_InitializeIfRequired>:
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	f7ff fff0 	bl	8000ad8 <ft5336_Get_I2C_InitializedStatus>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d104      	bne.n	8000b08 <ft5336_I2C_InitializeIfRequired+0x18>
 8000afe:	f002 fa1b 	bl	8002f38 <TS_IO_Init>
 8000b02:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000040c 	.word	0x2000040c

08000b10 <ft5336_TS_Configure>:
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b0be      	sub	sp, #248	; 0xf8
 8000b30:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char text[50]={};
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b3c:	222e      	movs	r2, #46	; 0x2e
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00e fd45 	bl	800f5d0 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b60:	f004 fddd 	bl	800571e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b64:	f000 f9b8 	bl	8000ed8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b68:	f000 ff80 	bl	8001a6c <MX_GPIO_Init>
	MX_ADC3_Init();
 8000b6c:	f000 fa78 	bl	8001060 <MX_ADC3_Init>
	MX_DMA2D_Init();
 8000b70:	f000 faf2 	bl	8001158 <MX_DMA2D_Init>
	MX_FMC_Init();
 8000b74:	f000 ff2a 	bl	80019cc <MX_FMC_Init>
	MX_I2C1_Init();
 8000b78:	f000 fb20 	bl	80011bc <MX_I2C1_Init>
	MX_I2C3_Init();
 8000b7c:	f000 fb5e 	bl	800123c <MX_I2C3_Init>
	MX_LTDC_Init();
 8000b80:	f000 fb9c 	bl	80012bc <MX_LTDC_Init>
	MX_RTC_Init();
 8000b84:	f000 fc1c 	bl	80013c0 <MX_RTC_Init>
	MX_SPI2_Init();
 8000b88:	f000 fcc0 	bl	800150c <MX_SPI2_Init>
	MX_TIM1_Init();
 8000b8c:	f000 fcfc 	bl	8001588 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b90:	f000 fd4e 	bl	8001630 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000b94:	f000 fd9a 	bl	80016cc <MX_TIM3_Init>
	MX_TIM5_Init();
 8000b98:	f000 fde6 	bl	8001768 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000b9c:	f000 fe32 	bl	8001804 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 8000ba0:	f000 feb4 	bl	800190c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8000ba4:	f000 fee2 	bl	800196c <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000ba8:	f000 fa08 	bl	8000fbc <MX_ADC1_Init>
	MX_DAC_Init();
 8000bac:	f000 faaa 	bl	8001104 <MX_DAC_Init>
	MX_UART7_Init();
 8000bb0:	f000 fe7c 	bl	80018ac <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000bb4:	f002 fa0e 	bl	8002fd4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bb8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f002 faa1 	bl	8003104 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bc2:	f002 fa77 	bl	80030b4 <BSP_LCD_GetXSize>
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	f002 fa88 	bl	80030dc <BSP_LCD_GetYSize>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	fb04 f303 	mul.w	r3, r4, r3
 8000bd2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f002 fa92 	bl	8003104 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000be0:	f003 f80a 	bl	8003bf8 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f002 faed 	bl	80031c4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000bea:	f04f 30ff 	mov.w	r0, #4294967295
 8000bee:	f002 fb5b 	bl	80032a8 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f002 fae6 	bl	80031c4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f002 fb55 	bl	80032a8 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000bfe:	489e      	ldr	r0, [pc, #632]	; (8000e78 <main+0x34c>)
 8000c00:	f002 fb22 	bl	8003248 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000c04:	489d      	ldr	r0, [pc, #628]	; (8000e7c <main+0x350>)
 8000c06:	f002 faed 	bl	80031e4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f002 fb02 	bl	8003214 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c10:	f002 fa50 	bl	80030b4 <BSP_LCD_GetXSize>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29c      	uxth	r4, r3
 8000c18:	f002 fa60 	bl	80030dc <BSP_LCD_GetYSize>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	4620      	mov	r0, r4
 8000c24:	f003 fbfa 	bl	800441c <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4995      	ldr	r1, [pc, #596]	; (8000e80 <main+0x354>)
 8000c2c:	4895      	ldr	r0, [pc, #596]	; (8000e84 <main+0x358>)
 8000c2e:	f00a fa79 	bl	800b124 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex01 */
	osMutexDef(myMutex01);
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00b fe01 	bl	800c84a <osMutexCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a8f      	ldr	r2, [pc, #572]	; (8000e88 <main+0x35c>)
 8000c4c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8000c4e:	4b8f      	ldr	r3, [pc, #572]	; (8000e8c <main+0x360>)
 8000c50:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000c5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00b fe8f 	bl	800c984 <osMessageCreate>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a89      	ldr	r2, [pc, #548]	; (8000e90 <main+0x364>)
 8000c6a:	6013      	str	r3, [r2, #0]

	/* definition and creation of myQueue02 */
	osMessageQDef(myQueue02, 16, uint16_t);
 8000c6c:	4b87      	ldr	r3, [pc, #540]	; (8000e8c <main+0x360>)
 8000c6e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8000c78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00b fe80 	bl	800c984 <osMessageCreate>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a83      	ldr	r2, [pc, #524]	; (8000e94 <main+0x368>)
 8000c88:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c8a:	4b83      	ldr	r3, [pc, #524]	; (8000e98 <main+0x36c>)
 8000c8c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00b fd70 	bl	800c78a <osThreadCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a7b      	ldr	r2, [pc, #492]	; (8000e9c <main+0x370>)
 8000cae:	6013      	str	r3, [r2, #0]

	/* definition and creation of Snake */
	osThreadDef(Snake, tache_snake, osPriorityAboveNormal, 0, 256);
 8000cb0:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <main+0x374>)
 8000cb2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SnakeHandle = osThreadCreate(osThread(Snake), NULL);
 8000cc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00b fd5d 	bl	800c78a <osThreadCreate>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a74      	ldr	r2, [pc, #464]	; (8000ea4 <main+0x378>)
 8000cd4:	6013      	str	r3, [r2, #0]

	/* definition and creation of Affichage */
	osThreadDef(Affichage, tache_affichage, osPriorityLow, 0, 1024);
 8000cd6:	4b74      	ldr	r3, [pc, #464]	; (8000ea8 <main+0x37c>)
 8000cd8:	f107 0420 	add.w	r4, r7, #32
 8000cdc:	461d      	mov	r5, r3
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00b fd4a 	bl	800c78a <osThreadCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <main+0x380>)
 8000cfa:	6013      	str	r3, [r2, #0]

	/* definition and creation of Game */
	osThreadDef(Game, tache_game, osPriorityHigh, 0, 1024);
 8000cfc:	4b6c      	ldr	r3, [pc, #432]	; (8000eb0 <main+0x384>)
 8000cfe:	1d3c      	adds	r4, r7, #4
 8000d00:	461d      	mov	r5, r3
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GameHandle = osThreadCreate(osThread(Game), NULL);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00b fd39 	bl	800c78a <osThreadCreate>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a66      	ldr	r2, [pc, #408]	; (8000eb4 <main+0x388>)
 8000d1c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000d1e:	f00b fd2d 	bl	800c77c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d26:	4864      	ldr	r0, [pc, #400]	; (8000eb8 <main+0x38c>)
 8000d28:	f006 fce2 	bl	80076f0 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4861      	ldr	r0, [pc, #388]	; (8000ebc <main+0x390>)
 8000d36:	f006 fcf3 	bl	8007720 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	485e      	ldr	r0, [pc, #376]	; (8000eb8 <main+0x38c>)
 8000d40:	f006 fcd6 	bl	80076f0 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	2120      	movs	r1, #32
 8000d4a:	485d      	ldr	r0, [pc, #372]	; (8000ec0 <main+0x394>)
 8000d4c:	f006 fce8 	bl	8007720 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	4858      	ldr	r0, [pc, #352]	; (8000eb8 <main+0x38c>)
 8000d56:	f006 fccb 	bl	80076f0 <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d62:	4958      	ldr	r1, [pc, #352]	; (8000ec4 <main+0x398>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00e fd49 	bl	800f7fc <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2005      	movs	r0, #5
 8000d72:	f002 fbcd 	bl	8003510 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8000d76:	2306      	movs	r3, #6
 8000d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4851      	ldr	r0, [pc, #324]	; (8000ec8 <main+0x39c>)
 8000d84:	f004 fff4 	bl	8005d70 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000d88:	484f      	ldr	r0, [pc, #316]	; (8000ec8 <main+0x39c>)
 8000d8a:	f004 fd5d 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d8e:	bf00      	nop
 8000d90:	2164      	movs	r1, #100	; 0x64
 8000d92:	484d      	ldr	r0, [pc, #308]	; (8000ec8 <main+0x39c>)
 8000d94:	f004 fe26 	bl	80059e4 <HAL_ADC_PollForConversion>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f8      	bne.n	8000d90 <main+0x264>
		potr = HAL_ADC_GetValue(&hadc3);
 8000d9e:	484a      	ldr	r0, [pc, #296]	; (8000ec8 <main+0x39c>)
 8000da0:	f004 ffbb 	bl	8005d1a <HAL_ADC_GetValue>
 8000da4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

		sConfig.Channel = ADC_CHANNEL_7;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <main+0x39c>)
 8000db6:	f004 ffdb 	bl	8005d70 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000dba:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x39c>)
 8000dbc:	f004 fd44 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc0:	bf00      	nop
 8000dc2:	2164      	movs	r1, #100	; 0x64
 8000dc4:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <main+0x39c>)
 8000dc6:	f004 fe0d 	bl	80059e4 <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f8      	bne.n	8000dc2 <main+0x296>
		potl = HAL_ADC_GetValue(&hadc3);
 8000dd0:	483d      	ldr	r0, [pc, #244]	; (8000ec8 <main+0x39c>)
 8000dd2:	f004 ffa2 	bl	8005d1a <HAL_ADC_GetValue>
 8000dd6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

		sConfig.Channel = ADC_CHANNEL_8;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <main+0x39c>)
 8000de8:	f004 ffc2 	bl	8005d70 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000dec:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <main+0x39c>)
 8000dee:	f004 fd2b 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df2:	bf00      	nop
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	4834      	ldr	r0, [pc, #208]	; (8000ec8 <main+0x39c>)
 8000df8:	f004 fdf4 	bl	80059e4 <HAL_ADC_PollForConversion>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f8      	bne.n	8000df4 <main+0x2c8>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e02:	4831      	ldr	r0, [pc, #196]	; (8000ec8 <main+0x39c>)
 8000e04:	f004 ff89 	bl	8005d1a <HAL_ADC_GetValue>
 8000e08:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

		HAL_ADC_Start(&hadc1);
 8000e0c:	482f      	ldr	r0, [pc, #188]	; (8000ecc <main+0x3a0>)
 8000e0e:	f004 fd1b 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e12:	bf00      	nop
 8000e14:	2164      	movs	r1, #100	; 0x64
 8000e16:	482d      	ldr	r0, [pc, #180]	; (8000ecc <main+0x3a0>)
 8000e18:	f004 fde4 	bl	80059e4 <HAL_ADC_PollForConversion>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f8      	bne.n	8000e14 <main+0x2e8>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e22:	482a      	ldr	r0, [pc, #168]	; (8000ecc <main+0x3a0>)
 8000e24:	f004 ff79 	bl	8005d1a <HAL_ADC_GetValue>
 8000e28:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e2c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8000e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e40:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e44:	4922      	ldr	r1, [pc, #136]	; (8000ed0 <main+0x3a4>)
 8000e46:	f00e fcd9 	bl	800f7fc <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2009      	movs	r0, #9
 8000e52:	f002 fb5d 	bl	8003510 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <main+0x3a8>)
 8000e58:	f003 fb20 	bl	800449c <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <main+0x3a8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f43f af5e 	beq.w	8000d22 <main+0x1f6>
			BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <main+0x3a8>)
 8000e68:	885b      	ldrh	r3, [r3, #2]
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <main+0x3a8>)
 8000e6c:	8991      	ldrh	r1, [r2, #12]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 fe21 	bl	8003ab8 <BSP_LCD_FillCircle>
		HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e76:	e754      	b.n	8000d22 <main+0x1f6>
 8000e78:	200000bc 	.word	0x200000bc
 8000e7c:	ff0000ff 	.word	0xff0000ff
 8000e80:	20000a14 	.word	0x20000a14
 8000e84:	200008bc 	.word	0x200008bc
 8000e88:	20000a10 	.word	0x20000a10
 8000e8c:	0800ffec 	.word	0x0800ffec
 8000e90:	20000a08 	.word	0x20000a08
 8000e94:	20000a0c 	.word	0x20000a0c
 8000e98:	0800fffc 	.word	0x0800fffc
 8000e9c:	200009f8 	.word	0x200009f8
 8000ea0:	08010018 	.word	0x08010018
 8000ea4:	200009fc 	.word	0x200009fc
 8000ea8:	08010034 	.word	0x08010034
 8000eac:	20000a00 	.word	0x20000a00
 8000eb0:	08010050 	.word	0x08010050
 8000eb4:	20000a04 	.word	0x20000a04
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40021c00 	.word	0x40021c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	0800ffb0 	.word	0x0800ffb0
 8000ec8:	2000045c 	.word	0x2000045c
 8000ecc:	20000414 	.word	0x20000414
 8000ed0:	0800ffbc 	.word	0x0800ffbc
 8000ed4:	20000a28 	.word	0x20000a28

08000ed8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00e fb72 	bl	800f5d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000efc:	f007 fddc 	bl	8008ab8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <SystemClock_Config+0xdc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <SystemClock_Config+0xdc>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <SystemClock_Config+0xdc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <SystemClock_Config+0xe0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <SystemClock_Config+0xe0>)
 8000f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <SystemClock_Config+0xe0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f30:	2309      	movs	r3, #9
 8000f32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000f48:	2319      	movs	r3, #25
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000f4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f56:	2309      	movs	r3, #9
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 fe0a 	bl	8008b78 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000f6a:	f001 fe89 	bl	8002c80 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f6e:	f007 fdb3 	bl	8008ad8 <HAL_PWREx_EnableOverDrive>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000f78:	f001 fe82 	bl	8002c80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f8c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2106      	movs	r1, #6
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f008 f890 	bl	80090c0 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000fa6:	f001 fe6b 	bl	8002c80 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3750      	adds	r7, #80	; 0x50
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_ADC1_Init+0x98>)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <MX_ADC1_Init+0x9c>)
 8000fd2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_ADC1_Init+0x98>)
 8000fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fda:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_ADC1_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_ADC1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_ADC1_Init+0x98>)
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_ADC1_Init+0xa0>)
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_ADC1_Init+0x98>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_ADC1_Init+0x98>)
 8001018:	2201      	movs	r2, #1
 800101a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_ADC1_Init+0x98>)
 800101e:	f004 fbcf 	bl	80057c0 <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001028:	f001 fe2a 	bl	8002c80 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001030:	2301      	movs	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_ADC1_Init+0x98>)
 800103e:	f004 fe97 	bl	8005d70 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001048:	f001 fe1a 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000414 	.word	0x20000414
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_ADC3_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_ADC3_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_ADC3_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_ADC3_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_ADC3_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_ADC3_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_ADC3_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_ADC3_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <MX_ADC3_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010c2:	f004 fb7d 	bl	80057c0 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80010cc:	f001 fdd8 	bl	8002c80 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80010d0:	2306      	movs	r3, #6
 80010d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC3_Init+0x98>)
 80010e2:	f004 fe45 	bl	8005d70 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80010ec:	f001 fdc8 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000045c 	.word	0x2000045c
 80010fc:	40012200 	.word	0x40012200
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_DAC_Init+0x4c>)
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <MX_DAC_Init+0x50>)
 8001116:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_DAC_Init+0x4c>)
 800111a:	f005 f965 	bl	80063e8 <HAL_DAC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8001124:	f001 fdac 	bl	8002c80 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_DAC_Init+0x4c>)
 8001138:	f005 f9dc 	bl	80064f4 <HAL_DAC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8001142:	f001 fd9d 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200004a4 	.word	0x200004a4
 8001154:	40007400 	.word	0x40007400

08001158 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 800115e:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <MX_DMA2D_Init+0x60>)
 8001160:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 8001188:	2200      	movs	r2, #0
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 800118e:	f005 fc5b 	bl	8006a48 <HAL_DMA2D_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001198:	f001 fd72 	bl	8002c80 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800119c:	2101      	movs	r1, #1
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_DMA2D_Init+0x5c>)
 80011a0:	f005 fec0 	bl	8006f24 <HAL_DMA2D_ConfigLayer>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80011aa:	f001 fd69 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200004b8 	.word	0x200004b8
 80011b8:	4002b000 	.word	0x4002b000

080011bc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	f006 faac 	bl	8007754 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001202:	f001 fd3d 	bl	8002c80 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C1_Init+0x74>)
 800120a:	f007 f845 	bl	8008298 <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001214:	f001 fd34 	bl	8002c80 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121c:	f007 f887 	bl	800832e <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001226:	f001 fd2b 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200004f8 	.word	0x200004f8
 8001234:	40005400 	.word	0x40005400
 8001238:	00c0eaff 	.word	0x00c0eaff

0800123c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C3_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C3_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C3_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C3_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_I2C3_Init+0x74>)
 8001278:	f006 fa6c 	bl	8007754 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001282:	f001 fcfd 	bl	8002c80 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_I2C3_Init+0x74>)
 800128a:	f007 f805 	bl	8008298 <HAL_I2CEx_ConfigAnalogFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001294:	f001 fcf4 	bl	8002c80 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_I2C3_Init+0x74>)
 800129c:	f007 f847 	bl	800832e <HAL_I2CEx_ConfigDigitalFilter>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 80012a6:	f001 fceb 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000544 	.word	0x20000544
 80012b4:	40005c00 	.word	0x40005c00
 80012b8:	00c0eaff 	.word	0x00c0eaff

080012bc <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2234      	movs	r2, #52	; 0x34
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00e f981 	bl	800f5d0 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012d0:	4a3a      	ldr	r2, [pc, #232]	; (80013bc <MX_LTDC_Init+0x100>)
 80012d2:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012f4:	2209      	movs	r2, #9
 80012f6:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012fa:	2235      	movs	r2, #53	; 0x35
 80012fc:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001300:	220b      	movs	r2, #11
 8001302:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001306:	f240 2215 	movw	r2, #533	; 0x215
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800130e:	f240 121b 	movw	r2, #283	; 0x11b
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001316:	f240 2235 	movw	r2, #565	; 0x235
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800131e:	f240 121d 	movw	r2, #285	; 0x11d
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800133c:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800133e:	f007 f843 	bl	80083c8 <HAL_LTDC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001348:	f001 fc9a 	bl	8002c80 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001350:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001354:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800135a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800135e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001364:	23ff      	movs	r3, #255	; 0xff
 8001366:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800136c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001370:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001376:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 800137c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001382:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80013a2:	f007 f9a3 	bl	80086ec <HAL_LTDC_ConfigLayer>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 80013ac:	f001 fc68 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000590 	.word	0x20000590
 80013bc:	40016800 	.word	0x40016800

080013c0 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b092      	sub	sp, #72	; 0x48
 80013c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80013c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	222c      	movs	r2, #44	; 0x2c
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00e f8f4 	bl	800f5d0 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <MX_RTC_Init+0x144>)
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <MX_RTC_Init+0x148>)
 80013ec:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ee:	4b45      	ldr	r3, [pc, #276]	; (8001504 <MX_RTC_Init+0x144>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <MX_RTC_Init+0x144>)
 80013f6:	227f      	movs	r2, #127	; 0x7f
 80013f8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80013fa:	4b42      	ldr	r3, [pc, #264]	; (8001504 <MX_RTC_Init+0x144>)
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001400:	4b40      	ldr	r3, [pc, #256]	; (8001504 <MX_RTC_Init+0x144>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <MX_RTC_Init+0x144>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <MX_RTC_Init+0x144>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001412:	483c      	ldr	r0, [pc, #240]	; (8001504 <MX_RTC_Init+0x144>)
 8001414:	f008 fc5c 	bl	8009cd0 <HAL_RTC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 800141e:	f001 fc2f 	bl	8002c80 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800143c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	482f      	ldr	r0, [pc, #188]	; (8001504 <MX_RTC_Init+0x144>)
 8001446:	f008 fcd5 	bl	8009df4 <HAL_RTC_SetTime>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001450:	f001 fc16 	bl	8002c80 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001454:	2301      	movs	r3, #1
 8001456:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001460:	2301      	movs	r3, #1
 8001462:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800146c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_RTC_Init+0x144>)
 8001476:	f008 fd7b 	bl	8009f70 <HAL_RTC_SetDate>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001480:	f001 fbfe 	bl	8002c80 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001484:	2300      	movs	r3, #0
 8001486:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001488:	2300      	movs	r3, #0
 800148a:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 800148c:	2300      	movs	r3, #0
 800148e:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 80014ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	4812      	ldr	r0, [pc, #72]	; (8001504 <MX_RTC_Init+0x144>)
 80014bc:	f008 fe00 	bl	800a0c0 <HAL_RTC_SetAlarm>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 80014c6:	f001 fbdb 	bl	8002c80 <Error_Handler>
	}

	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80014ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <MX_RTC_Init+0x144>)
 80014d8:	f008 fdf2 	bl	800a0c0 <HAL_RTC_SetAlarm>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 80014e2:	f001 fbcd 	bl	8002c80 <Error_Handler>
	}

	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80014e6:	2202      	movs	r2, #2
 80014e8:	2100      	movs	r1, #0
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <MX_RTC_Init+0x144>)
 80014ec:	f008 ff72 	bl	800a3d4 <HAL_RTCEx_SetTimeStamp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 80014f6:	f001 fbc3 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	3748      	adds	r7, #72	; 0x48
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000638 	.word	0x20000638
 8001508:	40002800 	.word	0x40002800

0800150c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_SPI2_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_SPI2_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_SPI2_Init+0x74>)
 8001518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800151c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_SPI2_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI2_Init+0x74>)
 8001526:	f44f 7240 	mov.w	r2, #768	; 0x300
 800152a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_SPI2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI2_Init+0x74>)
 800153a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800153e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_SPI2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI2_Init+0x74>)
 800155a:	2207      	movs	r2, #7
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI2_Init+0x74>)
 8001566:	2208      	movs	r2, #8
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_SPI2_Init+0x74>)
 800156c:	f009 f819 	bl	800a5a2 <HAL_SPI_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8001576:	f001 fb83 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000658 	.word	0x20000658
 8001584:	40003800 	.word	0x40003800

08001588 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <MX_TIM1_Init+0xa4>)
 80015aa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015be:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015d4:	f009 f890 	bl	800a6f8 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80015de:	f001 fb4f 	bl	8002c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <MX_TIM1_Init+0xa0>)
 80015f0:	f009 fa72 	bl	800aad8 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80015fa:	f001 fb41 	bl	8002c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_TIM1_Init+0xa0>)
 8001610:	f009 fc8e 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800161a:	f001 fb31 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200006bc 	.word	0x200006bc
 800162c:	40010000 	.word	0x40010000

08001630 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_TIM2_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_TIM2_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001678:	f009 f83e 	bl	800a6f8 <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001682:	f001 fafd 	bl	8002c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM2_Init+0x98>)
 8001694:	f009 fa20 	bl	800aad8 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800169e:	f001 faef 	bl	8002c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM2_Init+0x98>)
 80016b0:	f009 fc3e 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80016ba:	f001 fae1 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000708 	.word	0x20000708

080016cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM3_Init+0x94>)
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <MX_TIM3_Init+0x98>)
 80016ee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM3_Init+0x94>)
 80016fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001702:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM3_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_TIM3_Init+0x94>)
 8001712:	f008 fff1 	bl	800a6f8 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800171c:	f001 fab0 	bl	8002c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_TIM3_Init+0x94>)
 800172e:	f009 f9d3 	bl	800aad8 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8001738:	f001 faa2 	bl	8002c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM3_Init+0x94>)
 800174a:	f009 fbf1 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8001754:	f001 fa94 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000754 	.word	0x20000754
 8001764:	40000400 	.word	0x40000400

08001768 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_TIM5_Init+0x94>)
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <MX_TIM5_Init+0x98>)
 800178a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_TIM5_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_TIM5_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_TIM5_Init+0x94>)
 800179a:	f04f 32ff 	mov.w	r2, #4294967295
 800179e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_TIM5_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_TIM5_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <MX_TIM5_Init+0x94>)
 80017ae:	f008 ffa3 	bl	800a6f8 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 80017b8:	f001 fa62 	bl	8002c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <MX_TIM5_Init+0x94>)
 80017ca:	f009 f985 	bl	800aad8 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 80017d4:	f001 fa54 	bl	8002c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_TIM5_Init+0x94>)
 80017e6:	f009 fba3 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 80017f0:	f001 fa46 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200007a0 	.word	0x200007a0
 8001800:	40000c00 	.word	0x40000c00

08001804 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <MX_TIM8_Init+0xa4>)
 8001826:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_TIM8_Init+0xa0>)
 8001850:	f008 ff52 	bl	800a6f8 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 800185a:	f001 fa11 	bl	8002c80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800186c:	f009 f934 	bl	800aad8 <HAL_TIM_ConfigClockSource>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001876:	f001 fa03 	bl	8002c80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_TIM8_Init+0xa0>)
 800188c:	f009 fb50 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001896:	f001 f9f3 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200007ec 	.word	0x200007ec
 80018a8:	40010400 	.word	0x40010400

080018ac <MX_UART7_Init>:
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_UART7_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_UART7_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_UART7_Init+0x58>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_UART7_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_UART7_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_UART7_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_UART7_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_UART7_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_UART7_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_UART7_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_UART7_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_UART7_Init+0x58>)
 80018f0:	f009 fbca 	bl	800b088 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_UART7_Init+0x52>
	{
		Error_Handler();
 80018fa:	f001 f9c1 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000838 	.word	0x20000838
 8001908:	40007800 	.word	0x40007800

0800190c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <MX_USART1_UART_Init+0x5c>)
 8001914:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART1_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART1_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART1_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART1_UART_Init+0x58>)
 8001950:	f009 fb9a 	bl	800b088 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800195a:	f001 f991 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200008bc 	.word	0x200008bc
 8001968:	40011000 	.word	0x40011000

0800196c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <MX_USART6_UART_Init+0x5c>)
 8001974:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USART6_UART_Init+0x58>)
 80019b0:	f009 fb6a 	bl	800b088 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 80019ba:	f001 f961 	bl	8002c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000940 	.word	0x20000940
 80019c8:	40011400 	.word	0x40011400

080019cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_FMC_Init+0x98>)
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <MX_FMC_Init+0x9c>)
 80019e8:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_FMC_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_FMC_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_FMC_Init+0x98>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_FMC_Init+0x98>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a0a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a0e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a1c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8001a30:	2307      	movs	r3, #7
 8001a32:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_FMC_Init+0x98>)
 8001a4e:	f008 fd17 	bl	800a480 <HAL_SDRAM_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8001a58:	f001 f912 	bl	8002c80 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200009c4 	.word	0x200009c4
 8001a68:	a0000140 	.word	0xa0000140

08001a6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	; 0x40
 8001a70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a82:	4baf      	ldr	r3, [pc, #700]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4aae      	ldr	r2, [pc, #696]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001a88:	f043 0310 	orr.w	r3, r3, #16
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4bac      	ldr	r3, [pc, #688]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9a:	4ba9      	ldr	r3, [pc, #676]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4aa8      	ldr	r2, [pc, #672]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4ba6      	ldr	r3, [pc, #664]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4ba3      	ldr	r3, [pc, #652]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4aa2      	ldr	r2, [pc, #648]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4ba0      	ldr	r3, [pc, #640]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b9d      	ldr	r3, [pc, #628]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a9c      	ldr	r2, [pc, #624]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b9a      	ldr	r3, [pc, #616]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	4b97      	ldr	r3, [pc, #604]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a96      	ldr	r2, [pc, #600]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b94      	ldr	r3, [pc, #592]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a90      	ldr	r2, [pc, #576]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b12:	4b8b      	ldr	r3, [pc, #556]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a8a      	ldr	r2, [pc, #552]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a84      	ldr	r2, [pc, #528]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001b42:	4b7f      	ldr	r3, [pc, #508]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5a:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a78      	ldr	r2, [pc, #480]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b60:	f043 0320 	orr.w	r3, r3, #32
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a72      	ldr	r2, [pc, #456]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <MX_GPIO_Init+0x2d4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2160      	movs	r1, #96	; 0x60
 8001b8e:	486d      	ldr	r0, [pc, #436]	; (8001d44 <MX_GPIO_Init+0x2d8>)
 8001b90:	f005 fdc6 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2120      	movs	r1, #32
 8001b98:	486b      	ldr	r0, [pc, #428]	; (8001d48 <MX_GPIO_Init+0x2dc>)
 8001b9a:	f005 fdc1 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	4869      	ldr	r0, [pc, #420]	; (8001d48 <MX_GPIO_Init+0x2dc>)
 8001ba4:	f005 fdbc 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2108      	movs	r1, #8
 8001bac:	4867      	ldr	r0, [pc, #412]	; (8001d4c <MX_GPIO_Init+0x2e0>)
 8001bae:	f005 fdb7 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb8:	4865      	ldr	r0, [pc, #404]	; (8001d50 <MX_GPIO_Init+0x2e4>)
 8001bba:	f005 fdb1 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001bc4:	4863      	ldr	r0, [pc, #396]	; (8001d54 <MX_GPIO_Init+0x2e8>)
 8001bc6:	f005 fdab 	bl	8007720 <HAL_GPIO_WritePin>
			|LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	21c8      	movs	r1, #200	; 0xc8
 8001bce:	4862      	ldr	r0, [pc, #392]	; (8001d58 <MX_GPIO_Init+0x2ec>)
 8001bd0:	f005 fda6 	bl	8007720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4857      	ldr	r0, [pc, #348]	; (8001d44 <MX_GPIO_Init+0x2d8>)
 8001be8:	f005 faca 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001bec:	2304      	movs	r3, #4
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	484f      	ldr	r0, [pc, #316]	; (8001d44 <MX_GPIO_Init+0x2d8>)
 8001c08:	f005 faba 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c0c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c1e:	230b      	movs	r3, #11
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	484b      	ldr	r0, [pc, #300]	; (8001d58 <MX_GPIO_Init+0x2ec>)
 8001c2a:	f005 faa9 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001c2e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c40:	230a      	movs	r3, #10
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4844      	ldr	r0, [pc, #272]	; (8001d5c <MX_GPIO_Init+0x2f0>)
 8001c4c:	f005 fa98 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001c60:	2308      	movs	r3, #8
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4837      	ldr	r0, [pc, #220]	; (8001d48 <MX_GPIO_Init+0x2dc>)
 8001c6c:	f005 fa88 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001c70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c82:	230c      	movs	r3, #12
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4834      	ldr	r0, [pc, #208]	; (8001d60 <MX_GPIO_Init+0x2f4>)
 8001c8e:	f005 fa77 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
	GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001c92:	f248 1340 	movw	r3, #33088	; 0x8140
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	482f      	ldr	r0, [pc, #188]	; (8001d64 <MX_GPIO_Init+0x2f8>)
 8001ca8:	f005 fa6a 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED14_Pin LED15_Pin */
	GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001cac:	2360      	movs	r3, #96	; 0x60
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4820      	ldr	r0, [pc, #128]	; (8001d44 <MX_GPIO_Init+0x2d8>)
 8001cc4:	f005 fa5c 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cd8:	230a      	movs	r3, #10
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <MX_GPIO_Init+0x2f0>)
 8001ce4:	f005 fa4c 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <MX_GPIO_Init+0x2fc>)
 8001cfe:	f005 fa3f 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_GPIO_Init+0x2dc>)
 8001d18:	f005 fa32 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001d1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d2e:	230a      	movs	r3, #10
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <MX_GPIO_Init+0x2f8>)
 8001d3a:	f005 fa21 	bl	8007180 <HAL_GPIO_Init>
 8001d3e:	e015      	b.n	8001d6c <MX_GPIO_Init+0x300>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40022800 	.word	0x40022800
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40022400 	.word	0x40022400

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d6c:	23f0      	movs	r3, #240	; 0xf0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4891      	ldr	r0, [pc, #580]	; (8001fcc <MX_GPIO_Init+0x560>)
 8001d88:	f005 f9fa 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d9e:	230a      	movs	r3, #10
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4889      	ldr	r0, [pc, #548]	; (8001fd0 <MX_GPIO_Init+0x564>)
 8001daa:	f005 f9e9 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001dae:	2328      	movs	r3, #40	; 0x28
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4883      	ldr	r0, [pc, #524]	; (8001fd4 <MX_GPIO_Init+0x568>)
 8001dc6:	f005 f9db 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	487e      	ldr	r0, [pc, #504]	; (8001fd8 <MX_GPIO_Init+0x56c>)
 8001de0:	f005 f9ce 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001de4:	2308      	movs	r3, #8
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4878      	ldr	r0, [pc, #480]	; (8001fdc <MX_GPIO_Init+0x570>)
 8001dfc:	f005 f9c0 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 RMII_RXER_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001e00:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e12:	4619      	mov	r1, r3
 8001e14:	486e      	ldr	r0, [pc, #440]	; (8001fd0 <MX_GPIO_Init+0x564>)
 8001e16:	f005 f9b3 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4869      	ldr	r0, [pc, #420]	; (8001fd4 <MX_GPIO_Init+0x568>)
 8001e2e:	f005 f9a7 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e32:	2304      	movs	r3, #4
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e42:	230c      	movs	r3, #12
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4861      	ldr	r0, [pc, #388]	; (8001fd4 <MX_GPIO_Init+0x568>)
 8001e4e:	f005 f997 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001e52:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	485e      	ldr	r0, [pc, #376]	; (8001fe0 <MX_GPIO_Init+0x574>)
 8001e68:	f005 f98a 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DISP_Pin */
	GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4851      	ldr	r0, [pc, #324]	; (8001fcc <MX_GPIO_Init+0x560>)
 8001e86:	f005 f97b 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
	GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001e8a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			|LED2_Pin|LED18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	484f      	ldr	r0, [pc, #316]	; (8001fe0 <MX_GPIO_Init+0x574>)
 8001ea4:	f005 f96c 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4843      	ldr	r0, [pc, #268]	; (8001fcc <MX_GPIO_Init+0x560>)
 8001ec0:	f005 f95e 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001edc:	4619      	mov	r1, r3
 8001ede:	4840      	ldr	r0, [pc, #256]	; (8001fe0 <MX_GPIO_Init+0x574>)
 8001ee0:	f005 f94e 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001ee4:	23c8      	movs	r3, #200	; 0xc8
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4835      	ldr	r0, [pc, #212]	; (8001fd0 <MX_GPIO_Init+0x564>)
 8001efc:	f005 f940 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f00:	2305      	movs	r3, #5
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f10:	230a      	movs	r3, #10
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f18:	4619      	mov	r1, r3
 8001f1a:	482f      	ldr	r0, [pc, #188]	; (8001fd8 <MX_GPIO_Init+0x56c>)
 8001f1c:	f005 f930 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f20:	2332      	movs	r3, #50	; 0x32
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f30:	230b      	movs	r3, #11
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4827      	ldr	r0, [pc, #156]	; (8001fd8 <MX_GPIO_Init+0x56c>)
 8001f3c:	f005 f920 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f40:	2304      	movs	r3, #4
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f50:	2309      	movs	r3, #9
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4822      	ldr	r0, [pc, #136]	; (8001fe4 <MX_GPIO_Init+0x578>)
 8001f5c:	f005 f910 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001f60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f72:	2309      	movs	r3, #9
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4815      	ldr	r0, [pc, #84]	; (8001fd4 <MX_GPIO_Init+0x568>)
 8001f7e:	f005 f8ff 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f82:	2386      	movs	r3, #134	; 0x86
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f92:	230b      	movs	r3, #11
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4812      	ldr	r0, [pc, #72]	; (8001fe8 <MX_GPIO_Init+0x57c>)
 8001f9e:	f005 f8ef 	bl	8007180 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001fa2:	2328      	movs	r3, #40	; 0x28
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <MX_GPIO_Init+0x57c>)
 8001fbe:	f005 f8df 	bl	8007180 <HAL_GPIO_Init>

}
 8001fc2:	bf00      	nop
 8001fc4:	3740      	adds	r7, #64	; 0x40
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40022800 	.word	0x40022800
 8001fe0:	40021c00 	.word	0x40021c00
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	uint8_t Message[2];

	if(rxbuffer[0]=='a'){ HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin,1);}
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b61      	cmp	r3, #97	; 0x61
 8001ffa:	d105      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x1c>
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	4819      	ldr	r0, [pc, #100]	; (8002068 <HAL_UART_RxCpltCallback+0x7c>)
 8002004:	f005 fb8c 	bl	8007720 <HAL_GPIO_WritePin>
	if(rxbuffer[0]=='e'){ HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin,0);}
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b65      	cmp	r3, #101	; 0x65
 800200e:	d105      	bne.n	800201c <HAL_UART_RxCpltCallback+0x30>
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <HAL_UART_RxCpltCallback+0x7c>)
 8002018:	f005 fb82 	bl	8007720 <HAL_GPIO_WritePin>

	if((rxbuffer[0] == 'z') || (rxbuffer[0] == 'q') || (rxbuffer[0] =='s') || (rxbuffer[0] == 'd')){
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b7a      	cmp	r3, #122	; 0x7a
 8002022:	d00b      	beq.n	800203c <HAL_UART_RxCpltCallback+0x50>
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b71      	cmp	r3, #113	; 0x71
 800202a:	d007      	beq.n	800203c <HAL_UART_RxCpltCallback+0x50>
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b73      	cmp	r3, #115	; 0x73
 8002032:	d003      	beq.n	800203c <HAL_UART_RxCpltCallback+0x50>
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d10a      	bne.n	8002052 <HAL_UART_RxCpltCallback+0x66>
		Message[0] = rxbuffer[0];
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	733b      	strb	r3, [r7, #12]
		xQueueSendFromISR(myQueue01Handle, &Message, 0);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_UART_RxCpltCallback+0x80>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f107 010c 	add.w	r1, r7, #12
 800204a:	2300      	movs	r3, #0
 800204c:	2200      	movs	r2, #0
 800204e:	f00b f815 	bl	800d07c <xQueueGenericSendFromISR>
	}

	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8002052:	2201      	movs	r2, #1
 8002054:	4903      	ldr	r1, [pc, #12]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <HAL_UART_RxCpltCallback+0x84>)
 8002058:	f009 f864 	bl	800b124 <HAL_UART_Receive_IT>
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000a14 	.word	0x20000a14
 8002068:	40021c00 	.word	0x40021c00
 800206c:	20000a08 	.word	0x20000a08
 8002070:	200008bc 	.word	0x200008bc

08002074 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800207c:	2001      	movs	r0, #1
 800207e:	f00a fbd0 	bl	800c822 <osDelay>
 8002082:	e7fb      	b.n	800207c <StartDefaultTask+0x8>

08002084 <tache_snake>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_snake */
void tache_snake(void const * argument)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b092      	sub	sp, #72	; 0x48
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tache_snake */
	TickType_t xLastWakeTimeS;
	const TickType_t periodS = 120;
 800208c:	2378      	movs	r3, #120	; 0x78
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t jeu,cas;
	int blocage=1;
 8002090:	2301      	movs	r3, #1
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t xSnake=200,ySnake=200,x0Snake=xSnake,y0Snake=ySnake;
 8002094:	23c8      	movs	r3, #200	; 0xc8
 8002096:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002098:	23c8      	movs	r3, #200	; 0xc8
 800209a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800209c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800209e:	877b      	strh	r3, [r7, #58]	; 0x3a
 80020a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80020a2:	873b      	strh	r3, [r7, #56]	; 0x38

	int32_t joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
	sConfig.Channel = ADC_CHANNEL_8;
 80020ba:	2308      	movs	r3, #8
 80020bc:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	4899      	ldr	r0, [pc, #612]	; (800232c <tache_snake+0x2a8>)
 80020c6:	f003 fe53 	bl	8005d70 <HAL_ADC_ConfigChannel>

	xLastWakeTimeS = xTaskGetTickCount();
 80020ca:	f00c f8cd 	bl	800e268 <xTaskGetTickCount>
 80020ce:	4603      	mov	r3, r0
 80020d0:	623b      	str	r3, [r7, #32]
	/* Infinite loop */
	for(;;)
	{

		joystick_v=-10;
 80020d2:	f06f 0309 	mvn.w	r3, #9
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
		joystick_h=-10;
 80020d8:	f06f 0309 	mvn.w	r3, #9
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

		if (longueur>0){taskENTER_CRITICAL(); v=lSnake; taskEXIT_CRITICAL();}
 80020de:	4b94      	ldr	r3, [pc, #592]	; (8002330 <tache_snake+0x2ac>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <tache_snake+0x72>
 80020e6:	f00c ff29 	bl	800ef3c <vPortEnterCritical>
 80020ea:	4b92      	ldr	r3, [pc, #584]	; (8002334 <tache_snake+0x2b0>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b92      	ldr	r3, [pc, #584]	; (8002338 <tache_snake+0x2b4>)
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	f00c ff57 	bl	800efa4 <vPortExitCritical>

		osMutexWait(myMutex01Handle, portMAX_DELAY);
 80020f6:	4b91      	ldr	r3, [pc, #580]	; (800233c <tache_snake+0x2b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	4618      	mov	r0, r3
 8002100:	f00a fbbc 	bl	800c87c <osMutexWait>

		if (longueur==0){
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <tache_snake+0x2ac>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d147      	bne.n	800219c <tache_snake+0x118>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f001 f868 	bl	80031e4 <BSP_LCD_SetTextColor>

			switch (dir[0]){
 8002114:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <tache_snake+0x2bc>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	2b03      	cmp	r3, #3
 800211c:	d83f      	bhi.n	800219e <tache_snake+0x11a>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <tache_snake+0xa0>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	08002169 	.word	0x08002169
 800212c:	0800214f 	.word	0x0800214f
 8002130:	08002183 	.word	0x08002183
			case 1  :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 8002134:	4b83      	ldr	r3, [pc, #524]	; (8002344 <tache_snake+0x2c0>)
 8002136:	8818      	ldrh	r0, [r3, #0]
 8002138:	4b82      	ldr	r3, [pc, #520]	; (8002344 <tache_snake+0x2c0>)
 800213a:	8859      	ldrh	r1, [r3, #2]
 800213c:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <tache_snake+0x2b0>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b81      	ldr	r3, [pc, #516]	; (8002348 <tache_snake+0x2c4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f001 fc3c 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 800214c:	e027      	b.n	800219e <tache_snake+0x11a>
			case 3 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 800214e:	4b7d      	ldr	r3, [pc, #500]	; (8002344 <tache_snake+0x2c0>)
 8002150:	8818      	ldrh	r0, [r3, #0]
 8002152:	4b7c      	ldr	r3, [pc, #496]	; (8002344 <tache_snake+0x2c0>)
 8002154:	8859      	ldrh	r1, [r3, #2]
 8002156:	4b77      	ldr	r3, [pc, #476]	; (8002334 <tache_snake+0x2b0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <tache_snake+0x2c4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	f001 fc2f 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 8002166:	e01a      	b.n	800219e <tache_snake+0x11a>
			case 2 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 8002168:	4b76      	ldr	r3, [pc, #472]	; (8002344 <tache_snake+0x2c0>)
 800216a:	8818      	ldrh	r0, [r3, #0]
 800216c:	4b75      	ldr	r3, [pc, #468]	; (8002344 <tache_snake+0x2c0>)
 800216e:	8859      	ldrh	r1, [r3, #2]
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <tache_snake+0x2c4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <tache_snake+0x2b0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f001 fc22 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 8002180:	e00d      	b.n	800219e <tache_snake+0x11a>
			case 4 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 8002182:	4b70      	ldr	r3, [pc, #448]	; (8002344 <tache_snake+0x2c0>)
 8002184:	8818      	ldrh	r0, [r3, #0]
 8002186:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <tache_snake+0x2c0>)
 8002188:	8859      	ldrh	r1, [r3, #2]
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <tache_snake+0x2c4>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <tache_snake+0x2b0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f001 fc15 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 800219a:	e000      	b.n	800219e <tache_snake+0x11a>

			}
		}
 800219c:	bf00      	nop


		   osMutexRelease(myMutex01Handle);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <tache_snake+0x2b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00a fbb8 	bl	800c918 <osMutexRelease>

		HAL_ADC_Start(&hadc3);
 80021a8:	4860      	ldr	r0, [pc, #384]	; (800232c <tache_snake+0x2a8>)
 80021aa:	f003 fb4d 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80021ae:	bf00      	nop
 80021b0:	2164      	movs	r1, #100	; 0x64
 80021b2:	485e      	ldr	r0, [pc, #376]	; (800232c <tache_snake+0x2a8>)
 80021b4:	f003 fc16 	bl	80059e4 <HAL_ADC_PollForConversion>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f8      	bne.n	80021b0 <tache_snake+0x12c>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 80021be:	485b      	ldr	r0, [pc, #364]	; (800232c <tache_snake+0x2a8>)
 80021c0:	f003 fdab 	bl	8005d1a <HAL_ADC_GetValue>
 80021c4:	4603      	mov	r3, r0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28

		HAL_ADC_Start(&hadc1);
 80021c8:	4860      	ldr	r0, [pc, #384]	; (800234c <tache_snake+0x2c8>)
 80021ca:	f003 fb3d 	bl	8005848 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80021ce:	bf00      	nop
 80021d0:	2164      	movs	r1, #100	; 0x64
 80021d2:	485e      	ldr	r0, [pc, #376]	; (800234c <tache_snake+0x2c8>)
 80021d4:	f003 fc06 	bl	80059e4 <HAL_ADC_PollForConversion>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f8      	bne.n	80021d0 <tache_snake+0x14c>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 80021de:	485b      	ldr	r0, [pc, #364]	; (800234c <tache_snake+0x2c8>)
 80021e0:	f003 fd9b 	bl	8005d1a <HAL_ADC_GetValue>
 80021e4:	4603      	mov	r3, r0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24


		if(joystick_h < 1000){
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ee:	da02      	bge.n	80021f6 <tache_snake+0x172>
			cas='d';
 80021f0:	2364      	movs	r3, #100	; 0x64
 80021f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_h > 3000){
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021fc:	4293      	cmp	r3, r2
 80021fe:	dd02      	ble.n	8002206 <tache_snake+0x182>
			cas='q';
 8002200:	2371      	movs	r3, #113	; 0x71
 8002202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v < 1000){
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220c:	da02      	bge.n	8002214 <tache_snake+0x190>
			cas='s';
 800220e:	2373      	movs	r3, #115	; 0x73
 8002210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v > 3000){
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800221a:	4293      	cmp	r3, r2
 800221c:	dd02      	ble.n	8002224 <tache_snake+0x1a0>
			cas='z';
 800221e:	237a      	movs	r3, #122	; 0x7a
 8002220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v==-10 && joystick_h==-10) {
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	f113 0f0a 	cmn.w	r3, #10
 800222a:	d106      	bne.n	800223a <tache_snake+0x1b6>
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f113 0f0a 	cmn.w	r3, #10
 8002232:	d102      	bne.n	800223a <tache_snake+0x1b6>
			cas='n';
 8002234:	236e      	movs	r3, #110	; 0x6e
 8002236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

		if (dir[0]==1){
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <tache_snake+0x2bc>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d11a      	bne.n	8002278 <tache_snake+0x1f4>
			switch(cas){
 8002242:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d008      	beq.n	800225c <tache_snake+0x1d8>
 800224a:	2b71      	cmp	r3, #113	; 0x71
 800224c:	d10d      	bne.n	800226a <tache_snake+0x1e6>
			case 'q':
				xSnake-=lSnake;
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <tache_snake+0x2b0>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	87fb      	strh	r3, [r7, #62]	; 0x3e
				break;
 800225a:	e00e      	b.n	800227a <tache_snake+0x1f6>
			case 'd':
				xSnake+=lSnake;
 800225c:	4b35      	ldr	r3, [pc, #212]	; (8002334 <tache_snake+0x2b0>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
 8002262:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002264:	4413      	add	r3, r2
 8002266:	87fb      	strh	r3, [r7, #62]	; 0x3e
				break;
 8002268:	e007      	b.n	800227a <tache_snake+0x1f6>
			default :
				ySnake-=v;
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <tache_snake+0x2b4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002276:	e000      	b.n	800227a <tache_snake+0x1f6>
			}
		}
 8002278:	bf00      	nop

		if (dir[0]==3){
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <tache_snake+0x2bc>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d11a      	bne.n	80022b8 <tache_snake+0x234>
				switch(cas){
 8002282:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d008      	beq.n	800229c <tache_snake+0x218>
 800228a:	2b71      	cmp	r3, #113	; 0x71
 800228c:	d10d      	bne.n	80022aa <tache_snake+0x226>
				case 'q':
					xSnake-=lSnake;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <tache_snake+0x2b0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	87fb      	strh	r3, [r7, #62]	; 0x3e
					break;
 800229a:	e00e      	b.n	80022ba <tache_snake+0x236>
				case 'd':
					xSnake+=lSnake;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <tache_snake+0x2b0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80022a4:	4413      	add	r3, r2
 80022a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
					break;
 80022a8:	e007      	b.n	80022ba <tache_snake+0x236>
				default :
					ySnake+=v;
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <tache_snake+0x2b4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022b2:	4413      	add	r3, r2
 80022b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80022b6:	e000      	b.n	80022ba <tache_snake+0x236>
				}
			}
 80022b8:	bf00      	nop

		if (dir[0]==2){
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <tache_snake+0x2bc>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d11a      	bne.n	80022f8 <tache_snake+0x274>
			switch(cas){
 80022c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022c6:	2b73      	cmp	r3, #115	; 0x73
 80022c8:	d008      	beq.n	80022dc <tache_snake+0x258>
 80022ca:	2b7a      	cmp	r3, #122	; 0x7a
 80022cc:	d10d      	bne.n	80022ea <tache_snake+0x266>
			case 'z':
				ySnake-=LSnake;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <tache_snake+0x2c4>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 80022da:	e00e      	b.n	80022fa <tache_snake+0x276>
			case 's':
				ySnake+=LSnake;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <tache_snake+0x2c4>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022e4:	4413      	add	r3, r2
 80022e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 80022e8:	e007      	b.n	80022fa <tache_snake+0x276>
			default :
				xSnake+=v;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <tache_snake+0x2b4>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80022f2:	4413      	add	r3, r2
 80022f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80022f6:	e000      	b.n	80022fa <tache_snake+0x276>
			}
		}
 80022f8:	bf00      	nop

		if (dir[0]==4){
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <tache_snake+0x2bc>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d12d      	bne.n	800235e <tache_snake+0x2da>
			switch(cas){
 8002302:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002306:	2b73      	cmp	r3, #115	; 0x73
 8002308:	d008      	beq.n	800231c <tache_snake+0x298>
 800230a:	2b7a      	cmp	r3, #122	; 0x7a
 800230c:	d120      	bne.n	8002350 <tache_snake+0x2cc>
			case 'z':
				ySnake-=LSnake;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <tache_snake+0x2c4>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 800231a:	e021      	b.n	8002360 <tache_snake+0x2dc>
			case 's':
				ySnake+=LSnake;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <tache_snake+0x2c4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002324:	4413      	add	r3, r2
 8002326:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 8002328:	e01a      	b.n	8002360 <tache_snake+0x2dc>
 800232a:	bf00      	nop
 800232c:	2000045c 	.word	0x2000045c
 8002330:	20000a1e 	.word	0x20000a1e
 8002334:	200000a8 	.word	0x200000a8
 8002338:	200000ac 	.word	0x200000ac
 800233c:	20000a10 	.word	0x20000a10
 8002340:	20000080 	.word	0x20000080
 8002344:	20000a24 	.word	0x20000a24
 8002348:	200000a9 	.word	0x200000a9
 800234c:	20000414 	.word	0x20000414
			default :
				xSnake-=v;
 8002350:	4b98      	ldr	r3, [pc, #608]	; (80025b4 <tache_snake+0x530>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800235c:	e000      	b.n	8002360 <tache_snake+0x2dc>
			}
		}
 800235e:	bf00      	nop

		// collision avec le mur
		if ((xSnake<=0 || xSnake>=l_ecran-lSnake || ySnake<=0 || ySnake>=L_ecran-LSnake ) && blocage==1){
 8002360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <tache_snake+0x30c>
 8002366:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002368:	4b93      	ldr	r3, [pc, #588]	; (80025b8 <tache_snake+0x534>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	4b93      	ldr	r3, [pc, #588]	; (80025bc <tache_snake+0x538>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	1acb      	subs	r3, r1, r3
 8002374:	429a      	cmp	r2, r3
 8002376:	da0b      	bge.n	8002390 <tache_snake+0x30c>
 8002378:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <tache_snake+0x30c>
 800237e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002380:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <tache_snake+0x53c>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <tache_snake+0x540>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	1acb      	subs	r3, r1, r3
 800238c:	429a      	cmp	r2, r3
 800238e:	db18      	blt.n	80023c2 <tache_snake+0x33e>
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	2b01      	cmp	r3, #1
 8002394:	d115      	bne.n	80023c2 <tache_snake+0x33e>
			HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800239c:	488a      	ldr	r0, [pc, #552]	; (80025c8 <tache_snake+0x544>)
 800239e:	f005 f9bf 	bl	8007720 <HAL_GPIO_WritePin>
			blocage=0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
			jeu=0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	77fb      	strb	r3, [r7, #31]
			xSnake=x0Snake;
 80023aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80023ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
			ySnake=y0Snake;
 80023ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
			xQueueSend(myQueue02Handle,&jeu,0);
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <tache_snake+0x548>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f107 011f 	add.w	r1, r7, #31
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	f00a fd57 	bl	800ce70 <xQueueGenericSend>
		}

		switch(cas){
 80023c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023c6:	3b64      	subs	r3, #100	; 0x64
 80023c8:	2b16      	cmp	r3, #22
 80023ca:	d868      	bhi.n	800249e <tache_snake+0x41a>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <tache_snake+0x350>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002479 	.word	0x08002479
 80023d8:	0800249f 	.word	0x0800249f
 80023dc:	0800249f 	.word	0x0800249f
 80023e0:	0800249f 	.word	0x0800249f
 80023e4:	0800249f 	.word	0x0800249f
 80023e8:	0800249f 	.word	0x0800249f
 80023ec:	0800249f 	.word	0x0800249f
 80023f0:	0800249f 	.word	0x0800249f
 80023f4:	0800249f 	.word	0x0800249f
 80023f8:	0800249f 	.word	0x0800249f
 80023fc:	0800249f 	.word	0x0800249f
 8002400:	0800249f 	.word	0x0800249f
 8002404:	0800249f 	.word	0x0800249f
 8002408:	08002431 	.word	0x08002431
 800240c:	0800249f 	.word	0x0800249f
 8002410:	08002461 	.word	0x08002461
 8002414:	0800249f 	.word	0x0800249f
 8002418:	0800249f 	.word	0x0800249f
 800241c:	0800249f 	.word	0x0800249f
 8002420:	0800249f 	.word	0x0800249f
 8002424:	0800249f 	.word	0x0800249f
 8002428:	0800249f 	.word	0x0800249f
 800242c:	08002449 	.word	0x08002449
		case 'q':
			if (dir[0] != 2){taskENTER_CRITICAL(); dir[0]=4; taskEXIT_CRITICAL();}
 8002430:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <tache_snake+0x54c>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d02b      	beq.n	8002490 <tache_snake+0x40c>
 8002438:	f00c fd80 	bl	800ef3c <vPortEnterCritical>
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <tache_snake+0x54c>)
 800243e:	2204      	movs	r2, #4
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	f00c fdaf 	bl	800efa4 <vPortExitCritical>
			break;
 8002446:	e023      	b.n	8002490 <tache_snake+0x40c>
		case 'z':
			if (dir[0] != 3){taskENTER_CRITICAL(); dir[0]=1; taskEXIT_CRITICAL();}
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <tache_snake+0x54c>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d021      	beq.n	8002494 <tache_snake+0x410>
 8002450:	f00c fd74 	bl	800ef3c <vPortEnterCritical>
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <tache_snake+0x54c>)
 8002456:	2201      	movs	r2, #1
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	f00c fda3 	bl	800efa4 <vPortExitCritical>
			break;
 800245e:	e019      	b.n	8002494 <tache_snake+0x410>
		case 's':
			if (dir[0] != 1){taskENTER_CRITICAL(); dir[0]=3; taskEXIT_CRITICAL();}
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <tache_snake+0x54c>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d017      	beq.n	8002498 <tache_snake+0x414>
 8002468:	f00c fd68 	bl	800ef3c <vPortEnterCritical>
 800246c:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <tache_snake+0x54c>)
 800246e:	2203      	movs	r2, #3
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	f00c fd97 	bl	800efa4 <vPortExitCritical>
			break;
 8002476:	e00f      	b.n	8002498 <tache_snake+0x414>
		case 'd':
			if (dir[0] != 4){taskENTER_CRITICAL(); dir[0]=2; taskEXIT_CRITICAL();}
 8002478:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <tache_snake+0x54c>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00d      	beq.n	800249c <tache_snake+0x418>
 8002480:	f00c fd5c 	bl	800ef3c <vPortEnterCritical>
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <tache_snake+0x54c>)
 8002486:	2202      	movs	r2, #2
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	f00c fd8b 	bl	800efa4 <vPortExitCritical>
			break;
 800248e:	e005      	b.n	800249c <tache_snake+0x418>
			break;
 8002490:	bf00      	nop
 8002492:	e004      	b.n	800249e <tache_snake+0x41a>
			break;
 8002494:	bf00      	nop
 8002496:	e002      	b.n	800249e <tache_snake+0x41a>
			break;
 8002498:	bf00      	nop
 800249a:	e000      	b.n	800249e <tache_snake+0x41a>
			break;
 800249c:	bf00      	nop
		}

		for (int i=3;i<=longueur;i++){
 800249e:	2303      	movs	r3, #3
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
 80024a2:	e03e      	b.n	8002522 <tache_snake+0x49e>
			//collision avec le corps
			if ((posYSnake[i]+LSnake>=ySnake) && (posYSnake[i]<=ySnake+LSnake) && (posXSnake[i]+lSnake>=xSnake) && (posXSnake[i]<=xSnake+lSnake)){
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <tache_snake+0x550>)
 80024a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <tache_snake+0x540>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	441a      	add	r2, r3
 80024b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	db30      	blt.n	800251c <tache_snake+0x498>
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <tache_snake+0x550>)
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c2:	4619      	mov	r1, r3
 80024c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <tache_snake+0x540>)
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4299      	cmp	r1, r3
 80024ce:	dc25      	bgt.n	800251c <tache_snake+0x498>
 80024d0:	4a41      	ldr	r2, [pc, #260]	; (80025d8 <tache_snake+0x554>)
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <tache_snake+0x538>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	441a      	add	r2, r3
 80024e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80024e2:	429a      	cmp	r2, r3
 80024e4:	db1a      	blt.n	800251c <tache_snake+0x498>
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <tache_snake+0x554>)
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ee:	4619      	mov	r1, r3
 80024f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <tache_snake+0x538>)
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4299      	cmp	r1, r3
 80024fa:	dc0f      	bgt.n	800251c <tache_snake+0x498>
				HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002502:	4831      	ldr	r0, [pc, #196]	; (80025c8 <tache_snake+0x544>)
 8002504:	f005 f90c 	bl	8007720 <HAL_GPIO_WritePin>
				jeu=0;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
				xQueueSend(myQueue02Handle,&jeu,0);
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <tache_snake+0x548>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	f107 011f 	add.w	r1, r7, #31
 8002514:	2300      	movs	r3, #0
 8002516:	2200      	movs	r2, #0
 8002518:	f00a fcaa 	bl	800ce70 <xQueueGenericSend>
		for (int i=3;i<=longueur;i++){
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	3301      	adds	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <tache_snake+0x558>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	4293      	cmp	r3, r2
 800252c:	ddba      	ble.n	80024a4 <tache_snake+0x420>
			}
		}


		//collision d objet
		if ((posObjet[1]+LObjet>=ySnake) && (posObjet[1]<=ySnake+LSnake) && (posObjet[0]+lObjet>=xSnake) && (posObjet[0]<=xSnake+lSnake)){
 800252e:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <tache_snake+0x55c>)
 8002530:	885b      	ldrh	r3, [r3, #2]
 8002532:	461a      	mov	r2, r3
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <tache_snake+0x560>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	441a      	add	r2, r3
 800253a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800253c:	429a      	cmp	r2, r3
 800253e:	db2b      	blt.n	8002598 <tache_snake+0x514>
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <tache_snake+0x55c>)
 8002542:	885b      	ldrh	r3, [r3, #2]
 8002544:	4619      	mov	r1, r3
 8002546:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002548:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <tache_snake+0x540>)
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	4299      	cmp	r1, r3
 8002550:	dc22      	bgt.n	8002598 <tache_snake+0x514>
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <tache_snake+0x55c>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <tache_snake+0x564>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	441a      	add	r2, r3
 800255e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002560:	429a      	cmp	r2, r3
 8002562:	db19      	blt.n	8002598 <tache_snake+0x514>
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <tache_snake+0x55c>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <tache_snake+0x538>)
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	4413      	add	r3, r2
 8002572:	4299      	cmp	r1, r3
 8002574:	dc10      	bgt.n	8002598 <tache_snake+0x514>
			HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <tache_snake+0x544>)
 800257e:	f005 f8cf 	bl	8007720 <HAL_GPIO_WritePin>
			jeu=1;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
			xQueueSend(myQueue02Handle,&jeu,0);
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <tache_snake+0x548>)
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	f107 011f 	add.w	r1, r7, #31
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	f00a fc6d 	bl	800ce70 <xQueueGenericSend>
 8002596:	e078      	b.n	800268a <tache_snake+0x606>


		else
		{

			if(x0Snake != xSnake || y0Snake != ySnake){
 8002598:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800259a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800259c:	429a      	cmp	r2, r3
 800259e:	d103      	bne.n	80025a8 <tache_snake+0x524>
 80025a0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80025a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d04c      	beq.n	8002642 <tache_snake+0x5be>
				taskENTER_CRITICAL();
 80025a8:	f00c fcc8 	bl	800ef3c <vPortEnterCritical>

						for (int i=longueur;i>=1;i--){
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <tache_snake+0x558>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
 80025b2:	e039      	b.n	8002628 <tache_snake+0x5a4>
 80025b4:	200000ac 	.word	0x200000ac
 80025b8:	200000ae 	.word	0x200000ae
 80025bc:	200000a8 	.word	0x200000a8
 80025c0:	200000b0 	.word	0x200000b0
 80025c4:	200000a9 	.word	0x200000a9
 80025c8:	40021c00 	.word	0x40021c00
 80025cc:	20000a0c 	.word	0x20000a0c
 80025d0:	20000080 	.word	0x20000080
 80025d4:	20000058 	.word	0x20000058
 80025d8:	20000030 	.word	0x20000030
 80025dc:	20000a1e 	.word	0x20000a1e
 80025e0:	20000a20 	.word	0x20000a20
 80025e4:	200000ab 	.word	0x200000ab
 80025e8:	200000aa 	.word	0x200000aa
							posXSnake[i]=posXSnake[i-1];
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	3b01      	subs	r3, #1
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <tache_snake+0x608>)
 80025f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <tache_snake+0x608>)
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							posYSnake[i]=posYSnake[i-1];
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	3b01      	subs	r3, #1
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <tache_snake+0x60c>)
 8002604:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <tache_snake+0x60c>)
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							dir[i]=dir[i-1];
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	3b01      	subs	r3, #1
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <tache_snake+0x610>)
 8002616:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800261a:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <tache_snake+0x610>)
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						for (int i=longueur;i>=1;i--){
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	3b01      	subs	r3, #1
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	2b00      	cmp	r3, #0
 800262c:	dcde      	bgt.n	80025ec <tache_snake+0x568>
						}

						posXSnake[1]=posXSnake[0];
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <tache_snake+0x608>)
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <tache_snake+0x608>)
 8002634:	805a      	strh	r2, [r3, #2]
						posYSnake[1]=posYSnake[0];
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <tache_snake+0x60c>)
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <tache_snake+0x60c>)
 800263c:	805a      	strh	r2, [r3, #2]

				taskEXIT_CRITICAL();
 800263e:	f00c fcb1 	bl	800efa4 <vPortExitCritical>
			}

			taskENTER_CRITICAL();
 8002642:	f00c fc7b 	bl	800ef3c <vPortEnterCritical>
				posSnake[0] = xSnake;
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <tache_snake+0x614>)
 8002648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800264a:	8013      	strh	r3, [r2, #0]
				posSnake[1] = ySnake;
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <tache_snake+0x614>)
 800264e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002650:	8053      	strh	r3, [r2, #2]
				posXSnake[0]=xSnake;
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <tache_snake+0x608>)
 8002654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002656:	8013      	strh	r3, [r2, #0]
				posYSnake[0]=ySnake;
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <tache_snake+0x60c>)
 800265a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800265c:	8013      	strh	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800265e:	f00c fca1 	bl	800efa4 <vPortExitCritical>

			if(x0Snake != xSnake || y0Snake != ySnake){
 8002662:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002666:	429a      	cmp	r2, r3
 8002668:	d103      	bne.n	8002672 <tache_snake+0x5ee>
 800266a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800266c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800266e:	429a      	cmp	r2, r3
 8002670:	d003      	beq.n	800267a <tache_snake+0x5f6>
				x0Snake = xSnake;
 8002672:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002674:	877b      	strh	r3, [r7, #58]	; 0x3a
				y0Snake = ySnake;
 8002676:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002678:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			blocage=1;
 800267a:	2301      	movs	r3, #1
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
			vTaskDelayUntil(&xLastWakeTimeS, periodS);
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002684:	4618      	mov	r0, r3
 8002686:	f00b fc1b 	bl	800dec0 <vTaskDelayUntil>
		joystick_v=-10;
 800268a:	e522      	b.n	80020d2 <tache_snake+0x4e>
 800268c:	20000030 	.word	0x20000030
 8002690:	20000058 	.word	0x20000058
 8002694:	20000080 	.word	0x20000080
 8002698:	20000a24 	.word	0x20000a24

0800269c <tache_affichage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_affichage */
void tache_affichage(void const * argument)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b093      	sub	sp, #76	; 0x4c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tache_affichage */
	TickType_t xLastWakeTimeA;
	const TickType_t periodA = 1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
	char texte[50];
	uint16_t x,y;

	posObjet[0]=pos0Objet[1];
 80026a8:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <tache_affichage+0x244>)
 80026aa:	885a      	ldrh	r2, [r3, #2]
 80026ac:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <tache_affichage+0x248>)
 80026ae:	801a      	strh	r2, [r3, #0]
	posObjet[1]=pos0Objet[1];
 80026b0:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <tache_affichage+0x244>)
 80026b2:	885a      	ldrh	r2, [r3, #2]
 80026b4:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <tache_affichage+0x248>)
 80026b6:	805a      	strh	r2, [r3, #2]

	posSnake[0]=pos0Snake[1];
 80026b8:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <tache_affichage+0x24c>)
 80026ba:	885a      	ldrh	r2, [r3, #2]
 80026bc:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <tache_affichage+0x250>)
 80026be:	801a      	strh	r2, [r3, #0]
	posSnake[1]=pos0Snake[1];
 80026c0:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <tache_affichage+0x24c>)
 80026c2:	885a      	ldrh	r2, [r3, #2]
 80026c4:	4b89      	ldr	r3, [pc, #548]	; (80028ec <tache_affichage+0x250>)
 80026c6:	805a      	strh	r2, [r3, #2]

	xLastWakeTimeA = xTaskGetTickCount();
 80026c8:	f00b fdce 	bl	800e268 <xTaskGetTickCount>
 80026cc:	4603      	mov	r3, r0
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	osMutexWait(myMutex01Handle, portMAX_DELAY);
 80026d0:	4b87      	ldr	r3, [pc, #540]	; (80028f0 <tache_affichage+0x254>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	4618      	mov	r0, r3
 80026da:	f00a f8cf 	bl	800c87c <osMutexWait>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80026de:	4885      	ldr	r0, [pc, #532]	; (80028f4 <tache_affichage+0x258>)
 80026e0:	f000 fd80 	bl	80031e4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(pos0Snake[0], pos0Snake[1], lSnake, LSnake);
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <tache_affichage+0x24c>)
 80026e6:	8818      	ldrh	r0, [r3, #0]
 80026e8:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <tache_affichage+0x24c>)
 80026ea:	8859      	ldrh	r1, [r3, #2]
 80026ec:	4b82      	ldr	r3, [pc, #520]	; (80028f8 <tache_affichage+0x25c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	4b82      	ldr	r3, [pc, #520]	; (80028fc <tache_affichage+0x260>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f001 f964 	bl	80039c4 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(pos0Objet[0], pos0Objet[1], lObjet, LObjet);
 80026fc:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <tache_affichage+0x244>)
 80026fe:	8818      	ldrh	r0, [r3, #0]
 8002700:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <tache_affichage+0x244>)
 8002702:	8859      	ldrh	r1, [r3, #2]
 8002704:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <tache_affichage+0x264>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <tache_affichage+0x268>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f001 f958 	bl	80039c4 <BSP_LCD_FillRect>
	osMutexRelease(myMutex01Handle);
 8002714:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <tache_affichage+0x254>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f00a f8fd 	bl	800c918 <osMutexRelease>

	/* Infinite loop */
	for(;;)
	{

		osMutexWait(myMutex01Handle, portMAX_DELAY);
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <tache_affichage+0x254>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 31ff 	mov.w	r1, #4294967295
 8002726:	4618      	mov	r0, r3
 8002728:	f00a f8a8 	bl	800c87c <osMutexWait>
//		sprintf(texte, "Direction : %u Long %u  ",dir[0],longueur);
//		BSP_LCD_DisplayStringAt(450,30, (uint8_t*)texte,RIGHT_MODE);



		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800272c:	4871      	ldr	r0, [pc, #452]	; (80028f4 <tache_affichage+0x258>)
 800272e:	f000 fd59 	bl	80031e4 <BSP_LCD_SetTextColor>
		switch (dir[0]){
 8002732:	4b75      	ldr	r3, [pc, #468]	; (8002908 <tache_affichage+0x26c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	3b01      	subs	r3, #1
 8002738:	2b03      	cmp	r3, #3
 800273a:	d83f      	bhi.n	80027bc <tache_affichage+0x120>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <tache_affichage+0xa8>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002789 	.word	0x08002789
 800274c:	0800276f 	.word	0x0800276f
 8002750:	080027a3 	.word	0x080027a3
		case 1 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 8002754:	4b65      	ldr	r3, [pc, #404]	; (80028ec <tache_affichage+0x250>)
 8002756:	8818      	ldrh	r0, [r3, #0]
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <tache_affichage+0x250>)
 800275a:	8859      	ldrh	r1, [r3, #2]
 800275c:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <tache_affichage+0x25c>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b66      	ldr	r3, [pc, #408]	; (80028fc <tache_affichage+0x260>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f001 f92c 	bl	80039c4 <BSP_LCD_FillRect>
			break;
 800276c:	e026      	b.n	80027bc <tache_affichage+0x120>
		case 3 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 800276e:	4b5f      	ldr	r3, [pc, #380]	; (80028ec <tache_affichage+0x250>)
 8002770:	8818      	ldrh	r0, [r3, #0]
 8002772:	4b5e      	ldr	r3, [pc, #376]	; (80028ec <tache_affichage+0x250>)
 8002774:	8859      	ldrh	r1, [r3, #2]
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <tache_affichage+0x25c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <tache_affichage+0x260>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f001 f91f 	bl	80039c4 <BSP_LCD_FillRect>
			break;
 8002786:	e019      	b.n	80027bc <tache_affichage+0x120>
		case 2 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <tache_affichage+0x250>)
 800278a:	8818      	ldrh	r0, [r3, #0]
 800278c:	4b57      	ldr	r3, [pc, #348]	; (80028ec <tache_affichage+0x250>)
 800278e:	8859      	ldrh	r1, [r3, #2]
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <tache_affichage+0x260>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b58      	ldr	r3, [pc, #352]	; (80028f8 <tache_affichage+0x25c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f001 f912 	bl	80039c4 <BSP_LCD_FillRect>
			break;
 80027a0:	e00c      	b.n	80027bc <tache_affichage+0x120>
		case 4 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <tache_affichage+0x250>)
 80027a4:	8818      	ldrh	r0, [r3, #0]
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <tache_affichage+0x250>)
 80027a8:	8859      	ldrh	r1, [r3, #2]
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <tache_affichage+0x260>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <tache_affichage+0x25c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f001 f905 	bl	80039c4 <BSP_LCD_FillRect>
			break;
 80027ba:	bf00      	nop

		}

		if (longueur>0){
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <tache_affichage+0x270>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 813b 	beq.w	8002a3c <tache_affichage+0x3a0>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80027c6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ca:	f000 fd0b 	bl	80031e4 <BSP_LCD_SetTextColor>

			switch (dir[longueur]){
 80027ce:	4b4f      	ldr	r3, [pc, #316]	; (800290c <tache_affichage+0x270>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <tache_affichage+0x26c>)
 80027d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027da:	3b01      	subs	r3, #1
 80027dc:	2b03      	cmp	r3, #3
 80027de:	f200 80c1 	bhi.w	8002964 <tache_affichage+0x2c8>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <tache_affichage+0x14c>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	08002897 	.word	0x08002897
 80027f0:	0800284d 	.word	0x0800284d
 80027f4:	0800291d 	.word	0x0800291d

			case 1  :
				x=posXSnake[longueur];
 80027f8:	4b44      	ldr	r3, [pc, #272]	; (800290c <tache_affichage+0x270>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <tache_affichage+0x274>)
 8002800:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002804:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur]+LSnake;
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <tache_affichage+0x270>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <tache_affichage+0x278>)
 8002810:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <tache_affichage+0x260>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, y, LSnake, L_ecran-y+lSnake);
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <tache_affichage+0x260>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b29c      	uxth	r4, r3
 8002826:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <tache_affichage+0x27c>)
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <tache_affichage+0x25c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002840:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 8002844:	4622      	mov	r2, r4
 8002846:	f001 f8bd 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 800284a:	e08b      	b.n	8002964 <tache_affichage+0x2c8>
			case 3 :
				x=posXSnake[longueur];
 800284c:	4b2f      	ldr	r3, [pc, #188]	; (800290c <tache_affichage+0x270>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <tache_affichage+0x274>)
 8002854:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur]-LSnake;
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <tache_affichage+0x270>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <tache_affichage+0x278>)
 8002864:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <tache_affichage+0x260>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, 0, LSnake, y+lSnake);
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <tache_affichage+0x260>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b299      	uxth	r1, r3
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <tache_affichage+0x25c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 800288c:	460a      	mov	r2, r1
 800288e:	2100      	movs	r1, #0
 8002890:	f001 f898 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 8002894:	e066      	b.n	8002964 <tache_affichage+0x2c8>
			case 2 :
				x=posXSnake[longueur]-lSnake;
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <tache_affichage+0x270>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <tache_affichage+0x274>)
 800289e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <tache_affichage+0x25c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur];
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <tache_affichage+0x270>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <tache_affichage+0x278>)
 80028b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(0, y, x+lSnake, lSnake);
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <tache_affichage+0x25c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028c8:	4413      	add	r3, r2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <tache_affichage+0x25c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80028d6:	2000      	movs	r0, #0
 80028d8:	f001 f874 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 80028dc:	e042      	b.n	8002964 <tache_affichage+0x2c8>
 80028de:	bf00      	nop
 80028e0:	20000028 	.word	0x20000028
 80028e4:	20000a20 	.word	0x20000a20
 80028e8:	2000002c 	.word	0x2000002c
 80028ec:	20000a24 	.word	0x20000a24
 80028f0:	20000a10 	.word	0x20000a10
 80028f4:	ffff0000 	.word	0xffff0000
 80028f8:	200000a8 	.word	0x200000a8
 80028fc:	200000a9 	.word	0x200000a9
 8002900:	200000aa 	.word	0x200000aa
 8002904:	200000ab 	.word	0x200000ab
 8002908:	20000080 	.word	0x20000080
 800290c:	20000a1e 	.word	0x20000a1e
 8002910:	20000030 	.word	0x20000030
 8002914:	20000058 	.word	0x20000058
 8002918:	200000b0 	.word	0x200000b0
			case 4 :
				x=posXSnake[longueur]+lSnake;
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <tache_affichage+0x440>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <tache_affichage+0x444>)
 8002924:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002928:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <tache_affichage+0x448>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4413      	add	r3, r2
 8002930:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur];
 8002934:	4b69      	ldr	r3, [pc, #420]	; (8002adc <tache_affichage+0x440>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b6b      	ldr	r3, [pc, #428]	; (8002ae8 <tache_affichage+0x44c>)
 800293c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002940:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, y, l_ecran-x, lSnake);
 8002944:	4b69      	ldr	r3, [pc, #420]	; (8002aec <tache_affichage+0x450>)
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <tache_affichage+0x448>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800295a:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 800295e:	f001 f831 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 8002962:	bf00      	nop

			}

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 fc3c 	bl	80031e4 <BSP_LCD_SetTextColor>
			switch (dir[longueur]){
 800296c:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <tache_affichage+0x440>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <tache_affichage+0x454>)
 8002974:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002978:	3b01      	subs	r3, #1
 800297a:	2b03      	cmp	r3, #3
 800297c:	d85f      	bhi.n	8002a3e <tache_affichage+0x3a2>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <tache_affichage+0x2e8>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	08002995 	.word	0x08002995
 8002988:	080029e9 	.word	0x080029e9
 800298c:	080029bf 	.word	0x080029bf
 8002990:	08002a13 	.word	0x08002a13
			case 1 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], lSnake, LSnake);
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <tache_affichage+0x440>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <tache_affichage+0x444>)
 800299c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <tache_affichage+0x440>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <tache_affichage+0x44c>)
 80029a8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80029ac:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <tache_affichage+0x448>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <tache_affichage+0x458>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f001 f804 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 80029bc:	e03f      	b.n	8002a3e <tache_affichage+0x3a2>
			case 3 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], lSnake, LSnake);
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <tache_affichage+0x440>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <tache_affichage+0x444>)
 80029c6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80029ca:	4b44      	ldr	r3, [pc, #272]	; (8002adc <tache_affichage+0x440>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <tache_affichage+0x44c>)
 80029d2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <tache_affichage+0x448>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b45      	ldr	r3, [pc, #276]	; (8002af4 <tache_affichage+0x458>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f000 ffef 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 80029e6:	e02a      	b.n	8002a3e <tache_affichage+0x3a2>
			case 2 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], LSnake, lSnake);
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <tache_affichage+0x440>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <tache_affichage+0x444>)
 80029f0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <tache_affichage+0x440>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <tache_affichage+0x44c>)
 80029fc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <tache_affichage+0x458>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <tache_affichage+0x448>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f000 ffda 	bl	80039c4 <BSP_LCD_FillRect>
				break;
 8002a10:	e015      	b.n	8002a3e <tache_affichage+0x3a2>
			case 4 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], LSnake, lSnake);
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <tache_affichage+0x440>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <tache_affichage+0x444>)
 8002a1a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <tache_affichage+0x440>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <tache_affichage+0x44c>)
 8002a26:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <tache_affichage+0x458>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <tache_affichage+0x448>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f000 ffc5 	bl	80039c4 <BSP_LCD_FillRect>
				break;}
 8002a3a:	e000      	b.n	8002a3e <tache_affichage+0x3a2>


			//BSP_LCD_Clear(LCD_COLOR_WHITE);
		}
 8002a3c:	bf00      	nop

		taskENTER_CRITICAL();
 8002a3e:	f00c fa7d 	bl	800ef3c <vPortEnterCritical>
		pos0Snake[0] = posSnake[0];
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <tache_affichage+0x45c>)
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <tache_affichage+0x460>)
 8002a48:	801a      	strh	r2, [r3, #0]
		pos0Snake[1] = posSnake[1];
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <tache_affichage+0x45c>)
 8002a4c:	885a      	ldrh	r2, [r3, #2]
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <tache_affichage+0x460>)
 8002a50:	805a      	strh	r2, [r3, #2]
		taskEXIT_CRITICAL();
 8002a52:	f00c faa7 	bl	800efa4 <vPortExitCritical>

		if(pos0Objet[0] != posObjet[0] || pos0Objet[1] != posObjet[1]){
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <tache_affichage+0x464>)
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <tache_affichage+0x468>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d105      	bne.n	8002a6e <tache_affichage+0x3d2>
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <tache_affichage+0x464>)
 8002a64:	885a      	ldrh	r2, [r3, #2]
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <tache_affichage+0x468>)
 8002a68:	885b      	ldrh	r3, [r3, #2]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d02a      	beq.n	8002ac4 <tache_affichage+0x428>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a72:	f000 fbb7 	bl	80031e4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(pos0Objet[0], pos0Objet[1], lObjet, LObjet);
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <tache_affichage+0x464>)
 8002a78:	8818      	ldrh	r0, [r3, #0]
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <tache_affichage+0x464>)
 8002a7c:	8859      	ldrh	r1, [r3, #2]
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <tache_affichage+0x46c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <tache_affichage+0x470>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f000 ff9b 	bl	80039c4 <BSP_LCD_FillRect>

			taskENTER_CRITICAL();
 8002a8e:	f00c fa55 	bl	800ef3c <vPortEnterCritical>
			pos0Objet[1]=posObjet[1];
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <tache_affichage+0x468>)
 8002a94:	885a      	ldrh	r2, [r3, #2]
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <tache_affichage+0x464>)
 8002a98:	805a      	strh	r2, [r3, #2]
			pos0Objet[0]=posObjet[0];
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <tache_affichage+0x468>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <tache_affichage+0x464>)
 8002aa0:	801a      	strh	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8002aa2:	f00c fa7f 	bl	800efa4 <vPortExitCritical>

			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <tache_affichage+0x474>)
 8002aa8:	f000 fb9c 	bl	80031e4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(posObjet[0], posObjet[1], lObjet, LObjet);
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <tache_affichage+0x468>)
 8002aae:	8818      	ldrh	r0, [r3, #0]
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <tache_affichage+0x468>)
 8002ab2:	8859      	ldrh	r1, [r3, #2]
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <tache_affichage+0x46c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <tache_affichage+0x470>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f000 ff80 	bl	80039c4 <BSP_LCD_FillRect>

		}

		osMutexRelease(myMutex01Handle);
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <tache_affichage+0x478>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f009 ff25 	bl	800c918 <osMutexRelease>
		vTaskDelayUntil(&xLastWakeTimeA, periodA);
 8002ace:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00b f9f3 	bl	800dec0 <vTaskDelayUntil>
		osMutexWait(myMutex01Handle, portMAX_DELAY);
 8002ada:	e620      	b.n	800271e <tache_affichage+0x82>
 8002adc:	20000a1e 	.word	0x20000a1e
 8002ae0:	20000030 	.word	0x20000030
 8002ae4:	200000a8 	.word	0x200000a8
 8002ae8:	20000058 	.word	0x20000058
 8002aec:	200000ae 	.word	0x200000ae
 8002af0:	20000080 	.word	0x20000080
 8002af4:	200000a9 	.word	0x200000a9
 8002af8:	20000a24 	.word	0x20000a24
 8002afc:	2000002c 	.word	0x2000002c
 8002b00:	20000028 	.word	0x20000028
 8002b04:	20000a20 	.word	0x20000a20
 8002b08:	200000aa 	.word	0x200000aa
 8002b0c:	200000ab 	.word	0x200000ab
 8002b10:	ffff0000 	.word	0xffff0000
 8002b14:	20000a10 	.word	0x20000a10

08002b18 <tache_game>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_game */
void tache_game(void const * argument)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b09c      	sub	sp, #112	; 0x70
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tache_game */
	TickType_t xLastWakeTimeJ;
	const TickType_t periodJ = 30;
 8002b20:	231e      	movs	r3, #30
 8002b22:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t jeu,compteur=0;	char texte[50];
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	uint16_t xPos[10]={20,100,50,200,50,100,90,60,90,60};
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <tache_game+0x118>)
 8002b2c:	f107 041c 	add.w	r4, r7, #28
 8002b30:	461d      	mov	r5, r3
 8002b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b36:	682b      	ldr	r3, [r5, #0]
 8002b38:	6023      	str	r3, [r4, #0]
	uint16_t yPos[10]={50,50,90,130,130,260,70,70,50,90};
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <tache_game+0x11c>)
 8002b3c:	f107 0408 	add.w	r4, r7, #8
 8002b40:	461d      	mov	r5, r3
 8002b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	6023      	str	r3, [r4, #0]

	xLastWakeTimeJ = xTaskGetTickCount();
 8002b4a:	f00b fb8d 	bl	800e268 <xTaskGetTickCount>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	667b      	str	r3, [r7, #100]	; 0x64
	/* Infinite loop */
	for(;;)
	{
		xQueueReceive(myQueue02Handle, &jeu, portMAX_DELAY);
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <tache_game+0x120>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f107 0163 	add.w	r1, r7, #99	; 0x63
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00a fbc2 	bl	800d2e8 <xQueueReceive>

		if (jeu==0){  // Collision avec le mur GAME OVER
 8002b64:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <tache_game+0x70>

						BSP_LCD_Clear(00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 fb9b 	bl	80032a8 <BSP_LCD_Clear>
						BSP_LCD_DrawBitmap(0,0,(uint8_t*)gameover_bmp);
 8002b72:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <tache_game+0x124>)
 8002b74:	2100      	movs	r1, #0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f000 fe72 	bl	8003860 <BSP_LCD_DrawBitmap>
						vTaskDelete(tache_affichage);
 8002b7c:	4830      	ldr	r0, [pc, #192]	; (8002c40 <tache_game+0x128>)
 8002b7e:	f00b f90d 	bl	800dd9c <vTaskDelete>
						vTaskDelete(tache_snake);
 8002b82:	4830      	ldr	r0, [pc, #192]	; (8002c44 <tache_game+0x12c>)
 8002b84:	f00b f90a 	bl	800dd9c <vTaskDelete>

		}

		if (jeu==1){  // Collision avec un objet
 8002b88:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d147      	bne.n	8002c20 <tache_game+0x108>

			if (compteur==9){compteur=0;}
 8002b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d103      	bne.n	8002ba0 <tache_game+0x88>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002b9e:	e004      	b.n	8002baa <tache_game+0x92>
			else {compteur=compteur+1;}
 8002ba0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			taskENTER_CRITICAL();
 8002baa:	f00c f9c7 	bl	800ef3c <vPortEnterCritical>
			longueur=longueur+2;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <tache_game+0x130>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <tache_game+0x130>)
 8002bb8:	701a      	strb	r2, [r3, #0]
			posObjet[0]=xPos[compteur];
 8002bba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	3370      	adds	r3, #112	; 0x70
 8002bc2:	443b      	add	r3, r7
 8002bc4:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <tache_game+0x134>)
 8002bca:	801a      	strh	r2, [r3, #0]
			posObjet[1]=yPos[compteur];
 8002bcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	3370      	adds	r3, #112	; 0x70
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <tache_game+0x134>)
 8002bdc:	805a      	strh	r2, [r3, #2]
			taskEXIT_CRITICAL();
 8002bde:	f00c f9e1 	bl	800efa4 <vPortExitCritical>

			osMutexWait(myMutex01Handle, portMAX_DELAY);
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <tache_game+0x138>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bea:	4618      	mov	r0, r3
 8002bec:	f009 fe46 	bl	800c87c <osMutexWait>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002bf0:	4818      	ldr	r0, [pc, #96]	; (8002c54 <tache_game+0x13c>)
 8002bf2:	f000 faf7 	bl	80031e4 <BSP_LCD_SetTextColor>
			sprintf(texte, "Score : %u  ",compteur);
 8002bf6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bfe:	4916      	ldr	r1, [pc, #88]	; (8002c58 <tache_game+0x140>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00c fdfb 	bl	800f7fc <siprintf>
			BSP_LCD_DisplayStringAt(450,5, (uint8_t*)texte,RIGHT_MODE);
 8002c06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002c12:	f000 fbb5 	bl	8003380 <BSP_LCD_DisplayStringAt>
			osMutexRelease(myMutex01Handle);
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <tache_game+0x138>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f009 fe7c 	bl	800c918 <osMutexRelease>
		}

		vTaskDelayUntil(&xLastWakeTimeJ, periodJ);
 8002c20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c26:	4618      	mov	r0, r3
 8002c28:	f00b f94a 	bl	800dec0 <vTaskDelayUntil>
		xQueueReceive(myQueue02Handle, &jeu, portMAX_DELAY);
 8002c2c:	e791      	b.n	8002b52 <tache_game+0x3a>
 8002c2e:	bf00      	nop
 8002c30:	0801007c 	.word	0x0801007c
 8002c34:	08010090 	.word	0x08010090
 8002c38:	20000a0c 	.word	0x20000a0c
 8002c3c:	080100ac 	.word	0x080100ac
 8002c40:	0800269d 	.word	0x0800269d
 8002c44:	08002085 	.word	0x08002085
 8002c48:	20000a1e 	.word	0x20000a1e
 8002c4c:	20000a20 	.word	0x20000a20
 8002c50:	20000a10 	.word	0x20000a10
 8002c54:	ffff0000 	.word	0xffff0000
 8002c58:	0801006c 	.word	0x0801006c

08002c5c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002c6e:	f002 fd63 	bl	8005738 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40001000 	.word	0x40001000

08002c80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c88:	e7fe      	b.n	8002c88 <Error_Handler+0x8>
	...

08002c8c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <I2Cx_MspInit+0x150>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d14d      	bne.n	8002d38 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cb8:	2312      	movs	r3, #18
 8002cba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4845      	ldr	r0, [pc, #276]	; (8002de4 <I2Cx_MspInit+0x158>)
 8002cd0:	f004 fa56 	bl	8007180 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4840      	ldr	r0, [pc, #256]	; (8002de4 <I2Cx_MspInit+0x158>)
 8002ce2:	f004 fa4d 	bl	8007180 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d08:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d14:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	210f      	movs	r1, #15
 8002d1a:	2048      	movs	r0, #72	; 0x48
 8002d1c:	f003 fb3a 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002d20:	2048      	movs	r0, #72	; 0x48
 8002d22:	f003 fb53 	bl	80063cc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	210f      	movs	r1, #15
 8002d2a:	2049      	movs	r0, #73	; 0x49
 8002d2c:	f003 fb32 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002d30:	2049      	movs	r0, #73	; 0x49
 8002d32:	f003 fb4b 	bl	80063cc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002d36:	e04d      	b.n	8002dd4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d54:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002d56:	2312      	movs	r3, #18
 8002d58:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002d62:	2304      	movs	r3, #4
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	481e      	ldr	r0, [pc, #120]	; (8002de8 <I2Cx_MspInit+0x15c>)
 8002d6e:	f004 fa07 	bl	8007180 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	481a      	ldr	r0, [pc, #104]	; (8002de8 <I2Cx_MspInit+0x15c>)
 8002d80:	f004 f9fe 	bl	8007180 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002da6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <I2Cx_MspInit+0x154>)
 8002dae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	210f      	movs	r1, #15
 8002db8:	201f      	movs	r0, #31
 8002dba:	f003 faeb 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002dbe:	201f      	movs	r0, #31
 8002dc0:	f003 fb04 	bl	80063cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	2020      	movs	r0, #32
 8002dca:	f003 fae3 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002dce:	2020      	movs	r0, #32
 8002dd0:	f003 fafc 	bl	80063cc <HAL_NVIC_EnableIRQ>
}
 8002dd4:	bf00      	nop
 8002dd6:	3730      	adds	r7, #48	; 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000a54 	.word	0x20000a54
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40021c00 	.word	0x40021c00
 8002de8:	40020400 	.word	0x40020400

08002dec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f004 ff9b 	bl	8007d30 <HAL_I2C_GetState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d125      	bne.n	8002e4c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <I2Cx_Init+0x68>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <I2Cx_Init+0x6c>)
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <I2Cx_Init+0x70>)
 8002e14:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <I2Cx_Init+0x74>)
 8002e1a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff23 	bl	8002c8c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f004 fc84 	bl	8007754 <HAL_I2C_Init>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000a54 	.word	0x20000a54
 8002e58:	40005c00 	.word	0x40005c00
 8002e5c:	40005400 	.word	0x40005400
 8002e60:	40912732 	.word	0x40912732

08002e64 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	72fb      	strb	r3, [r7, #11]
 8002e76:	460b      	mov	r3, r1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	b299      	uxth	r1, r3
 8002e86:	88f8      	ldrh	r0, [r7, #6]
 8002e88:	893a      	ldrh	r2, [r7, #8]
 8002e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4603      	mov	r3, r0
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f004 fe2e 	bl	8007afc <HAL_I2C_Mem_Read>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	4619      	mov	r1, r3
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f832 	bl	8002f18 <I2Cx_Error>
  }
  return status;    
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	; 0x28
 8002ec2:	af04      	add	r7, sp, #16
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	4608      	mov	r0, r1
 8002ec8:	4611      	mov	r1, r2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4603      	mov	r3, r0
 8002ece:	72fb      	strb	r3, [r7, #11]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	813b      	strh	r3, [r7, #8]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	88f8      	ldrh	r0, [r7, #6]
 8002ee2:	893a      	ldrh	r2, [r7, #8]
 8002ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee8:	9302      	str	r3, [sp, #8]
 8002eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f004 fced 	bl	80078d4 <HAL_I2C_Mem_Write>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	4619      	mov	r1, r3
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f805 	bl	8002f18 <I2Cx_Error>
  }
  return status;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f004 fca5 	bl	8007874 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff5e 	bl	8002dec <I2Cx_Init>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TS_IO_Init+0x10>)
 8002f3e:	f7ff ff55 	bl	8002dec <I2Cx_Init>
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000a54 	.word	0x20000a54

08002f4c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	460b      	mov	r3, r1
 8002f58:	71bb      	strb	r3, [r7, #6]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	79f9      	ldrb	r1, [r7, #7]
 8002f64:	2301      	movs	r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	1d7b      	adds	r3, r7, #5
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	4803      	ldr	r0, [pc, #12]	; (8002f7c <TS_IO_Write+0x30>)
 8002f70:	f7ff ffa5 	bl	8002ebe <I2Cx_WriteMultiple>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000a54 	.word	0x20000a54

08002f80 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	4603      	mov	r3, r0
 8002f88:	460a      	mov	r2, r1
 8002f8a:	71fb      	strb	r3, [r7, #7]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	79f9      	ldrb	r1, [r7, #7]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	f107 030f 	add.w	r3, r7, #15
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <TS_IO_Read+0x38>)
 8002fa8:	f7ff ff5c 	bl	8002e64 <I2Cx_ReadMultiple>

  return read_value;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000a54 	.word	0x20000a54

08002fbc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f002 fbd7 	bl	8005778 <HAL_Delay>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002fda:	2228      	movs	r2, #40	; 0x28
 8002fdc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002fe0:	2209      	movs	r2, #9
 8002fe2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002fe6:	2235      	movs	r2, #53	; 0x35
 8002fe8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002fea:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002fec:	220b      	movs	r2, #11
 8002fee:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002ff2:	f240 121b 	movw	r2, #283	; 0x11b
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8002ffa:	f240 2215 	movw	r2, #533	; 0x215
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003002:	f240 121d 	movw	r2, #285	; 0x11d
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800300a:	f240 2235 	movw	r2, #565	; 0x235
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003010:	2100      	movs	r1, #0
 8003012:	4823      	ldr	r0, [pc, #140]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003014:	f000 fee8 	bl	8003de8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800301a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800301e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003022:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003026:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <BSP_LCD_Init+0xd0>)
 800305c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800305e:	4810      	ldr	r0, [pc, #64]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003060:	f005 fb82 	bl	8008768 <HAL_LTDC_GetState>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800306a:	2100      	movs	r1, #0
 800306c:	480c      	ldr	r0, [pc, #48]	; (80030a0 <BSP_LCD_Init+0xcc>)
 800306e:	f000 fde1 	bl	8003c34 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <BSP_LCD_Init+0xcc>)
 8003074:	f005 f9a8 	bl	80083c8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800307e:	480a      	ldr	r0, [pc, #40]	; (80030a8 <BSP_LCD_Init+0xd4>)
 8003080:	f004 fb4e 	bl	8007720 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003084:	2201      	movs	r2, #1
 8003086:	2108      	movs	r1, #8
 8003088:	4808      	ldr	r0, [pc, #32]	; (80030ac <BSP_LCD_Init+0xd8>)
 800308a:	f004 fb49 	bl	8007720 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800308e:	f001 f80f 	bl	80040b0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003092:	4807      	ldr	r0, [pc, #28]	; (80030b0 <BSP_LCD_Init+0xdc>)
 8003094:	f000 f8d8 	bl	8003248 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000aa0 	.word	0x20000aa0
 80030a4:	40016800 	.word	0x40016800
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022800 	.word	0x40022800
 80030b0:	200000b4 	.word	0x200000b4

080030b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <BSP_LCD_GetXSize+0x20>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <BSP_LCD_GetXSize+0x24>)
 80030be:	2134      	movs	r1, #52	; 0x34
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3360      	adds	r3, #96	; 0x60
 80030c8:	681b      	ldr	r3, [r3, #0]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20000b88 	.word	0x20000b88
 80030d8:	20000aa0 	.word	0x20000aa0

080030dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <BSP_LCD_GetYSize+0x20>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <BSP_LCD_GetYSize+0x24>)
 80030e6:	2134      	movs	r1, #52	; 0x34
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3364      	adds	r3, #100	; 0x64
 80030f0:	681b      	ldr	r3, [r3, #0]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000b88 	.word	0x20000b88
 8003100:	20000aa0 	.word	0x20000aa0

08003104 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003104:	b580      	push	{r7, lr}
 8003106:	b090      	sub	sp, #64	; 0x40
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003114:	f7ff ffce 	bl	80030b4 <BSP_LCD_GetXSize>
 8003118:	4603      	mov	r3, r0
 800311a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003120:	f7ff ffdc 	bl	80030dc <BSP_LCD_GetYSize>
 8003124:	4603      	mov	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003130:	23ff      	movs	r3, #255	; 0xff
 8003132:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800314a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003150:	2307      	movs	r3, #7
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003154:	f7ff ffae 	bl	80030b4 <BSP_LCD_GetXSize>
 8003158:	4603      	mov	r3, r0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800315c:	f7ff ffbe 	bl	80030dc <BSP_LCD_GetYSize>
 8003160:	4603      	mov	r3, r0
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	4619      	mov	r1, r3
 800316c:	4812      	ldr	r0, [pc, #72]	; (80031b8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800316e:	f005 fabd 	bl	80086ec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	4911      	ldr	r1, [pc, #68]	; (80031bc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3304      	adds	r3, #4
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	490c      	ldr	r1, [pc, #48]	; (80031bc <BSP_LCD_LayerDefaultInit+0xb8>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3308      	adds	r3, #8
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800319a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	4907      	ldr	r1, [pc, #28]	; (80031bc <BSP_LCD_LayerDefaultInit+0xb8>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3740      	adds	r7, #64	; 0x40
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000aa0 	.word	0x20000aa0
 80031bc:	20000b8c 	.word	0x20000b8c
 80031c0:	200000b4 	.word	0x200000b4

080031c4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <BSP_LCD_SelectLayer+0x1c>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6013      	str	r3, [r2, #0]
} 
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000b88 	.word	0x20000b88

080031e4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <BSP_LCD_SetTextColor+0x28>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4907      	ldr	r1, [pc, #28]	; (8003210 <BSP_LCD_SetTextColor+0x2c>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000b88 	.word	0x20000b88
 8003210:	20000b8c 	.word	0x20000b8c

08003214 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <BSP_LCD_SetBackColor+0x2c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4908      	ldr	r1, [pc, #32]	; (8003244 <BSP_LCD_SetBackColor+0x30>)
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3304      	adds	r3, #4
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000b88 	.word	0x20000b88
 8003244:	20000b8c 	.word	0x20000b8c

08003248 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <BSP_LCD_SetFont+0x2c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4908      	ldr	r1, [pc, #32]	; (8003278 <BSP_LCD_SetFont+0x30>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3308      	adds	r3, #8
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000b88 	.word	0x20000b88
 8003278:	20000b8c 	.word	0x20000b8c

0800327c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <BSP_LCD_GetFont+0x24>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4907      	ldr	r1, [pc, #28]	; (80032a4 <BSP_LCD_GetFont+0x28>)
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3308      	adds	r3, #8
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000b88 	.word	0x20000b88
 80032a4:	20000b8c 	.word	0x20000b8c

080032a8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80032a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <BSP_LCD_Clear+0x48>)
 80032b2:	681c      	ldr	r4, [r3, #0]
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <BSP_LCD_Clear+0x48>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <BSP_LCD_Clear+0x4c>)
 80032ba:	2134      	movs	r1, #52	; 0x34
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461e      	mov	r6, r3
 80032c8:	f7ff fef4 	bl	80030b4 <BSP_LCD_GetXSize>
 80032cc:	4605      	mov	r5, r0
 80032ce:	f7ff ff05 	bl	80030dc <BSP_LCD_GetYSize>
 80032d2:	4602      	mov	r2, r0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2300      	movs	r3, #0
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	462a      	mov	r2, r5
 80032e0:	4631      	mov	r1, r6
 80032e2:	4620      	mov	r0, r4
 80032e4:	f000 fe54 	bl	8003f90 <LL_FillBuffer>
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f0:	20000b88 	.word	0x20000b88
 80032f4:	20000aa0 	.word	0x20000aa0

080032f8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
 8003302:	460b      	mov	r3, r1
 8003304:	80bb      	strh	r3, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <BSP_LCD_DisplayChar+0x80>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	491b      	ldr	r1, [pc, #108]	; (800337c <BSP_LCD_DisplayChar+0x84>)
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3308      	adds	r3, #8
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <BSP_LCD_DisplayChar+0x80>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4c14      	ldr	r4, [pc, #80]	; (800337c <BSP_LCD_DisplayChar+0x84>)
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4423      	add	r3, r4
 8003336:	3308      	adds	r3, #8
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800333c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <BSP_LCD_DisplayChar+0x80>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4c0d      	ldr	r4, [pc, #52]	; (800337c <BSP_LCD_DisplayChar+0x84>)
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4423      	add	r3, r4
 8003350:	3308      	adds	r3, #8
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	889b      	ldrh	r3, [r3, #4]
 8003356:	3307      	adds	r3, #7
 8003358:	2b00      	cmp	r3, #0
 800335a:	da00      	bge.n	800335e <BSP_LCD_DisplayChar+0x66>
 800335c:	3307      	adds	r3, #7
 800335e:	10db      	asrs	r3, r3, #3
 8003360:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003364:	18ca      	adds	r2, r1, r3
 8003366:	88b9      	ldrh	r1, [r7, #4]
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd58 	bl	8003e20 <DrawChar>
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	20000b88 	.word	0x20000b88
 800337c:	20000b8c 	.word	0x20000b8c

08003380 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60ba      	str	r2, [r7, #8]
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	81fb      	strh	r3, [r7, #14]
 800338e:	460b      	mov	r3, r1
 8003390:	81bb      	strh	r3, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003396:	2301      	movs	r3, #1
 8003398:	83fb      	strh	r3, [r7, #30]
 800339a:	2300      	movs	r3, #0
 800339c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80033aa:	e002      	b.n	80033b2 <BSP_LCD_DisplayStringAt+0x32>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	3301      	adds	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	617a      	str	r2, [r7, #20]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f6      	bne.n	80033ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80033be:	f7ff fe79 	bl	80030b4 <BSP_LCD_GetXSize>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4850      	ldr	r0, [pc, #320]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4403      	add	r3, r0
 80033d4:	3308      	adds	r3, #8
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	889b      	ldrh	r3, [r3, #4]
 80033da:	fbb1 f3f3 	udiv	r3, r1, r3
 80033de:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d01c      	beq.n	8003420 <BSP_LCD_DisplayStringAt+0xa0>
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	dc33      	bgt.n	8003452 <BSP_LCD_DisplayStringAt+0xd2>
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <BSP_LCD_DisplayStringAt+0x74>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d019      	beq.n	8003426 <BSP_LCD_DisplayStringAt+0xa6>
 80033f2:	e02e      	b.n	8003452 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad1      	subs	r1, r2, r3
 80033fa:	4b43      	ldr	r3, [pc, #268]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4843      	ldr	r0, [pc, #268]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4403      	add	r3, r0
 800340a:	3308      	adds	r3, #8
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	889b      	ldrh	r3, [r3, #4]
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	4413      	add	r3, r2
 800341c:	83fb      	strh	r3, [r7, #30]
      break;
 800341e:	e01b      	b.n	8003458 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	83fb      	strh	r3, [r7, #30]
      break;
 8003424:	e018      	b.n	8003458 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b299      	uxth	r1, r3
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4836      	ldr	r0, [pc, #216]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4403      	add	r3, r0
 800343e:	3308      	adds	r3, #8
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	889b      	ldrh	r3, [r3, #4]
 8003444:	fb11 f303 	smulbb	r3, r1, r3
 8003448:	b29a      	uxth	r2, r3
 800344a:	89fb      	ldrh	r3, [r7, #14]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	83fb      	strh	r3, [r7, #30]
      break;
 8003450:	e002      	b.n	8003458 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	83fb      	strh	r3, [r7, #30]
      break;
 8003456:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <BSP_LCD_DisplayStringAt+0xe6>
 800345e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003462:	2b00      	cmp	r3, #0
 8003464:	da1d      	bge.n	80034a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800346a:	e01a      	b.n	80034a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	89b9      	ldrh	r1, [r7, #12]
 8003472:	8bfb      	ldrh	r3, [r7, #30]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff3f 	bl	80032f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4923      	ldr	r1, [pc, #140]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3308      	adds	r3, #8
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	889a      	ldrh	r2, [r3, #4]
 8003490:	8bfb      	ldrh	r3, [r7, #30]
 8003492:	4413      	add	r3, r2
 8003494:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3301      	adds	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
    i++;
 800349c:	8bbb      	ldrh	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2dc      	uxtb	r4, r3
 80034b0:	f7ff fe00 	bl	80030b4 <BSP_LCD_GetXSize>
 80034b4:	8bb9      	ldrh	r1, [r7, #28]
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4d14      	ldr	r5, [pc, #80]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	442b      	add	r3, r5
 80034c6:	3308      	adds	r3, #8
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	889b      	ldrh	r3, [r3, #4]
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	1ac3      	subs	r3, r0, r3
 80034d2:	b299      	uxth	r1, r3
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <BSP_LCD_DisplayStringAt+0x188>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <BSP_LCD_DisplayStringAt+0x18c>)
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3308      	adds	r3, #8
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	889b      	ldrh	r3, [r3, #4]
 80034ea:	4299      	cmp	r1, r3
 80034ec:	bf2c      	ite	cs
 80034ee:	2301      	movcs	r3, #1
 80034f0:	2300      	movcc	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4023      	ands	r3, r4
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1b7      	bne.n	800346c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bdb0      	pop	{r4, r5, r7, pc}
 8003506:	bf00      	nop
 8003508:	20000b88 	.word	0x20000b88
 800350c:	20000b8c 	.word	0x20000b8c

08003510 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800351c:	f7ff feae 	bl	800327c <BSP_LCD_GetFont>
 8003520:	4603      	mov	r3, r0
 8003522:	88db      	ldrh	r3, [r3, #6]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	fb12 f303 	smulbb	r3, r2, r3
 800352a:	b299      	uxth	r1, r3
 800352c:	2303      	movs	r3, #3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	2000      	movs	r0, #0
 8003532:	f7ff ff25 	bl	8003380 <BSP_LCD_DisplayStringAt>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003540:	b5b0      	push	{r4, r5, r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
 800354a:	460b      	mov	r3, r1
 800354c:	80bb      	strh	r3, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <BSP_LCD_DrawHLine+0xb0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <BSP_LCD_DrawHLine+0xb4>)
 800355c:	2134      	movs	r1, #52	; 0x34
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3348      	adds	r3, #72	; 0x48
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d114      	bne.n	8003596 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <BSP_LCD_DrawHLine+0xb0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <BSP_LCD_DrawHLine+0xb4>)
 8003572:	2134      	movs	r1, #52	; 0x34
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	681c      	ldr	r4, [r3, #0]
 800357e:	f7ff fd99 	bl	80030b4 <BSP_LCD_GetXSize>
 8003582:	4602      	mov	r2, r0
 8003584:	88bb      	ldrh	r3, [r7, #4]
 8003586:	fb03 f202 	mul.w	r2, r3, r2
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4413      	add	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4423      	add	r3, r4
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e013      	b.n	80035be <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <BSP_LCD_DrawHLine+0xb0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <BSP_LCD_DrawHLine+0xb4>)
 800359c:	2134      	movs	r1, #52	; 0x34
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	681c      	ldr	r4, [r3, #0]
 80035a8:	f7ff fd84 	bl	80030b4 <BSP_LCD_GetXSize>
 80035ac:	4602      	mov	r2, r0
 80035ae:	88bb      	ldrh	r3, [r7, #4]
 80035b0:	fb03 f202 	mul.w	r2, r3, r2
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4423      	add	r3, r4
 80035bc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <BSP_LCD_DrawHLine+0xb0>)
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	887c      	ldrh	r4, [r7, #2]
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <BSP_LCD_DrawHLine+0xb0>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4d0b      	ldr	r5, [pc, #44]	; (80035f8 <BSP_LCD_DrawHLine+0xb8>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	442b      	add	r3, r5
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2301      	movs	r3, #1
 80035e0:	4622      	mov	r2, r4
 80035e2:	f000 fcd5 	bl	8003f90 <LL_FillBuffer>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000b88 	.word	0x20000b88
 80035f4:	20000aa0 	.word	0x20000aa0
 80035f8:	20000b8c 	.word	0x20000b8c

080035fc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
 8003606:	460b      	mov	r3, r1
 8003608:	80bb      	strh	r3, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	f1c3 0303 	rsb	r3, r3, #3
 8003616:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003620:	e0c7      	b.n	80037b2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	b29a      	uxth	r2, r3
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	4413      	add	r3, r2
 800362a:	b298      	uxth	r0, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	b29b      	uxth	r3, r3
 8003630:	88ba      	ldrh	r2, [r7, #4]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	b299      	uxth	r1, r3
 8003636:	4b64      	ldr	r3, [pc, #400]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4c64      	ldr	r4, [pc, #400]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4423      	add	r3, r4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f8c1 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	b29b      	uxth	r3, r3
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	b298      	uxth	r0, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	b29b      	uxth	r3, r3
 800365c:	88ba      	ldrh	r2, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	b299      	uxth	r1, r3
 8003662:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4c59      	ldr	r4, [pc, #356]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4423      	add	r3, r4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	f000 f8ab 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	b29a      	uxth	r2, r3
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4413      	add	r3, r2
 8003682:	b298      	uxth	r0, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	b29b      	uxth	r3, r3
 8003688:	88ba      	ldrh	r2, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	b299      	uxth	r1, r3
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4c4e      	ldr	r4, [pc, #312]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4423      	add	r3, r4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	f000 f895 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	b298      	uxth	r0, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	88ba      	ldrh	r2, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b299      	uxth	r1, r3
 80036ba:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4c43      	ldr	r4, [pc, #268]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4423      	add	r3, r4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	f000 f87f 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	4413      	add	r3, r2
 80036da:	b298      	uxth	r0, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	b29a      	uxth	r2, r3
 80036e0:	88bb      	ldrh	r3, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	b299      	uxth	r1, r3
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4c38      	ldr	r4, [pc, #224]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4423      	add	r3, r4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f000 f869 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	b29b      	uxth	r3, r3
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b298      	uxth	r0, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	b29a      	uxth	r2, r3
 800370c:	88bb      	ldrh	r3, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	b299      	uxth	r1, r3
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4c2d      	ldr	r4, [pc, #180]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4423      	add	r3, r4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	f000 f853 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b29a      	uxth	r2, r3
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	4413      	add	r3, r2
 8003732:	b298      	uxth	r0, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	b29a      	uxth	r2, r3
 8003738:	88bb      	ldrh	r3, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	b299      	uxth	r1, r3
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4c22      	ldr	r4, [pc, #136]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4423      	add	r3, r4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	f000 f83d 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	b29b      	uxth	r3, r3
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	b298      	uxth	r0, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	b29a      	uxth	r2, r3
 8003764:	88bb      	ldrh	r3, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	b299      	uxth	r1, r3
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <BSP_LCD_DrawCircle+0x1cc>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4c17      	ldr	r4, [pc, #92]	; (80037cc <BSP_LCD_DrawCircle+0x1d0>)
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4423      	add	r3, r4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f827 	bl	80037d0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da06      	bge.n	8003796 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	4413      	add	r3, r2
 8003790:	3306      	adds	r3, #6
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e00a      	b.n	80037ac <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	330a      	adds	r3, #10
 80037a4:	617b      	str	r3, [r7, #20]
      current_y--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	3301      	adds	r3, #1
 80037b0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f67f af33 	bls.w	8003622 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000b88 	.word	0x20000b88
 80037cc:	20000b8c 	.word	0x20000b8c

080037d0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	603a      	str	r2, [r7, #0]
 80037da:	80fb      	strh	r3, [r7, #6]
 80037dc:	460b      	mov	r3, r1
 80037de:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <BSP_LCD_DrawPixel+0x88>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <BSP_LCD_DrawPixel+0x8c>)
 80037e6:	2134      	movs	r1, #52	; 0x34
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d116      	bne.n	8003824 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <BSP_LCD_DrawPixel+0x88>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <BSP_LCD_DrawPixel+0x8c>)
 80037fc:	2134      	movs	r1, #52	; 0x34
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	335c      	adds	r3, #92	; 0x5c
 8003806:	681c      	ldr	r4, [r3, #0]
 8003808:	88bd      	ldrh	r5, [r7, #4]
 800380a:	f7ff fc53 	bl	80030b4 <BSP_LCD_GetXSize>
 800380e:	4603      	mov	r3, r0
 8003810:	fb03 f205 	mul.w	r2, r3, r5
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	4413      	add	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4423      	add	r3, r4
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b292      	uxth	r2, r2
 8003820:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003822:	e015      	b.n	8003850 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <BSP_LCD_DrawPixel+0x88>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <BSP_LCD_DrawPixel+0x8c>)
 800382a:	2134      	movs	r1, #52	; 0x34
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	681c      	ldr	r4, [r3, #0]
 8003836:	88bd      	ldrh	r5, [r7, #4]
 8003838:	f7ff fc3c 	bl	80030b4 <BSP_LCD_GetXSize>
 800383c:	4603      	mov	r3, r0
 800383e:	fb03 f205 	mul.w	r2, r3, r5
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4423      	add	r3, r4
 800384a:	461a      	mov	r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bdb0      	pop	{r4, r5, r7, pc}
 8003858:	20000b88 	.word	0x20000b88
 800385c:	20000aa0 	.word	0x20000aa0

08003860 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b08b      	sub	sp, #44	; 0x2c
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	330a      	adds	r3, #10
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	330b      	adds	r3, #11
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	330c      	adds	r3, #12
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	330d      	adds	r3, #13
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	061b      	lsls	r3, r3, #24
 80038a4:	4413      	add	r3, r2
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3312      	adds	r3, #18
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3313      	adds	r3, #19
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3314      	adds	r3, #20
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3315      	adds	r3, #21
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	4413      	add	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3316      	adds	r3, #22
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3317      	adds	r3, #23
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3318      	adds	r3, #24
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3319      	adds	r3, #25
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	4413      	add	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	331c      	adds	r3, #28
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	331d      	adds	r3, #29
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4413      	add	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <BSP_LCD_DrawBitmap+0x15c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <BSP_LCD_DrawBitmap+0x160>)
 8003912:	2134      	movs	r1, #52	; 0x34
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	335c      	adds	r3, #92	; 0x5c
 800391c:	681c      	ldr	r4, [r3, #0]
 800391e:	f7ff fbc9 	bl	80030b4 <BSP_LCD_GetXSize>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	fb03 f202 	mul.w	r2, r3, r2
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4423      	add	r3, r4
 8003932:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3b20      	subs	r3, #32
 8003938:	2b07      	cmp	r3, #7
 800393a:	d802      	bhi.n	8003942 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	e008      	b.n	8003954 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3b10      	subs	r3, #16
 8003946:	2b07      	cmp	r3, #7
 8003948:	d802      	bhi.n	8003950 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800394a:	2302      	movs	r3, #2
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e001      	b.n	8003954 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003950:	2301      	movs	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b01      	subs	r3, #1
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	08d2      	lsrs	r2, r2, #3
 8003962:	fb03 f202 	mul.w	r2, r3, r2
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	4413      	add	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	e018      	b.n	80039a8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb53 	bl	8004028 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003982:	f7ff fb97 	bl	80030b4 <BSP_LCD_GetXSize>
 8003986:	4603      	mov	r3, r0
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	4413      	add	r3, r2
 800398e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	425b      	negs	r3, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3e2      	bcc.n	8003976 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	372c      	adds	r7, #44	; 0x2c
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000b88 	.word	0x20000b88
 80039c0:	20000aa0 	.word	0x20000aa0

080039c4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af02      	add	r7, sp, #8
 80039cc:	4604      	mov	r4, r0
 80039ce:	4608      	mov	r0, r1
 80039d0:	4611      	mov	r1, r2
 80039d2:	461a      	mov	r2, r3
 80039d4:	4623      	mov	r3, r4
 80039d6:	80fb      	strh	r3, [r7, #6]
 80039d8:	4603      	mov	r3, r0
 80039da:	80bb      	strh	r3, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
 80039e0:	4613      	mov	r3, r2
 80039e2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80039e8:	4b30      	ldr	r3, [pc, #192]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4930      	ldr	r1, [pc, #192]	; (8003ab0 <BSP_LCD_FillRect+0xec>)
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fbf2 	bl	80031e4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <BSP_LCD_FillRect+0xf0>)
 8003a06:	2134      	movs	r1, #52	; 0x34
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d114      	bne.n	8003a40 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003a16:	4b25      	ldr	r3, [pc, #148]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <BSP_LCD_FillRect+0xf0>)
 8003a1c:	2134      	movs	r1, #52	; 0x34
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	335c      	adds	r3, #92	; 0x5c
 8003a26:	681c      	ldr	r4, [r3, #0]
 8003a28:	f7ff fb44 	bl	80030b4 <BSP_LCD_GetXSize>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	fb03 f202 	mul.w	r2, r3, r2
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	4413      	add	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4423      	add	r3, r4
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e013      	b.n	8003a68 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <BSP_LCD_FillRect+0xf0>)
 8003a46:	2134      	movs	r1, #52	; 0x34
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	f7ff fb2f 	bl	80030b4 <BSP_LCD_GetXSize>
 8003a56:	4602      	mov	r2, r0
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	fb03 f202 	mul.w	r2, r3, r2
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4423      	add	r3, r4
 8003a66:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	68fd      	ldr	r5, [r7, #12]
 8003a6e:	887e      	ldrh	r6, [r7, #2]
 8003a70:	f8b7 8000 	ldrh.w	r8, [r7]
 8003a74:	f7ff fb1e 	bl	80030b4 <BSP_LCD_GetXSize>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	1ad1      	subs	r1, r2, r3
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <BSP_LCD_FillRect+0xe8>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	480b      	ldr	r0, [pc, #44]	; (8003ab0 <BSP_LCD_FillRect+0xec>)
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4403      	add	r3, r0
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	9100      	str	r1, [sp, #0]
 8003a94:	4643      	mov	r3, r8
 8003a96:	4632      	mov	r2, r6
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 fa78 	bl	8003f90 <LL_FillBuffer>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000b88 	.word	0x20000b88
 8003ab0:	20000b8c 	.word	0x20000b8c
 8003ab4:	20000aa0 	.word	0x20000aa0

08003ab8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	80bb      	strh	r3, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	f1c3 0303 	rsb	r3, r3, #3
 8003ad2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003adc:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <BSP_LCD_FillCircle+0x138>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4944      	ldr	r1, [pc, #272]	; (8003bf4 <BSP_LCD_FillCircle+0x13c>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fb78 	bl	80031e4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003af4:	e061      	b.n	8003bba <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d021      	beq.n	8003b40 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	b298      	uxth	r0, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	88bb      	ldrh	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f7ff fd11 	bl	8003540 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	b298      	uxth	r0, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	88ba      	ldrh	r2, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	b299      	uxth	r1, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7ff fd00 	bl	8003540 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b298      	uxth	r0, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	88ba      	ldrh	r2, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff fcec 	bl	8003540 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b298      	uxth	r0, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	88bb      	ldrh	r3, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	f7ff fcdb 	bl	8003540 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	da06      	bge.n	8003b9e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	3306      	adds	r3, #6
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4413      	add	r3, r2
 8003baa:	330a      	adds	r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
      current_y--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d999      	bls.n	8003af6 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <BSP_LCD_FillCircle+0x138>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <BSP_LCD_FillCircle+0x13c>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fb05 	bl	80031e4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	88b9      	ldrh	r1, [r7, #4]
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fd0b 	bl	80035fc <BSP_LCD_DrawCircle>
}
 8003be6:	bf00      	nop
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000b88 	.word	0x20000b88
 8003bf4:	20000b8c 	.word	0x20000b8c

08003bf8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <BSP_LCD_DisplayOn+0x30>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <BSP_LCD_DisplayOn+0x30>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c12:	4806      	ldr	r0, [pc, #24]	; (8003c2c <BSP_LCD_DisplayOn+0x34>)
 8003c14:	f003 fd84 	bl	8007720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2108      	movs	r1, #8
 8003c1c:	4804      	ldr	r0, [pc, #16]	; (8003c30 <BSP_LCD_DisplayOn+0x38>)
 8003c1e:	f003 fd7f 	bl	8007720 <HAL_GPIO_WritePin>
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000aa0 	.word	0x20000aa0
 8003c2c:	40022000 	.word	0x40022000
 8003c30:	40022800 	.word	0x40022800

08003c34 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b090      	sub	sp, #64	; 0x40
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c3e:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c56:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c86:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a51      	ldr	r2, [pc, #324]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003cb6:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a45      	ldr	r2, [pc, #276]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cce:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a3f      	ldr	r2, [pc, #252]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003ce6:	4b3a      	ldr	r3, [pc, #232]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a39      	ldr	r2, [pc, #228]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <BSP_LCD_MspInit+0x19c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003d16:	2310      	movs	r3, #16
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d22:	2302      	movs	r3, #2
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003d26:	230e      	movs	r3, #14
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4828      	ldr	r0, [pc, #160]	; (8003dd4 <BSP_LCD_MspInit+0x1a0>)
 8003d32:	f003 fa25 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003d40:	2309      	movs	r3, #9
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4823      	ldr	r0, [pc, #140]	; (8003dd8 <BSP_LCD_MspInit+0x1a4>)
 8003d4c:	f003 fa18 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003d50:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d56:	2302      	movs	r3, #2
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003d5a:	230e      	movs	r3, #14
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d62:	4619      	mov	r1, r3
 8003d64:	481d      	ldr	r0, [pc, #116]	; (8003ddc <BSP_LCD_MspInit+0x1a8>)
 8003d66:	f003 fa0b 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003d6a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d70:	2302      	movs	r3, #2
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003d74:	230e      	movs	r3, #14
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4818      	ldr	r0, [pc, #96]	; (8003de0 <BSP_LCD_MspInit+0x1ac>)
 8003d80:	f003 f9fe 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003d84:	23f7      	movs	r3, #247	; 0xf7
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003d8c:	230e      	movs	r3, #14
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d94:	4619      	mov	r1, r3
 8003d96:	4813      	ldr	r0, [pc, #76]	; (8003de4 <BSP_LCD_MspInit+0x1b0>)
 8003d98:	f003 f9f2 	bl	8007180 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003da2:	2301      	movs	r3, #1
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003daa:	4619      	mov	r1, r3
 8003dac:	480b      	ldr	r0, [pc, #44]	; (8003ddc <BSP_LCD_MspInit+0x1a8>)
 8003dae:	f003 f9e7 	bl	8007180 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003db2:	2308      	movs	r3, #8
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4808      	ldr	r0, [pc, #32]	; (8003de4 <BSP_LCD_MspInit+0x1b0>)
 8003dc2:	f003 f9dd 	bl	8007180 <HAL_GPIO_Init>
}
 8003dc6:	bf00      	nop
 8003dc8:	3740      	adds	r7, #64	; 0x40
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40022400 	.word	0x40022400
 8003de4:	40022800 	.word	0x40022800

08003de8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <BSP_LCD_ClockConfig+0x34>)
 8003df4:	2208      	movs	r2, #8
 8003df6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <BSP_LCD_ClockConfig+0x34>)
 8003dfa:	22c0      	movs	r2, #192	; 0xc0
 8003dfc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <BSP_LCD_ClockConfig+0x34>)
 8003e00:	2205      	movs	r2, #5
 8003e02:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <BSP_LCD_ClockConfig+0x34>)
 8003e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <BSP_LCD_ClockConfig+0x34>)
 8003e0e:	f005 fb6f 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000ba4 	.word	0x20000ba4

08003e20 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	603a      	str	r2, [r7, #0]
 8003e2a:	80fb      	strh	r3, [r7, #6]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <DrawChar+0x168>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4953      	ldr	r1, [pc, #332]	; (8003f8c <DrawChar+0x16c>)
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3308      	adds	r3, #8
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	88db      	ldrh	r3, [r3, #6]
 8003e4e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003e50:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <DrawChar+0x168>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <DrawChar+0x16c>)
 8003e56:	4613      	mov	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3308      	adds	r3, #8
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	889b      	ldrh	r3, [r3, #4]
 8003e66:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003e68:	8a3b      	ldrh	r3, [r7, #16]
 8003e6a:	3307      	adds	r3, #7
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da00      	bge.n	8003e72 <DrawChar+0x52>
 8003e70:	3307      	adds	r3, #7
 8003e72:	10db      	asrs	r3, r3, #3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	8a3b      	ldrh	r3, [r7, #16]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e076      	b.n	8003f76 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003e88:	8a3b      	ldrh	r3, [r7, #16]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da00      	bge.n	8003e92 <DrawChar+0x72>
 8003e90:	3307      	adds	r3, #7
 8003e92:	10db      	asrs	r3, r3, #3
 8003e94:	461a      	mov	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003ea2:	8a3b      	ldrh	r3, [r7, #16]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da00      	bge.n	8003eac <DrawChar+0x8c>
 8003eaa:	3307      	adds	r3, #7
 8003eac:	10db      	asrs	r3, r3, #3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d002      	beq.n	8003eb8 <DrawChar+0x98>
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d004      	beq.n	8003ec0 <DrawChar+0xa0>
 8003eb6:	e00c      	b.n	8003ed2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	e016      	b.n	8003eee <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	3201      	adds	r2, #1
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
      break;
 8003ed0:	e00d      	b.n	8003eee <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	041a      	lsls	r2, r3, #16
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	3202      	adds	r2, #2
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
      break;
 8003eec:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e036      	b.n	8003f62 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003ef4:	8a3a      	ldrh	r2, [r7, #16]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	1ad2      	subs	r2, r2, r3
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	4413      	add	r3, r2
 8003efe:	3b01      	subs	r3, #1
 8003f00:	2201      	movs	r2, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	4413      	add	r3, r2
 8003f18:	b298      	uxth	r0, r3
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <DrawChar+0x168>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	491b      	ldr	r1, [pc, #108]	; (8003f8c <DrawChar+0x16c>)
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	88bb      	ldrh	r3, [r7, #4]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7ff fc4e 	bl	80037d0 <BSP_LCD_DrawPixel>
 8003f34:	e012      	b.n	8003f5c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b298      	uxth	r0, r3
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <DrawChar+0x168>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4911      	ldr	r1, [pc, #68]	; (8003f8c <DrawChar+0x16c>)
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3304      	adds	r3, #4
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	88bb      	ldrh	r3, [r7, #4]
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7ff fc3a 	bl	80037d0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	8a3b      	ldrh	r3, [r7, #16]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d3c4      	bcc.n	8003ef4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	8a7b      	ldrh	r3, [r7, #18]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d384      	bcc.n	8003e88 <DrawChar+0x68>
  }
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000b88 	.word	0x20000b88
 8003f8c:	20000b8c 	.word	0x20000b8c

08003f90 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <LL_FillBuffer+0x88>)
 8003fa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fa4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <LL_FillBuffer+0x8c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <LL_FillBuffer+0x90>)
 8003fac:	2134      	movs	r1, #52	; 0x34
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3348      	adds	r3, #72	; 0x48
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d103      	bne.n	8003fc4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003fbc:	4b16      	ldr	r3, [pc, #88]	; (8004018 <LL_FillBuffer+0x88>)
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e002      	b.n	8003fca <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <LL_FillBuffer+0x88>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <LL_FillBuffer+0x88>)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <LL_FillBuffer+0x88>)
 8003fd2:	4a14      	ldr	r2, [pc, #80]	; (8004024 <LL_FillBuffer+0x94>)
 8003fd4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003fd6:	4810      	ldr	r0, [pc, #64]	; (8004018 <LL_FillBuffer+0x88>)
 8003fd8:	f002 fd36 	bl	8006a48 <HAL_DMA2D_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d115      	bne.n	800400e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	480c      	ldr	r0, [pc, #48]	; (8004018 <LL_FillBuffer+0x88>)
 8003fe6:	f002 ff9d 	bl	8006f24 <HAL_DMA2D_ConfigLayer>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10e      	bne.n	800400e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69f9      	ldr	r1, [r7, #28]
 8003ffa:	4807      	ldr	r0, [pc, #28]	; (8004018 <LL_FillBuffer+0x88>)
 8003ffc:	f002 fd6e 	bl	8006adc <HAL_DMA2D_Start>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004006:	210a      	movs	r1, #10
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <LL_FillBuffer+0x88>)
 800400a:	f002 fd92 	bl	8006b32 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000b48 	.word	0x20000b48
 800401c:	20000b88 	.word	0x20000b88
 8004020:	20000aa0 	.word	0x20000aa0
 8004024:	4002b000 	.word	0x4002b000

08004028 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800403c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <LL_ConvertLineToARGB8888+0x84>)
 8004066:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004068:	480f      	ldr	r0, [pc, #60]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 800406a:	f002 fced 	bl	8006a48 <HAL_DMA2D_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d115      	bne.n	80040a0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004074:	2101      	movs	r1, #1
 8004076:	480c      	ldr	r0, [pc, #48]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 8004078:	f002 ff54 	bl	8006f24 <HAL_DMA2D_ConfigLayer>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	2301      	movs	r3, #1
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4806      	ldr	r0, [pc, #24]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 800408e:	f002 fd25 	bl	8006adc <HAL_DMA2D_Start>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004098:	210a      	movs	r1, #10
 800409a:	4803      	ldr	r0, [pc, #12]	; (80040a8 <LL_ConvertLineToARGB8888+0x80>)
 800409c:	f002 fd49 	bl	8006b32 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000b48 	.word	0x20000b48
 80040ac:	4002b000 	.word	0x4002b000

080040b0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040b6:	4a2a      	ldr	r2, [pc, #168]	; (8004160 <BSP_SDRAM_Init+0xb0>)
 80040b8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040bc:	2202      	movs	r2, #2
 80040be:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040c2:	2207      	movs	r2, #7
 80040c4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040c8:	2204      	movs	r2, #4
 80040ca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040ce:	2207      	movs	r2, #7
 80040d0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040d4:	2202      	movs	r2, #2
 80040d6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040da:	2202      	movs	r2, #2
 80040dc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 80040e0:	2202      	movs	r2, #2
 80040e2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040f2:	2204      	movs	r2, #4
 80040f4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040f8:	2210      	movs	r2, #16
 80040fa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040fc:	4b17      	ldr	r3, [pc, #92]	; (800415c <BSP_SDRAM_Init+0xac>)
 80040fe:	2240      	movs	r2, #64	; 0x40
 8004100:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <BSP_SDRAM_Init+0xac>)
 8004104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004108:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <BSP_SDRAM_Init+0xac>)
 800410c:	2200      	movs	r2, #0
 800410e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <BSP_SDRAM_Init+0xac>)
 8004112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004116:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <BSP_SDRAM_Init+0xac>)
 800411a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800411e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <BSP_SDRAM_Init+0xac>)
 8004122:	2200      	movs	r2, #0
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004126:	2100      	movs	r1, #0
 8004128:	480c      	ldr	r0, [pc, #48]	; (800415c <BSP_SDRAM_Init+0xac>)
 800412a:	f000 f87f 	bl	800422c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800412e:	490d      	ldr	r1, [pc, #52]	; (8004164 <BSP_SDRAM_Init+0xb4>)
 8004130:	480a      	ldr	r0, [pc, #40]	; (800415c <BSP_SDRAM_Init+0xac>)
 8004132:	f006 f9a5 	bl	800a480 <HAL_SDRAM_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <BSP_SDRAM_Init+0xb8>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e002      	b.n	800414a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <BSP_SDRAM_Init+0xb8>)
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800414a:	f240 6003 	movw	r0, #1539	; 0x603
 800414e:	f000 f80d 	bl	800416c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <BSP_SDRAM_Init+0xb8>)
 8004154:	781b      	ldrb	r3, [r3, #0]
}
 8004156:	4618      	mov	r0, r3
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000c28 	.word	0x20000c28
 8004160:	a0000140 	.word	0xa0000140
 8004164:	20000c5c 	.word	0x20000c5c
 8004168:	200000c4 	.word	0x200000c4

0800416c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004180:	2210      	movs	r2, #16
 8004182:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004186:	2201      	movs	r2, #1
 8004188:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800418c:	2200      	movs	r2, #0
 800418e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004194:	4923      	ldr	r1, [pc, #140]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004196:	4824      	ldr	r0, [pc, #144]	; (8004228 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004198:	f006 f9a6 	bl	800a4e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800419c:	2001      	movs	r0, #1
 800419e:	f001 faeb 	bl	8005778 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041a4:	2202      	movs	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041aa:	2210      	movs	r2, #16
 80041ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80041ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041be:	4919      	ldr	r1, [pc, #100]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041c0:	4819      	ldr	r0, [pc, #100]	; (8004228 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041c2:	f006 f991 	bl	800a4e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041c8:	2203      	movs	r2, #3
 80041ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041cc:	4b15      	ldr	r3, [pc, #84]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041ce:	2210      	movs	r2, #16
 80041d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041d4:	2208      	movs	r2, #8
 80041d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80041de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e2:	4910      	ldr	r1, [pc, #64]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041e4:	4810      	ldr	r0, [pc, #64]	; (8004228 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041e6:	f006 f97f 	bl	800a4e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80041ea:	f44f 7308 	mov.w	r3, #544	; 0x220
 80041ee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041f2:	2204      	movs	r2, #4
 80041f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041f8:	2210      	movs	r2, #16
 80041fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041fe:	2201      	movs	r2, #1
 8004200:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a07      	ldr	r2, [pc, #28]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004206:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420c:	4905      	ldr	r1, [pc, #20]	; (8004224 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800420e:	4806      	ldr	r0, [pc, #24]	; (8004228 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004210:	f006 f96a 	bl	800a4e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4804      	ldr	r0, [pc, #16]	; (8004228 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004218:	f006 f99b 	bl	800a552 <HAL_SDRAM_ProgramRefreshRate>
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000c78 	.word	0x20000c78
 8004228:	20000c28 	.word	0x20000c28

0800422c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800422c:	b580      	push	{r7, lr}
 800422e:	b090      	sub	sp, #64	; 0x40
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	4a6f      	ldr	r2, [pc, #444]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6393      	str	r3, [r2, #56]	; 0x38
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800424e:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a69      	ldr	r2, [pc, #420]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004266:	4b64      	ldr	r3, [pc, #400]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800427e:	4b5e      	ldr	r3, [pc, #376]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a5d      	ldr	r2, [pc, #372]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004296:	4b58      	ldr	r3, [pc, #352]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a57      	ldr	r2, [pc, #348]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 800429c:	f043 0310 	orr.w	r3, r3, #16
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b55      	ldr	r3, [pc, #340]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ae:	4b52      	ldr	r3, [pc, #328]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042c6:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a4b      	ldr	r2, [pc, #300]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042de:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a45      	ldr	r2, [pc, #276]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <BSP_SDRAM_MspInit+0x1cc>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80042fa:	2301      	movs	r3, #1
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80042fe:	2302      	movs	r3, #2
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004302:	230c      	movs	r3, #12
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004306:	2308      	movs	r3, #8
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800430a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430e:	4619      	mov	r1, r3
 8004310:	483a      	ldr	r0, [pc, #232]	; (80043fc <BSP_SDRAM_MspInit+0x1d0>)
 8004312:	f002 ff35 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004316:	f24c 7303 	movw	r3, #50947	; 0xc703
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800431c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004320:	4619      	mov	r1, r3
 8004322:	4837      	ldr	r0, [pc, #220]	; (8004400 <BSP_SDRAM_MspInit+0x1d4>)
 8004324:	f002 ff2c 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004328:	f64f 7383 	movw	r3, #65411	; 0xff83
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800432e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004332:	4619      	mov	r1, r3
 8004334:	4833      	ldr	r0, [pc, #204]	; (8004404 <BSP_SDRAM_MspInit+0x1d8>)
 8004336:	f002 ff23 	bl	8007180 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800433a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004344:	4619      	mov	r1, r3
 8004346:	4830      	ldr	r0, [pc, #192]	; (8004408 <BSP_SDRAM_MspInit+0x1dc>)
 8004348:	f002 ff1a 	bl	8007180 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800434c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004356:	4619      	mov	r1, r3
 8004358:	482c      	ldr	r0, [pc, #176]	; (800440c <BSP_SDRAM_MspInit+0x1e0>)
 800435a:	f002 ff11 	bl	8007180 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800435e:	2328      	movs	r3, #40	; 0x28
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004366:	4619      	mov	r1, r3
 8004368:	4829      	ldr	r0, [pc, #164]	; (8004410 <BSP_SDRAM_MspInit+0x1e4>)
 800436a:	f002 ff09 	bl	8007180 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 8004370:	2200      	movs	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 800437c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004380:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 8004384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004388:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 800438c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004390:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 8004394:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004398:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 800439c:	2200      	movs	r2, #0
 800439e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80043a0:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043b0:	2203      	movs	r2, #3
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80043ba:	4b16      	ldr	r3, [pc, #88]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <BSP_SDRAM_MspInit+0x1ec>)
 80043c4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a12      	ldr	r2, [pc, #72]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80043d2:	4810      	ldr	r0, [pc, #64]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043d4:	f002 f996 	bl	8006704 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80043d8:	480e      	ldr	r0, [pc, #56]	; (8004414 <BSP_SDRAM_MspInit+0x1e8>)
 80043da:	f002 f8e5 	bl	80065a8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	210f      	movs	r1, #15
 80043e2:	2038      	movs	r0, #56	; 0x38
 80043e4:	f001 ffd6 	bl	8006394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80043e8:	2038      	movs	r0, #56	; 0x38
 80043ea:	f001 ffef 	bl	80063cc <HAL_NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3740      	adds	r7, #64	; 0x40
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020800 	.word	0x40020800
 8004400:	40020c00 	.word	0x40020c00
 8004404:	40021000 	.word	0x40021000
 8004408:	40021400 	.word	0x40021400
 800440c:	40021800 	.word	0x40021800
 8004410:	40021c00 	.word	0x40021c00
 8004414:	20000c88 	.word	0x20000c88
 8004418:	40026410 	.word	0x40026410

0800441c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	460a      	mov	r2, r1
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	4613      	mov	r3, r2
 800442a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <BSP_TS_Init+0x68>)
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004436:	4a14      	ldr	r2, [pc, #80]	; (8004488 <BSP_TS_Init+0x6c>)
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <BSP_TS_Init+0x70>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2070      	movs	r0, #112	; 0x70
 8004442:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <BSP_TS_Init+0x70>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2070      	movs	r0, #112	; 0x70
 800444a:	4798      	blx	r3
 800444c:	4603      	mov	r3, r0
 800444e:	2b51      	cmp	r3, #81	; 0x51
 8004450:	d111      	bne.n	8004476 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <BSP_TS_Init+0x74>)
 8004454:	4a0d      	ldr	r2, [pc, #52]	; (800448c <BSP_TS_Init+0x70>)
 8004456:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <BSP_TS_Init+0x78>)
 800445a:	2270      	movs	r2, #112	; 0x70
 800445c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <BSP_TS_Init+0x7c>)
 8004460:	2208      	movs	r2, #8
 8004462:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <BSP_TS_Init+0x74>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <BSP_TS_Init+0x78>)
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	b292      	uxth	r2, r2
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	e001      	b.n	800447a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004476:	2303      	movs	r3, #3
 8004478:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000cec 	.word	0x20000cec
 8004488:	20000cee 	.word	0x20000cee
 800448c:	20000000 	.word	0x20000000
 8004490:	20000ce8 	.word	0x20000ce8
 8004494:	20000cf1 	.word	0x20000cf1
 8004498:	20000cf0 	.word	0x20000cf0

0800449c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b097      	sub	sp, #92	; 0x5c
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80044b6:	4bb4      	ldr	r3, [pc, #720]	; (8004788 <BSP_TS_GetState+0x2ec>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	4ab3      	ldr	r2, [pc, #716]	; (800478c <BSP_TS_GetState+0x2f0>)
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	b292      	uxth	r2, r2
 80044c2:	4610      	mov	r0, r2
 80044c4:	4798      	blx	r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8196 	beq.w	8004804 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
 80044dc:	e185      	b.n	80047ea <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80044de:	4baa      	ldr	r3, [pc, #680]	; (8004788 <BSP_TS_GetState+0x2ec>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4aa9      	ldr	r2, [pc, #676]	; (800478c <BSP_TS_GetState+0x2f0>)
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	b290      	uxth	r0, r2
 80044ea:	f107 0120 	add.w	r1, r7, #32
 80044ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f0:	0052      	lsls	r2, r2, #1
 80044f2:	188c      	adds	r4, r1, r2
 80044f4:	f107 0114 	add.w	r1, r7, #20
 80044f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044fa:	0052      	lsls	r2, r2, #1
 80044fc:	440a      	add	r2, r1
 80044fe:	4621      	mov	r1, r4
 8004500:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004502:	4ba3      	ldr	r3, [pc, #652]	; (8004790 <BSP_TS_GetState+0x2f4>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d117      	bne.n	800453a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	3350      	adds	r3, #80	; 0x50
 8004510:	443b      	add	r3, r7
 8004512:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	3350      	adds	r3, #80	; 0x50
 800451c:	443b      	add	r3, r7
 800451e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	3350      	adds	r3, #80	; 0x50
 8004528:	443b      	add	r3, r7
 800452a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800452e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	3350      	adds	r3, #80	; 0x50
 8004534:	443b      	add	r3, r7
 8004536:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800453a:	4b95      	ldr	r3, [pc, #596]	; (8004790 <BSP_TS_GetState+0x2f4>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00e      	beq.n	8004564 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	3350      	adds	r3, #80	; 0x50
 800454c:	443b      	add	r3, r7
 800454e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004552:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004556:	b29a      	uxth	r2, r3
 8004558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	3350      	adds	r3, #80	; 0x50
 800455e:	443b      	add	r3, r7
 8004560:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004564:	4b8a      	ldr	r3, [pc, #552]	; (8004790 <BSP_TS_GetState+0x2f4>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00e      	beq.n	800458e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	3350      	adds	r3, #80	; 0x50
 8004576:	443b      	add	r3, r7
 8004578:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800457c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004580:	b29a      	uxth	r2, r3
 8004582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	3350      	adds	r3, #80	; 0x50
 8004588:	443b      	add	r3, r7
 800458a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800458e:	4b80      	ldr	r3, [pc, #512]	; (8004790 <BSP_TS_GetState+0x2f4>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800459a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	3350      	adds	r3, #80	; 0x50
 80045a0:	443b      	add	r3, r7
 80045a2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	3350      	adds	r3, #80	; 0x50
 80045ac:	443b      	add	r3, r7
 80045ae:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	3350      	adds	r3, #80	; 0x50
 80045b8:	443b      	add	r3, r7
 80045ba:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	3350      	adds	r3, #80	; 0x50
 80045c4:	443b      	add	r3, r7
 80045c6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	3350      	adds	r3, #80	; 0x50
 80045d0:	443b      	add	r3, r7
 80045d2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4a6e      	ldr	r2, [pc, #440]	; (8004794 <BSP_TS_GetState+0x2f8>)
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	4299      	cmp	r1, r3
 80045e2:	d90d      	bls.n	8004600 <BSP_TS_GetState+0x164>
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	3350      	adds	r3, #80	; 0x50
 80045ea:	443b      	add	r3, r7
 80045ec:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80045f0:	4968      	ldr	r1, [pc, #416]	; (8004794 <BSP_TS_GetState+0x2f8>)
 80045f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	e00c      	b.n	800461a <BSP_TS_GetState+0x17e>
 8004600:	4a64      	ldr	r2, [pc, #400]	; (8004794 <BSP_TS_GetState+0x2f8>)
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	b29a      	uxth	r2, r3
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	3350      	adds	r3, #80	; 0x50
 8004610:	443b      	add	r3, r7
 8004612:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	b29b      	uxth	r3, r3
 800461a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800461e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	3350      	adds	r3, #80	; 0x50
 8004624:	443b      	add	r3, r7
 8004626:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800462a:	4619      	mov	r1, r3
 800462c:	4a5a      	ldr	r2, [pc, #360]	; (8004798 <BSP_TS_GetState+0x2fc>)
 800462e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	4299      	cmp	r1, r3
 8004636:	d90d      	bls.n	8004654 <BSP_TS_GetState+0x1b8>
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	443b      	add	r3, r7
 8004640:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004644:	4954      	ldr	r1, [pc, #336]	; (8004798 <BSP_TS_GetState+0x2fc>)
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800464c:	b29b      	uxth	r3, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	b29b      	uxth	r3, r3
 8004652:	e00c      	b.n	800466e <BSP_TS_GetState+0x1d2>
 8004654:	4a50      	ldr	r2, [pc, #320]	; (8004798 <BSP_TS_GetState+0x2fc>)
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	b29a      	uxth	r2, r3
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	3350      	adds	r3, #80	; 0x50
 8004664:	443b      	add	r3, r7
 8004666:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	b29b      	uxth	r3, r3
 800466e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004672:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004676:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800467a:	4413      	add	r3, r2
 800467c:	2b05      	cmp	r3, #5
 800467e:	dd15      	ble.n	80046ac <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	3350      	adds	r3, #80	; 0x50
 8004686:	443b      	add	r3, r7
 8004688:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800468c:	4619      	mov	r1, r3
 800468e:	4a41      	ldr	r2, [pc, #260]	; (8004794 <BSP_TS_GetState+0x2f8>)
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	3350      	adds	r3, #80	; 0x50
 800469c:	443b      	add	r3, r7
 800469e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <BSP_TS_GetState+0x2fc>)
 80046a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80046ac:	4b37      	ldr	r3, [pc, #220]	; (800478c <BSP_TS_GetState+0x2f0>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d119      	bne.n	80046e8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	3350      	adds	r3, #80	; 0x50
 80046ba:	443b      	add	r3, r7
 80046bc:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	460a      	mov	r2, r1
 80046ca:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	3350      	adds	r3, #80	; 0x50
 80046d2:	443b      	add	r3, r7
 80046d4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	3304      	adds	r3, #4
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	460a      	mov	r2, r1
 80046e4:	809a      	strh	r2, [r3, #4]
 80046e6:	e022      	b.n	800472e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <BSP_TS_GetState+0x300>)
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	4a29      	ldr	r2, [pc, #164]	; (8004794 <BSP_TS_GetState+0x2f8>)
 80046f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	0b1b      	lsrs	r3, r3, #12
 80046fc:	b299      	uxth	r1, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	460a      	mov	r2, r1
 8004708:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800470a:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <BSP_TS_GetState+0x304>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	4619      	mov	r1, r3
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <BSP_TS_GetState+0x2fc>)
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	0b1b      	lsrs	r3, r3, #12
 800471e:	b299      	uxth	r1, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	3304      	adds	r3, #4
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	460a      	mov	r2, r1
 800472c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <BSP_TS_GetState+0x2f0>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b298      	uxth	r0, r3
 8004734:	f107 010c 	add.w	r1, r7, #12
 8004738:	f107 0210 	add.w	r2, r7, #16
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	460b      	mov	r3, r1
 8004744:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004746:	f7fc f919 	bl	800097c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	b2d9      	uxtb	r1, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004752:	4413      	add	r3, r2
 8004754:	3316      	adds	r3, #22
 8004756:	460a      	mov	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	b2d9      	uxtb	r1, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004762:	4413      	add	r3, r2
 8004764:	3320      	adds	r3, #32
 8004766:	460a      	mov	r2, r1
 8004768:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d835      	bhi.n	80047dc <BSP_TS_GetState+0x340>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <BSP_TS_GetState+0x2dc>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047b3 	.word	0x080047b3
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047cf 	.word	0x080047cf
 8004788:	20000ce8 	.word	0x20000ce8
 800478c:	20000cf1 	.word	0x20000cf1
 8004790:	20000cf0 	.word	0x20000cf0
 8004794:	20000cf4 	.word	0x20000cf4
 8004798:	20000d08 	.word	0x20000d08
 800479c:	20000cec 	.word	0x20000cec
 80047a0:	20000cee 	.word	0x20000cee
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	4413      	add	r3, r2
 80047aa:	331b      	adds	r3, #27
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
          break;
 80047b0:	e018      	b.n	80047e4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	4413      	add	r3, r2
 80047b8:	331b      	adds	r3, #27
 80047ba:	2202      	movs	r2, #2
 80047bc:	701a      	strb	r2, [r3, #0]
          break;
 80047be:	e011      	b.n	80047e4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	4413      	add	r3, r2
 80047c6:	331b      	adds	r3, #27
 80047c8:	2203      	movs	r2, #3
 80047ca:	701a      	strb	r2, [r3, #0]
          break;
 80047cc:	e00a      	b.n	80047e4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d2:	4413      	add	r3, r2
 80047d4:	331b      	adds	r3, #27
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
          break;
 80047da:	e003      	b.n	80047e4 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80047e2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	3301      	adds	r3, #1
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f2:	4293      	cmp	r3, r2
 80047f4:	f4ff ae73 	bcc.w	80044de <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f809 	bl	8004810 <BSP_TS_Get_GestureId>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004804:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004808:	4618      	mov	r0, r3
 800480a:	3754      	adds	r7, #84	; 0x54
 800480c:	46bd      	mov	sp, r7
 800480e:	bd90      	pop	{r4, r7, pc}

08004810 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <BSP_TS_Get_GestureId+0x100>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f107 0208 	add.w	r2, r7, #8
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7fc f88c 	bl	800094a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b49      	cmp	r3, #73	; 0x49
 8004836:	d05e      	beq.n	80048f6 <BSP_TS_Get_GestureId+0xe6>
 8004838:	2b49      	cmp	r3, #73	; 0x49
 800483a:	d860      	bhi.n	80048fe <BSP_TS_Get_GestureId+0xee>
 800483c:	2b1c      	cmp	r3, #28
 800483e:	d83f      	bhi.n	80048c0 <BSP_TS_Get_GestureId+0xb0>
 8004840:	2b1c      	cmp	r3, #28
 8004842:	d85c      	bhi.n	80048fe <BSP_TS_Get_GestureId+0xee>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <BSP_TS_Get_GestureId+0x3c>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	080048c7 	.word	0x080048c7
 8004850:	080048ff 	.word	0x080048ff
 8004854:	080048ff 	.word	0x080048ff
 8004858:	080048ff 	.word	0x080048ff
 800485c:	080048ff 	.word	0x080048ff
 8004860:	080048ff 	.word	0x080048ff
 8004864:	080048ff 	.word	0x080048ff
 8004868:	080048ff 	.word	0x080048ff
 800486c:	080048ff 	.word	0x080048ff
 8004870:	080048ff 	.word	0x080048ff
 8004874:	080048ff 	.word	0x080048ff
 8004878:	080048ff 	.word	0x080048ff
 800487c:	080048ff 	.word	0x080048ff
 8004880:	080048ff 	.word	0x080048ff
 8004884:	080048ff 	.word	0x080048ff
 8004888:	080048ff 	.word	0x080048ff
 800488c:	080048cf 	.word	0x080048cf
 8004890:	080048ff 	.word	0x080048ff
 8004894:	080048ff 	.word	0x080048ff
 8004898:	080048ff 	.word	0x080048ff
 800489c:	080048d7 	.word	0x080048d7
 80048a0:	080048ff 	.word	0x080048ff
 80048a4:	080048ff 	.word	0x080048ff
 80048a8:	080048ff 	.word	0x080048ff
 80048ac:	080048df 	.word	0x080048df
 80048b0:	080048ff 	.word	0x080048ff
 80048b4:	080048ff 	.word	0x080048ff
 80048b8:	080048ff 	.word	0x080048ff
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d014      	beq.n	80048ee <BSP_TS_Get_GestureId+0xde>
 80048c4:	e01b      	b.n	80048fe <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048cc:	e01a      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048d4:	e016      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048dc:	e012      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048e4:	e00e      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2204      	movs	r2, #4
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048ec:	e00a      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2205      	movs	r2, #5
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048f4:	e006      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2206      	movs	r2, #6
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80048fc:	e002      	b.n	8004904 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000cf1 	.word	0x20000cf1

08004914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_MspInit+0x4c>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_MspInit+0x4c>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <HAL_MspInit+0x4c>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_MspInit+0x4c>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <HAL_MspInit+0x4c>)
 8004938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493c:	6453      	str	r3, [r2, #68]	; 0x44
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_MspInit+0x4c>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	210f      	movs	r1, #15
 800494e:	f06f 0001 	mvn.w	r0, #1
 8004952:	f001 fd1f 	bl	8006394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800496c:	f107 031c 	add.w	r3, r7, #28
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <HAL_ADC_MspInit+0x118>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d12c      	bne.n	80049e0 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004986:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a3d      	ldr	r2, [pc, #244]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	4a37      	ldr	r2, [pc, #220]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6313      	str	r3, [r2, #48]	; 0x30
 80049aa:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ba:	2303      	movs	r3, #3
 80049bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c2:	f107 031c 	add.w	r3, r7, #28
 80049c6:	4619      	mov	r1, r3
 80049c8:	482e      	ldr	r0, [pc, #184]	; (8004a84 <HAL_ADC_MspInit+0x120>)
 80049ca:	f002 fbd9 	bl	8007180 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2107      	movs	r1, #7
 80049d2:	2012      	movs	r0, #18
 80049d4:	f001 fcde 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80049d8:	2012      	movs	r0, #18
 80049da:	f001 fcf7 	bl	80063cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80049de:	e049      	b.n	8004a74 <HAL_ADC_MspInit+0x110>
  else if(hadc->Instance==ADC3)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <HAL_ADC_MspInit+0x124>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d144      	bne.n	8004a74 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80049ea:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f4:	6453      	str	r3, [r2, #68]	; 0x44
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a08:	f043 0320 	orr.w	r3, r3, #32
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1a:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6313      	str	r3, [r2, #48]	; 0x30
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <HAL_ADC_MspInit+0x11c>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004a32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4619      	mov	r1, r3
 8004a46:	4811      	ldr	r0, [pc, #68]	; (8004a8c <HAL_ADC_MspInit+0x128>)
 8004a48:	f002 fb9a 	bl	8007180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a50:	2303      	movs	r3, #3
 8004a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a58:	f107 031c 	add.w	r3, r7, #28
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4809      	ldr	r0, [pc, #36]	; (8004a84 <HAL_ADC_MspInit+0x120>)
 8004a60:	f002 fb8e 	bl	8007180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8004a64:	2200      	movs	r2, #0
 8004a66:	2107      	movs	r1, #7
 8004a68:	2012      	movs	r0, #18
 8004a6a:	f001 fc93 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004a6e:	2012      	movs	r0, #18
 8004a70:	f001 fcac 	bl	80063cc <HAL_NVIC_EnableIRQ>
}
 8004a74:	bf00      	nop
 8004a76:	3730      	adds	r7, #48	; 0x30
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40012000 	.word	0x40012000
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40020000 	.word	0x40020000
 8004a88:	40012200 	.word	0x40012200
 8004a8c:	40021400 	.word	0x40021400

08004a90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <HAL_DAC_MspInit+0x84>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12b      	bne.n	8004b0a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004abc:	6413      	str	r3, [r2, #64]	; 0x40
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_DAC_MspInit+0x88>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	4619      	mov	r1, r3
 8004af4:	4809      	ldr	r0, [pc, #36]	; (8004b1c <HAL_DAC_MspInit+0x8c>)
 8004af6:	f002 fb43 	bl	8007180 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	210f      	movs	r1, #15
 8004afe:	2036      	movs	r0, #54	; 0x36
 8004b00:	f001 fc48 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b04:	2036      	movs	r0, #54	; 0x36
 8004b06:	f001 fc61 	bl	80063cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004b0a:	bf00      	nop
 8004b0c:	3728      	adds	r7, #40	; 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40007400 	.word	0x40007400
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40020000 	.word	0x40020000

08004b20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <HAL_DMA2D_MspInit+0x44>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d113      	bne.n	8004b5a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <HAL_DMA2D_MspInit+0x48>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a0c      	ldr	r2, [pc, #48]	; (8004b68 <HAL_DMA2D_MspInit+0x48>)
 8004b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <HAL_DMA2D_MspInit+0x48>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2105      	movs	r1, #5
 8004b4e:	205a      	movs	r0, #90	; 0x5a
 8004b50:	f001 fc20 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004b54:	205a      	movs	r0, #90	; 0x5a
 8004b56:	f001 fc39 	bl	80063cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	4002b000 	.word	0x4002b000
 8004b68:	40023800 	.word	0x40023800

08004b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0ac      	sub	sp, #176	; 0xb0
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b84:	f107 0318 	add.w	r3, r7, #24
 8004b88:	2284      	movs	r2, #132	; 0x84
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f00a fd1f 	bl	800f5d0 <memset>
  if(hi2c->Instance==I2C1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a44      	ldr	r2, [pc, #272]	; (8004ca8 <HAL_I2C_MspInit+0x13c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d13d      	bne.n	8004c18 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ba6:	f107 0318 	add.w	r3, r7, #24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f004 fca0 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004bb6:	f7fe f863 	bl	8002c80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bba:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bda:	2312      	movs	r3, #18
 8004bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be6:	2303      	movs	r3, #3
 8004be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bec:	2304      	movs	r3, #4
 8004bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	482d      	ldr	r0, [pc, #180]	; (8004cb0 <HAL_I2C_MspInit+0x144>)
 8004bfa:	f002 fac1 	bl	8007180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a2a      	ldr	r2, [pc, #168]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0a:	4b28      	ldr	r3, [pc, #160]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004c16:	e042      	b.n	8004c9e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <HAL_I2C_MspInit+0x148>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d13d      	bne.n	8004c9e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c2e:	f107 0318 	add.w	r3, r7, #24
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 fc5c 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004c3e:	f7fe f81f 	bl	8002c80 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a19      	ldr	r2, [pc, #100]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004c5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c62:	2312      	movs	r3, #18
 8004c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c74:	2304      	movs	r3, #4
 8004c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004c7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c7e:	4619      	mov	r1, r3
 8004c80:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <HAL_I2C_MspInit+0x14c>)
 8004c82:	f002 fa7d 	bl	8007180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_I2C_MspInit+0x140>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
}
 8004c9e:	bf00      	nop
 8004ca0:	37b0      	adds	r7, #176	; 0xb0
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40005400 	.word	0x40005400
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40020400 	.word	0x40020400
 8004cb4:	40005c00 	.word	0x40005c00
 8004cb8:	40021c00 	.word	0x40021c00

08004cbc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_I2C_MspDeInit+0x64>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d110      	bne.n	8004cf0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_I2C_MspDeInit+0x68>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <HAL_I2C_MspDeInit+0x68>)
 8004cd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cde:	4812      	ldr	r0, [pc, #72]	; (8004d28 <HAL_I2C_MspDeInit+0x6c>)
 8004ce0:	f002 fbfa 	bl	80074d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ce8:	480f      	ldr	r0, [pc, #60]	; (8004d28 <HAL_I2C_MspDeInit+0x6c>)
 8004cea:	f002 fbf5 	bl	80074d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004cee:	e013      	b.n	8004d18 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_I2C_MspDeInit+0x70>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10e      	bne.n	8004d18 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_I2C_MspDeInit+0x68>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <HAL_I2C_MspDeInit+0x68>)
 8004d00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	4809      	ldr	r0, [pc, #36]	; (8004d30 <HAL_I2C_MspDeInit+0x74>)
 8004d0a:	f002 fbe5 	bl	80074d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d12:	4807      	ldr	r0, [pc, #28]	; (8004d30 <HAL_I2C_MspDeInit+0x74>)
 8004d14:	f002 fbe0 	bl	80074d8 <HAL_GPIO_DeInit>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40005400 	.word	0x40005400
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	40005c00 	.word	0x40005c00
 8004d30:	40021c00 	.word	0x40021c00

08004d34 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0ae      	sub	sp, #184	; 0xb8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d4c:	f107 0320 	add.w	r3, r7, #32
 8004d50:	2284      	movs	r2, #132	; 0x84
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f00a fc3b 	bl	800f5d0 <memset>
  if(hltdc->Instance==LTDC)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6f      	ldr	r2, [pc, #444]	; (8004f1c <HAL_LTDC_MspInit+0x1e8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	f040 80d6 	bne.w	8004f12 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004d66:	2308      	movs	r3, #8
 8004d68:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004d6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004d70:	2305      	movs	r3, #5
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004d74:	2302      	movs	r3, #2
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d84:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d86:	f107 0320 	add.w	r3, r7, #32
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f004 fbb0 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8004d96:	f7fd ff73 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004d9a:	4b61      	ldr	r3, [pc, #388]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a60      	ldr	r2, [pc, #384]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b5e      	ldr	r3, [pc, #376]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004db2:	4b5b      	ldr	r3, [pc, #364]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	4a5a      	ldr	r2, [pc, #360]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004db8:	f043 0310 	orr.w	r3, r3, #16
 8004dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbe:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004dca:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b52      	ldr	r3, [pc, #328]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004de2:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	4a4e      	ldr	r2, [pc, #312]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dec:	6313      	str	r3, [r2, #48]	; 0x30
 8004dee:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004dfa:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4a48      	ldr	r2, [pc, #288]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	6313      	str	r3, [r2, #48]	; 0x30
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004e12:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	4a42      	ldr	r2, [pc, #264]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1e:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <HAL_LTDC_MspInit+0x1ec>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e42:	230e      	movs	r3, #14
 8004e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4835      	ldr	r0, [pc, #212]	; (8004f24 <HAL_LTDC_MspInit+0x1f0>)
 8004e50:	f002 f996 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004e54:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e6e:	230e      	movs	r3, #14
 8004e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004e74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	482b      	ldr	r0, [pc, #172]	; (8004f28 <HAL_LTDC_MspInit+0x1f4>)
 8004e7c:	f002 f980 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004e80:	23f7      	movs	r3, #247	; 0xf7
 8004e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e86:	2302      	movs	r3, #2
 8004e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e98:	230e      	movs	r3, #14
 8004e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004e9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4821      	ldr	r0, [pc, #132]	; (8004f2c <HAL_LTDC_MspInit+0x1f8>)
 8004ea6:	f002 f96b 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004ec4:	2309      	movs	r3, #9
 8004ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004eca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4817      	ldr	r0, [pc, #92]	; (8004f30 <HAL_LTDC_MspInit+0x1fc>)
 8004ed2:	f002 f955 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004ed6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ef0:	230e      	movs	r3, #14
 8004ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ef6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004efa:	4619      	mov	r1, r3
 8004efc:	480d      	ldr	r0, [pc, #52]	; (8004f34 <HAL_LTDC_MspInit+0x200>)
 8004efe:	f002 f93f 	bl	8007180 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2105      	movs	r1, #5
 8004f06:	2058      	movs	r0, #88	; 0x58
 8004f08:	f001 fa44 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004f0c:	2058      	movs	r0, #88	; 0x58
 8004f0e:	f001 fa5d 	bl	80063cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004f12:	bf00      	nop
 8004f14:	37b8      	adds	r7, #184	; 0xb8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40016800 	.word	0x40016800
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40022400 	.word	0x40022400
 8004f2c:	40022800 	.word	0x40022800
 8004f30:	40021800 	.word	0x40021800
 8004f34:	40022000 	.word	0x40022000

08004f38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b0a4      	sub	sp, #144	; 0x90
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	2284      	movs	r2, #132	; 0x84
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f00a fb41 	bl	800f5d0 <memset>
  if(hrtc->Instance==RTC)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <HAL_RTC_MspInit+0x54>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d114      	bne.n	8004f82 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 fac2 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004f72:	f7fd fe85 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RTC_MspInit+0x58>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a05      	ldr	r2, [pc, #20]	; (8004f90 <HAL_RTC_MspInit+0x58>)
 8004f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004f82:	bf00      	nop
 8004f84:	3790      	adds	r7, #144	; 0x90
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40002800 	.word	0x40002800
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a25      	ldr	r2, [pc, #148]	; (8005048 <HAL_SPI_MspInit+0xb4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d144      	bne.n	8005040 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc2:	4b22      	ldr	r3, [pc, #136]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <HAL_SPI_MspInit+0xb8>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004ffe:	2303      	movs	r3, #3
 8005000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005002:	2302      	movs	r3, #2
 8005004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500a:	2303      	movs	r3, #3
 800500c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800500e:	2305      	movs	r3, #5
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	4619      	mov	r1, r3
 8005018:	480d      	ldr	r0, [pc, #52]	; (8005050 <HAL_SPI_MspInit+0xbc>)
 800501a:	f002 f8b1 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800501e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005024:	2302      	movs	r3, #2
 8005026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502c:	2300      	movs	r3, #0
 800502e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005030:	2305      	movs	r3, #5
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	4619      	mov	r1, r3
 800503a:	4806      	ldr	r0, [pc, #24]	; (8005054 <HAL_SPI_MspInit+0xc0>)
 800503c:	f002 f8a0 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005040:	bf00      	nop
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40003800 	.word	0x40003800
 800504c:	40023800 	.word	0x40023800
 8005050:	40022000 	.word	0x40022000
 8005054:	40020400 	.word	0x40020400

08005058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08e      	sub	sp, #56	; 0x38
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <HAL_TIM_Base_MspInit+0x10c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	4a3a      	ldr	r2, [pc, #232]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6453      	str	r3, [r2, #68]	; 0x44
 8005086:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	623b      	str	r3, [r7, #32]
 8005090:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005092:	e062      	b.n	800515a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509c:	d10c      	bne.n	80050b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a31      	ldr	r2, [pc, #196]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	69fb      	ldr	r3, [r7, #28]
}
 80050b6:	e050      	b.n	800515a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <HAL_TIM_Base_MspInit+0x114>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10c      	bne.n	80050dc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050c2:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a28      	ldr	r2, [pc, #160]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b26      	ldr	r3, [pc, #152]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
}
 80050da:	e03e      	b.n	800515a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_TIM_Base_MspInit+0x118>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10c      	bne.n	8005100 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050ec:	f043 0308 	orr.w	r3, r3, #8
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697b      	ldr	r3, [r7, #20]
}
 80050fe:	e02c      	b.n	800515a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <HAL_TIM_Base_MspInit+0x11c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d127      	bne.n	800515a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	4a16      	ldr	r2, [pc, #88]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	6453      	str	r3, [r2, #68]	; 0x44
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6313      	str	r3, [r2, #48]	; 0x30
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <HAL_TIM_Base_MspInit+0x110>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800513a:	2304      	movs	r3, #4
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513e:	2302      	movs	r3, #2
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	2300      	movs	r3, #0
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005146:	2300      	movs	r3, #0
 8005148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800514a:	2303      	movs	r3, #3
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	4619      	mov	r1, r3
 8005154:	4808      	ldr	r0, [pc, #32]	; (8005178 <HAL_TIM_Base_MspInit+0x120>)
 8005156:	f002 f813 	bl	8007180 <HAL_GPIO_Init>
}
 800515a:	bf00      	nop
 800515c:	3738      	adds	r7, #56	; 0x38
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40023800 	.word	0x40023800
 800516c:	40000400 	.word	0x40000400
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40010400 	.word	0x40010400
 8005178:	40022000 	.word	0x40022000

0800517c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0b0      	sub	sp, #192	; 0xc0
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005198:	2284      	movs	r2, #132	; 0x84
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f00a fa17 	bl	800f5d0 <memset>
  if(huart->Instance==UART7)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a79      	ldr	r2, [pc, #484]	; (800538c <HAL_UART_MspInit+0x210>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d13d      	bne.n	8005228 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80051ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051bc:	4618      	mov	r0, r3
 80051be:	f004 f997 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80051c8:	f7fd fd5a 	bl	8002c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80051cc:	4b70      	ldr	r3, [pc, #448]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	4a6f      	ldr	r2, [pc, #444]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	6413      	str	r3, [r2, #64]	; 0x40
 80051d8:	4b6d      	ldr	r3, [pc, #436]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051e4:	4b6a      	ldr	r3, [pc, #424]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	4a69      	ldr	r2, [pc, #420]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	6313      	str	r3, [r2, #48]	; 0x30
 80051f0:	4b67      	ldr	r3, [pc, #412]	; (8005390 <HAL_UART_MspInit+0x214>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80051fc:	23c0      	movs	r3, #192	; 0xc0
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800520e:	2303      	movs	r3, #3
 8005210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005214:	2308      	movs	r3, #8
 8005216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800521a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800521e:	4619      	mov	r1, r3
 8005220:	485c      	ldr	r0, [pc, #368]	; (8005394 <HAL_UART_MspInit+0x218>)
 8005222:	f001 ffad 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005226:	e0ac      	b.n	8005382 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5a      	ldr	r2, [pc, #360]	; (8005398 <HAL_UART_MspInit+0x21c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d165      	bne.n	80052fe <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005236:	2300      	movs	r3, #0
 8005238:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800523a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800523e:	4618      	mov	r0, r3
 8005240:	f004 f956 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800524a:	f7fd fd19 	bl	8002c80 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800524e:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	4a4f      	ldr	r2, [pc, #316]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005254:	f043 0310 	orr.w	r3, r3, #16
 8005258:	6453      	str	r3, [r2, #68]	; 0x44
 800525a:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <HAL_UART_MspInit+0x214>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005266:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_UART_MspInit+0x214>)
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	6313      	str	r3, [r2, #48]	; 0x30
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800527e:	4b44      	ldr	r3, [pc, #272]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	4a43      	ldr	r2, [pc, #268]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6313      	str	r3, [r2, #48]	; 0x30
 800528a:	4b41      	ldr	r3, [pc, #260]	; (8005390 <HAL_UART_MspInit+0x214>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529c:	2302      	movs	r3, #2
 800529e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052ae:	2307      	movs	r3, #7
 80052b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80052b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052b8:	4619      	mov	r1, r3
 80052ba:	4838      	ldr	r0, [pc, #224]	; (800539c <HAL_UART_MspInit+0x220>)
 80052bc:	f001 ff60 	bl	8007180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80052c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052da:	2307      	movs	r3, #7
 80052dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80052e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052e4:	4619      	mov	r1, r3
 80052e6:	482e      	ldr	r0, [pc, #184]	; (80053a0 <HAL_UART_MspInit+0x224>)
 80052e8:	f001 ff4a 	bl	8007180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80052ec:	2200      	movs	r2, #0
 80052ee:	2107      	movs	r1, #7
 80052f0:	2025      	movs	r0, #37	; 0x25
 80052f2:	f001 f84f 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052f6:	2025      	movs	r0, #37	; 0x25
 80052f8:	f001 f868 	bl	80063cc <HAL_NVIC_EnableIRQ>
}
 80052fc:	e041      	b.n	8005382 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <HAL_UART_MspInit+0x228>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d13c      	bne.n	8005382 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800530e:	2300      	movs	r3, #0
 8005310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005318:	4618      	mov	r0, r3
 800531a:	f004 f8e9 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8005324:	f7fd fcac 	bl	8002c80 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005328:	4b19      	ldr	r3, [pc, #100]	; (8005390 <HAL_UART_MspInit+0x214>)
 800532a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532c:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_UART_MspInit+0x214>)
 800532e:	f043 0320 	orr.w	r3, r3, #32
 8005332:	6453      	str	r3, [r2, #68]	; 0x44
 8005334:	4b16      	ldr	r3, [pc, #88]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4a12      	ldr	r2, [pc, #72]	; (8005390 <HAL_UART_MspInit+0x214>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6313      	str	r3, [r2, #48]	; 0x30
 800534c:	4b10      	ldr	r3, [pc, #64]	; (8005390 <HAL_UART_MspInit+0x214>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005358:	23c0      	movs	r3, #192	; 0xc0
 800535a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535e:	2302      	movs	r3, #2
 8005360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005364:	2300      	movs	r3, #0
 8005366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536a:	2303      	movs	r3, #3
 800536c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005370:	2308      	movs	r3, #8
 8005372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005376:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800537a:	4619      	mov	r1, r3
 800537c:	480a      	ldr	r0, [pc, #40]	; (80053a8 <HAL_UART_MspInit+0x22c>)
 800537e:	f001 feff 	bl	8007180 <HAL_GPIO_Init>
}
 8005382:	bf00      	nop
 8005384:	37c0      	adds	r7, #192	; 0xc0
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40007800 	.word	0x40007800
 8005390:	40023800 	.word	0x40023800
 8005394:	40021400 	.word	0x40021400
 8005398:	40011000 	.word	0x40011000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020000 	.word	0x40020000
 80053a4:	40011400 	.word	0x40011400
 80053a8:	40020800 	.word	0x40020800

080053ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_FMC_MspInit+0x100>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d16d      	bne.n	80054a4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80053c8:	4b38      	ldr	r3, [pc, #224]	; (80054ac <HAL_FMC_MspInit+0x100>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <HAL_FMC_MspInit+0x104>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	4a37      	ldr	r2, [pc, #220]	; (80054b0 <HAL_FMC_MspInit+0x104>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6393      	str	r3, [r2, #56]	; 0x38
 80053da:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <HAL_FMC_MspInit+0x104>)
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80053e6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80053ea:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ec:	2302      	movs	r3, #2
 80053ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f4:	2303      	movs	r3, #3
 80053f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80053f8:	230c      	movs	r3, #12
 80053fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	482c      	ldr	r0, [pc, #176]	; (80054b4 <HAL_FMC_MspInit+0x108>)
 8005402:	f001 febd 	bl	8007180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005406:	f248 1333 	movw	r3, #33075	; 0x8133
 800540a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540c:	2302      	movs	r3, #2
 800540e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005414:	2303      	movs	r3, #3
 8005416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005418:	230c      	movs	r3, #12
 800541a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4825      	ldr	r0, [pc, #148]	; (80054b8 <HAL_FMC_MspInit+0x10c>)
 8005422:	f001 fead 	bl	8007180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005426:	f24c 7303 	movw	r3, #50947	; 0xc703
 800542a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542c:	2302      	movs	r3, #2
 800542e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005434:	2303      	movs	r3, #3
 8005436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005438:	230c      	movs	r3, #12
 800543a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	4619      	mov	r1, r3
 8005440:	481e      	ldr	r0, [pc, #120]	; (80054bc <HAL_FMC_MspInit+0x110>)
 8005442:	f001 fe9d 	bl	8007180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005446:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800544a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544c:	2302      	movs	r3, #2
 800544e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005454:	2303      	movs	r3, #3
 8005456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005458:	230c      	movs	r3, #12
 800545a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4817      	ldr	r0, [pc, #92]	; (80054c0 <HAL_FMC_MspInit+0x114>)
 8005462:	f001 fe8d 	bl	8007180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005466:	2328      	movs	r3, #40	; 0x28
 8005468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005476:	230c      	movs	r3, #12
 8005478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4811      	ldr	r0, [pc, #68]	; (80054c4 <HAL_FMC_MspInit+0x118>)
 8005480:	f001 fe7e 	bl	8007180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005484:	2308      	movs	r3, #8
 8005486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005488:	2302      	movs	r3, #2
 800548a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005490:	2303      	movs	r3, #3
 8005492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005494:	230c      	movs	r3, #12
 8005496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005498:	1d3b      	adds	r3, r7, #4
 800549a:	4619      	mov	r1, r3
 800549c:	480a      	ldr	r0, [pc, #40]	; (80054c8 <HAL_FMC_MspInit+0x11c>)
 800549e:	f001 fe6f 	bl	8007180 <HAL_GPIO_Init>
 80054a2:	e000      	b.n	80054a6 <HAL_FMC_MspInit+0xfa>
    return;
 80054a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000d1c 	.word	0x20000d1c
 80054b0:	40023800 	.word	0x40023800
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40021800 	.word	0x40021800
 80054bc:	40020c00 	.word	0x40020c00
 80054c0:	40021400 	.word	0x40021400
 80054c4:	40021c00 	.word	0x40021c00
 80054c8:	40020800 	.word	0x40020800

080054cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80054d4:	f7ff ff6a 	bl	80053ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	; 0x30
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	2036      	movs	r0, #54	; 0x36
 80054f6:	f000 ff4d 	bl	8006394 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054fa:	2036      	movs	r0, #54	; 0x36
 80054fc:	f000 ff66 	bl	80063cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005500:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <HAL_InitTick+0xa0>)
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <HAL_InitTick+0xa0>)
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	6413      	str	r3, [r2, #64]	; 0x40
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_InitTick+0xa0>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005518:	f107 0210 	add.w	r2, r7, #16
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f003 ffb2 	bl	800948c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005528:	f003 ff88 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800552c:	4603      	mov	r3, r0
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_InitTick+0xa4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0c9b      	lsrs	r3, r3, #18
 800553c:	3b01      	subs	r3, #1
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_InitTick+0xa8>)
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <HAL_InitTick+0xac>)
 8005544:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_InitTick+0xa8>)
 8005548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800554c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_InitTick+0xa8>)
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <HAL_InitTick+0xa8>)
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_InitTick+0xa8>)
 800555c:	2200      	movs	r2, #0
 800555e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <HAL_InitTick+0xa8>)
 8005562:	f005 f8c9 	bl	800a6f8 <HAL_TIM_Base_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800556c:	4806      	ldr	r0, [pc, #24]	; (8005588 <HAL_InitTick+0xa8>)
 800556e:	f005 f91b 	bl	800a7a8 <HAL_TIM_Base_Start_IT>
 8005572:	4603      	mov	r3, r0
 8005574:	e000      	b.n	8005578 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	431bde83 	.word	0x431bde83
 8005588:	20000d20 	.word	0x20000d20
 800558c:	40001000 	.word	0x40001000

08005590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005594:	e7fe      	b.n	8005594 <NMI_Handler+0x4>

08005596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <HardFault_Handler+0x4>

0800559c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <MemManage_Handler+0x4>

080055a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055a6:	e7fe      	b.n	80055a6 <BusFault_Handler+0x4>

080055a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <UsageFault_Handler+0x4>

080055ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80055c0:	4803      	ldr	r0, [pc, #12]	; (80055d0 <ADC_IRQHandler+0x14>)
 80055c2:	f000 fa9a 	bl	8005afa <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80055c6:	4803      	ldr	r0, [pc, #12]	; (80055d4 <ADC_IRQHandler+0x18>)
 80055c8:	f000 fa97 	bl	8005afa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80055cc:	bf00      	nop
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000414 	.word	0x20000414
 80055d4:	2000045c 	.word	0x2000045c

080055d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055dc:	4802      	ldr	r0, [pc, #8]	; (80055e8 <USART1_IRQHandler+0x10>)
 80055de:	f005 fdef 	bl	800b1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200008bc 	.word	0x200008bc

080055ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <TIM6_DAC_IRQHandler+0x20>)
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80055fa:	4804      	ldr	r0, [pc, #16]	; (800560c <TIM6_DAC_IRQHandler+0x20>)
 80055fc:	f000 ff16 	bl	800642c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005600:	4803      	ldr	r0, [pc, #12]	; (8005610 <TIM6_DAC_IRQHandler+0x24>)
 8005602:	f005 f949 	bl	800a898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200004a4 	.word	0x200004a4
 8005610:	20000d20 	.word	0x20000d20

08005614 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005618:	4802      	ldr	r0, [pc, #8]	; (8005624 <LTDC_IRQHandler+0x10>)
 800561a:	f002 ffa5 	bl	8008568 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000590 	.word	0x20000590

08005628 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <DMA2D_IRQHandler+0x10>)
 800562e:	f001 fb69 	bl	8006d04 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200004b8 	.word	0x200004b8

0800563c <_sbrk>:
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	4a14      	ldr	r2, [pc, #80]	; (8005698 <_sbrk+0x5c>)
 8005646:	4b15      	ldr	r3, [pc, #84]	; (800569c <_sbrk+0x60>)
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <_sbrk+0x64>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <_sbrk+0x22>
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <_sbrk+0x64>)
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <_sbrk+0x68>)
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <_sbrk+0x64>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d207      	bcs.n	800567c <_sbrk+0x40>
 800566c:	f009 ff76 	bl	800f55c <__errno>
 8005670:	4603      	mov	r3, r0
 8005672:	220c      	movs	r2, #12
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e009      	b.n	8005690 <_sbrk+0x54>
 800567c:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <_sbrk+0x64>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <_sbrk+0x64>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4413      	add	r3, r2
 800568a:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <_sbrk+0x64>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20050000 	.word	0x20050000
 800569c:	00000400 	.word	0x00000400
 80056a0:	20000d6c 	.word	0x20000d6c
 80056a4:	20004ad0 	.word	0x20004ad0

080056a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <SystemInit+0x20>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <SystemInit+0x20>)
 80056b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	e000ed00 	.word	0xe000ed00

080056cc <Reset_Handler>:
 80056cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005704 <LoopFillZerobss+0x12>
 80056d0:	480d      	ldr	r0, [pc, #52]	; (8005708 <LoopFillZerobss+0x16>)
 80056d2:	490e      	ldr	r1, [pc, #56]	; (800570c <LoopFillZerobss+0x1a>)
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <LoopFillZerobss+0x1e>)
 80056d6:	2300      	movs	r3, #0
 80056d8:	e002      	b.n	80056e0 <LoopCopyDataInit>

080056da <CopyDataInit>:
 80056da:	58d4      	ldr	r4, [r2, r3]
 80056dc:	50c4      	str	r4, [r0, r3]
 80056de:	3304      	adds	r3, #4

080056e0 <LoopCopyDataInit>:
 80056e0:	18c4      	adds	r4, r0, r3
 80056e2:	428c      	cmp	r4, r1
 80056e4:	d3f9      	bcc.n	80056da <CopyDataInit>
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <LoopFillZerobss+0x22>)
 80056e8:	4c0b      	ldr	r4, [pc, #44]	; (8005718 <LoopFillZerobss+0x26>)
 80056ea:	2300      	movs	r3, #0
 80056ec:	e001      	b.n	80056f2 <LoopFillZerobss>

080056ee <FillZerobss>:
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	3204      	adds	r2, #4

080056f2 <LoopFillZerobss>:
 80056f2:	42a2      	cmp	r2, r4
 80056f4:	d3fb      	bcc.n	80056ee <FillZerobss>
 80056f6:	f7ff ffd7 	bl	80056a8 <SystemInit>
 80056fa:	f009 ff35 	bl	800f568 <__libc_init_array>
 80056fe:	f7fb fa15 	bl	8000b2c <main>
 8005702:	4770      	bx	lr
 8005704:	20050000 	.word	0x20050000
 8005708:	20000000 	.word	0x20000000
 800570c:	2000013c 	.word	0x2000013c
 8005710:	08071ad4 	.word	0x08071ad4
 8005714:	2000013c 	.word	0x2000013c
 8005718:	20004ad0 	.word	0x20004ad0

0800571c <CAN1_RX0_IRQHandler>:
 800571c:	e7fe      	b.n	800571c <CAN1_RX0_IRQHandler>

0800571e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005722:	2003      	movs	r0, #3
 8005724:	f000 fe2b 	bl	800637e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005728:	200f      	movs	r0, #15
 800572a:	f7ff fed9 	bl	80054e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800572e:	f7ff f8f1 	bl	8004914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_IncTick+0x20>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_IncTick+0x24>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4413      	add	r3, r2
 8005748:	4a04      	ldr	r2, [pc, #16]	; (800575c <HAL_IncTick+0x24>)
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	200000d0 	.word	0x200000d0
 800575c:	20000d70 	.word	0x20000d70

08005760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return uwTick;
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <HAL_GetTick+0x14>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000d70 	.word	0x20000d70

08005778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005780:	f7ff ffee 	bl	8005760 <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d005      	beq.n	800579e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_Delay+0x44>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800579e:	bf00      	nop
 80057a0:	f7ff ffde 	bl	8005760 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d8f7      	bhi.n	80057a0 <HAL_Delay+0x28>
  {
  }
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200000d0 	.word	0x200000d0

080057c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e031      	b.n	800583a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff f8c0 	bl	8004964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d116      	bne.n	800582c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_ADC_Init+0x84>)
 8005804:	4013      	ands	r3, r2
 8005806:	f043 0202 	orr.w	r2, r3, #2
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fc04 	bl	800601c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
 800582a:	e001      	b.n	8005830 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	ffffeefd 	.word	0xffffeefd

08005848 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_ADC_Start+0x1a>
 800585e:	2302      	movs	r3, #2
 8005860:	e0ad      	b.n	80059be <HAL_ADC_Start+0x176>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d018      	beq.n	80058aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_ADC_Start+0x184>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a50      	ldr	r2, [pc, #320]	; (80059d0 <HAL_ADC_Start+0x188>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	0c9a      	lsrs	r2, r3, #18
 8005894:	4613      	mov	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	4413      	add	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800589c:	e002      	b.n	80058a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f9      	bne.n	800589e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d175      	bne.n	80059a4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <HAL_ADC_Start+0x18c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	d106      	bne.n	8005902 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f023 0206 	bic.w	r2, r3, #6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	645a      	str	r2, [r3, #68]	; 0x44
 8005900:	e002      	b.n	8005908 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005918:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800591a:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <HAL_ADC_Start+0x190>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d143      	bne.n	80059bc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	e03a      	b.n	80059bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a24      	ldr	r2, [pc, #144]	; (80059dc <HAL_ADC_Start+0x194>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d10e      	bne.n	800596e <HAL_ADC_Start+0x126>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800596c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <HAL_ADC_Start+0x190>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	d120      	bne.n	80059bc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_ADC_Start+0x198>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d11b      	bne.n	80059bc <HAL_ADC_Start+0x174>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d114      	bne.n	80059bc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	e00b      	b.n	80059bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f043 0210 	orr.w	r2, r3, #16
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	f043 0201 	orr.w	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	200000c8 	.word	0x200000c8
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	fffff8fe 	.word	0xfffff8fe
 80059d8:	40012300 	.word	0x40012300
 80059dc:	40012000 	.word	0x40012000
 80059e0:	40012200 	.word	0x40012200

080059e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a00:	d113      	bne.n	8005a2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a10:	d10b      	bne.n	8005a2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e063      	b.n	8005af2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005a2a:	f7ff fe99 	bl	8005760 <HAL_GetTick>
 8005a2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a30:	e021      	b.n	8005a76 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d01d      	beq.n	8005a76 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <HAL_ADC_PollForConversion+0x6c>
 8005a40:	f7ff fe8e 	bl	8005760 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d212      	bcs.n	8005a76 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d00b      	beq.n	8005a76 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e03d      	b.n	8005af2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d1d6      	bne.n	8005a32 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0212 	mvn.w	r2, #18
 8005a8c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d123      	bne.n	8005af0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d11f      	bne.n	8005af0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d111      	bne.n	8005af0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f043 0201 	orr.w	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d049      	beq.n	8005bc4 <HAL_ADC_IRQHandler+0xca>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d046      	beq.n	8005bc4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d105      	bne.n	8005b4e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d12b      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d127      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d119      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0220 	bic.w	r2, r2, #32
 8005b8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f043 0201 	orr.w	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8bd 	bl	8005d34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0212 	mvn.w	r2, #18
 8005bc2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d057      	beq.n	8005c8a <HAL_ADC_IRQHandler+0x190>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d054      	beq.n	8005c8a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d139      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d12b      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d124      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11d      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d119      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fac8 	bl	8006210 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 020c 	mvn.w	r2, #12
 8005c88:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_ADC_IRQHandler+0x1d6>
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d014      	beq.n	8005cd0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f841 	bl	8005d48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0201 	mvn.w	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d015      	beq.n	8005d12 <HAL_ADC_IRQHandler+0x218>
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d012      	beq.n	8005d12 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf0:	f043 0202 	orr.w	r2, r3, #2
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0220 	mvn.w	r2, #32
 8005d00:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f82a 	bl	8005d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0220 	mvn.w	r2, #32
 8005d10:	601a      	str	r2, [r3, #0]
  }
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1c>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e136      	b.n	8005ffa <HAL_ADC_ConfigChannel+0x28a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	d93a      	bls.n	8005e12 <HAL_ADC_ConfigChannel+0xa2>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d035      	beq.n	8005e12 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	3b1e      	subs	r3, #30
 8005dbc:	2207      	movs	r2, #7
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43da      	mvns	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	400a      	ands	r2, r1
 8005dca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a8d      	ldr	r2, [pc, #564]	; (8006008 <HAL_ADC_ConfigChannel+0x298>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10a      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68d9      	ldr	r1, [r3, #12]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	061a      	lsls	r2, r3, #24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dea:	e035      	b.n	8005e58 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68d9      	ldr	r1, [r3, #12]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4403      	add	r3, r0
 8005e04:	3b1e      	subs	r3, #30
 8005e06:	409a      	lsls	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e10:	e022      	b.n	8005e58 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6919      	ldr	r1, [r3, #16]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	2207      	movs	r2, #7
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43da      	mvns	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	400a      	ands	r2, r1
 8005e34:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6919      	ldr	r1, [r3, #16]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4618      	mov	r0, r3
 8005e48:	4603      	mov	r3, r0
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	4403      	add	r3, r0
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	d824      	bhi.n	8005eaa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	3b05      	subs	r3, #5
 8005e72:	221f      	movs	r2, #31
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43da      	mvns	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	400a      	ands	r2, r1
 8005e80:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	3b05      	subs	r3, #5
 8005e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8005ea8:	e04c      	b.n	8005f44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d824      	bhi.n	8005efc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3b23      	subs	r3, #35	; 0x23
 8005ec4:	221f      	movs	r2, #31
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	3b23      	subs	r3, #35	; 0x23
 8005eee:	fa00 f203 	lsl.w	r2, r0, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8005efa:	e023      	b.n	8005f44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3b41      	subs	r3, #65	; 0x41
 8005f0e:	221f      	movs	r2, #31
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	43da      	mvns	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	3b41      	subs	r3, #65	; 0x41
 8005f38:	fa00 f203 	lsl.w	r2, r0, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a30      	ldr	r2, [pc, #192]	; (800600c <HAL_ADC_ConfigChannel+0x29c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d10a      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x1f4>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f56:	d105      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005f62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a28      	ldr	r2, [pc, #160]	; (800600c <HAL_ADC_ConfigChannel+0x29c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d10f      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x21e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b12      	cmp	r3, #18
 8005f74:	d10b      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005f76:	4b26      	ldr	r3, [pc, #152]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4a25      	ldr	r2, [pc, #148]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f80:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005f82:	4b23      	ldr	r3, [pc, #140]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	4a22      	ldr	r2, [pc, #136]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_ADC_ConfigChannel+0x29c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d12b      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x280>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1a      	ldr	r2, [pc, #104]	; (8006008 <HAL_ADC_ConfigChannel+0x298>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <HAL_ADC_ConfigChannel+0x23a>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b11      	cmp	r3, #17
 8005fa8:	d122      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005fb0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005fb4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005fb6:	4b16      	ldr	r3, [pc, #88]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_ADC_ConfigChannel+0x2a0>)
 8005fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fc0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <HAL_ADC_ConfigChannel+0x298>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d111      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_ADC_ConfigChannel+0x2a4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <HAL_ADC_ConfigChannel+0x2a8>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	0c9a      	lsrs	r2, r3, #18
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fe2:	e002      	b.n	8005fea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1f9      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	10000012 	.word	0x10000012
 800600c:	40012000 	.word	0x40012000
 8006010:	40012300 	.word	0x40012300
 8006014:	200000c8 	.word	0x200000c8
 8006018:	431bde83 	.word	0x431bde83

0800601c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006024:	4b78      	ldr	r3, [pc, #480]	; (8006208 <ADC_Init+0x1ec>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a77      	ldr	r2, [pc, #476]	; (8006208 <ADC_Init+0x1ec>)
 800602a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800602e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006030:	4b75      	ldr	r3, [pc, #468]	; (8006208 <ADC_Init+0x1ec>)
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4973      	ldr	r1, [pc, #460]	; (8006208 <ADC_Init+0x1ec>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	021a      	lsls	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006092:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	4a58      	ldr	r2, [pc, #352]	; (800620c <ADC_Init+0x1f0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6899      	ldr	r1, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	e00f      	b.n	8006116 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006114:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0202 	bic.w	r2, r2, #2
 8006124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	005a      	lsls	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006152:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006162:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	3b01      	subs	r3, #1
 8006170:	035a      	lsls	r2, r3, #13
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e007      	b.n	800618c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800618a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	051a      	lsls	r2, r3, #20
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6899      	ldr	r1, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061ce:	025a      	lsls	r2, r3, #9
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	029a      	lsls	r2, r3, #10
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40012300 	.word	0x40012300
 800620c:	0f000001 	.word	0x0f000001

08006210 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006234:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <__NVIC_SetPriorityGrouping+0x40>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006240:	4013      	ands	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <__NVIC_SetPriorityGrouping+0x44>)
 800624e:	4313      	orrs	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006252:	4a04      	ldr	r2, [pc, #16]	; (8006264 <__NVIC_SetPriorityGrouping+0x40>)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	60d3      	str	r3, [r2, #12]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00
 8006268:	05fa0000 	.word	0x05fa0000

0800626c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__NVIC_GetPriorityGrouping+0x18>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	f003 0307 	and.w	r3, r3, #7
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db0b      	blt.n	80062b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <__NVIC_EnableIRQ+0x38>)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2001      	movs	r0, #1
 80062aa:	fa00 f202 	lsl.w	r2, r0, r2
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0a      	blt.n	80062ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	490c      	ldr	r1, [pc, #48]	; (8006310 <__NVIC_SetPriority+0x4c>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	440b      	add	r3, r1
 80062e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062ec:	e00a      	b.n	8006304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4908      	ldr	r1, [pc, #32]	; (8006314 <__NVIC_SetPriority+0x50>)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3b04      	subs	r3, #4
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	440b      	add	r3, r1
 8006302:	761a      	strb	r2, [r3, #24]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000e100 	.word	0xe000e100
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf28      	it	cs
 8006336:	2304      	movcs	r3, #4
 8006338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3304      	adds	r3, #4
 800633e:	2b06      	cmp	r3, #6
 8006340:	d902      	bls.n	8006348 <NVIC_EncodePriority+0x30>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3b03      	subs	r3, #3
 8006346:	e000      	b.n	800634a <NVIC_EncodePriority+0x32>
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	401a      	ands	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006360:	f04f 31ff 	mov.w	r1, #4294967295
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	43d9      	mvns	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	4313      	orrs	r3, r2
         );
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ff4c 	bl	8006224 <__NVIC_SetPriorityGrouping>
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063a6:	f7ff ff61 	bl	800626c <__NVIC_GetPriorityGrouping>
 80063aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	6978      	ldr	r0, [r7, #20]
 80063b2:	f7ff ffb1 	bl	8006318 <NVIC_EncodePriority>
 80063b6:	4602      	mov	r2, r0
 80063b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ff80 	bl	80062c4 <__NVIC_SetPriority>
}
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff ff54 	bl	8006288 <__NVIC_EnableIRQ>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e014      	b.n	8006424 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fe fb40 	bl	8004a90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800643e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006442:	d120      	bne.n	8006486 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006452:	d118      	bne.n	8006486 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2204      	movs	r2, #4
 8006458:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800646e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800647e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f82d 	bl	80064e0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006494:	d120      	bne.n	80064d8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a4:	d118      	bne.n	80064d8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2204      	movs	r2, #4
 80064aa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f043 0202 	orr.w	r2, r3, #2
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80064d0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f85d 	bl	8006592 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	795b      	ldrb	r3, [r3, #5]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_DAC_ConfigChannel+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e03c      	b.n	8006586 <HAL_DAC_ConfigChannel+0x92>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2202      	movs	r2, #2
 8006516:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	f640 72fe 	movw	r2, #4094	; 0xffe
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4013      	ands	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6819      	ldr	r1, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	22c0      	movs	r2, #192	; 0xc0
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43da      	mvns	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	400a      	ands	r2, r1
 8006576:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065b4:	f7ff f8d4 	bl	8005760 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e099      	b.n	80066f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065e4:	e00f      	b.n	8006606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065e6:	f7ff f8bb 	bl	8005760 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d908      	bls.n	8006606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2203      	movs	r2, #3
 80065fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e078      	b.n	80066f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e8      	bne.n	80065e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4b38      	ldr	r3, [pc, #224]	; (8006700 <HAL_DMA_Init+0x158>)
 8006620:	4013      	ands	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800663e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b04      	cmp	r3, #4
 800665e:	d107      	bne.n	8006670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4313      	orrs	r3, r2
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b04      	cmp	r3, #4
 8006698:	d117      	bne.n	80066ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f94f 	bl	8006950 <DMA_CheckFifoParam>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80066c6:	2301      	movs	r3, #1
 80066c8:	e016      	b.n	80066f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f906 	bl	80068e4 <DMA_CalcBaseAndBitshift>
 80066d8:	4603      	mov	r3, r0
 80066da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	223f      	movs	r2, #63	; 0x3f
 80066e2:	409a      	lsls	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	f010803f 	.word	0xf010803f

08006704 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e050      	b.n	80067b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d101      	bne.n	8006726 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
 8006724:	e048      	b.n	80067b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2221      	movs	r2, #33	; 0x21
 8006764:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8bc 	bl	80068e4 <DMA_CalcBaseAndBitshift>
 800676c:	4603      	mov	r3, r0
 800676e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	223f      	movs	r2, #63	; 0x3f
 8006776:	409a      	lsls	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80067ce:	f7fe ffc7 	bl	8005760 <HAL_GetTick>
 80067d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d008      	beq.n	80067f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2280      	movs	r2, #128	; 0x80
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e052      	b.n	8006898 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0216 	bic.w	r2, r2, #22
 8006800:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006810:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <HAL_DMA_Abort+0x62>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0208 	bic.w	r2, r2, #8
 8006830:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006842:	e013      	b.n	800686c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006844:	f7fe ff8c 	bl	8005760 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b05      	cmp	r3, #5
 8006850:	d90c      	bls.n	800686c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2203      	movs	r2, #3
 800685c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e015      	b.n	8006898 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e4      	bne.n	8006844 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	223f      	movs	r2, #63	; 0x3f
 8006880:	409a      	lsls	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d004      	beq.n	80068be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e00c      	b.n	80068d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2205      	movs	r2, #5
 80068c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	3b10      	subs	r3, #16
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <DMA_CalcBaseAndBitshift+0x60>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	091b      	lsrs	r3, r3, #4
 80068fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068fe:	4a12      	ldr	r2, [pc, #72]	; (8006948 <DMA_CalcBaseAndBitshift+0x64>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d908      	bls.n	8006924 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <DMA_CalcBaseAndBitshift+0x68>)
 800691a:	4013      	ands	r3, r2
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	659a      	str	r2, [r3, #88]	; 0x58
 8006922:	e006      	b.n	8006932 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	4b08      	ldr	r3, [pc, #32]	; (800694c <DMA_CalcBaseAndBitshift+0x68>)
 800692c:	4013      	ands	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	aaaaaaab 	.word	0xaaaaaaab
 8006948:	08071a28 	.word	0x08071a28
 800694c:	fffffc00 	.word	0xfffffc00

08006950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11f      	bne.n	80069aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d856      	bhi.n	8006a1e <DMA_CheckFifoParam+0xce>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <DMA_CheckFifoParam+0x28>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	08006989 	.word	0x08006989
 800697c:	0800699b 	.word	0x0800699b
 8006980:	08006989 	.word	0x08006989
 8006984:	08006a1f 	.word	0x08006a1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d046      	beq.n	8006a22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006998:	e043      	b.n	8006a22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069a2:	d140      	bne.n	8006a26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a8:	e03d      	b.n	8006a26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	d121      	bne.n	80069f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d837      	bhi.n	8006a2a <DMA_CheckFifoParam+0xda>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <DMA_CheckFifoParam+0x70>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069d7 	.word	0x080069d7
 80069c8:	080069d1 	.word	0x080069d1
 80069cc:	080069e9 	.word	0x080069e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
      break;
 80069d4:	e030      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d025      	beq.n	8006a2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e6:	e022      	b.n	8006a2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069f0:	d11f      	bne.n	8006a32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069f6:	e01c      	b.n	8006a32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d903      	bls.n	8006a06 <DMA_CheckFifoParam+0xb6>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d003      	beq.n	8006a0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a04:	e018      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0a:	e015      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1c:	e00b      	b.n	8006a36 <DMA_CheckFifoParam+0xe6>
      break;
 8006a1e:	bf00      	nop
 8006a20:	e00a      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;
 8006a22:	bf00      	nop
 8006a24:	e008      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;
 8006a26:	bf00      	nop
 8006a28:	e006      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e004      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <DMA_CheckFifoParam+0xe8>
      break;
 8006a36:	bf00      	nop
    }
  } 
  
  return status; 
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop

08006a48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e039      	b.n	8006ace <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fe f856 	bl	8004b20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	f023 0107 	bic.w	r1, r3, #7
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <HAL_DMA2D_Init+0x90>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68d1      	ldr	r1, [r2, #12]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	ffffc000 	.word	0xffffc000

08006adc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_DMA2D_Start+0x1c>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e018      	b.n	8006b2a <HAL_DMA2D_Start+0x4e>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fa98 	bl	8007048 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d056      	beq.n	8006bfc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b4e:	f7fe fe07 	bl	8005760 <HAL_GetTick>
 8006b52:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b54:	e04b      	b.n	8006bee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d023      	beq.n	8006bb0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	f043 0202 	orr.w	r2, r3, #2
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0a5      	b.n	8006cfc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d01a      	beq.n	8006bee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bb8:	f7fe fdd2 	bl	8005760 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d302      	bcc.n	8006bce <HAL_DMA2D_PollForTransfer+0x9c>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10f      	bne.n	8006bee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e086      	b.n	8006cfc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0ac      	beq.n	8006b56 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d061      	beq.n	8006ce2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c1e:	f7fe fd9f 	bl	8005760 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c24:	e056      	b.n	8006cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d02e      	beq.n	8006c96 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	f043 0202 	orr.w	r2, r3, #2
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	f043 0201 	orr.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2229      	movs	r2, #41	; 0x29
 8006c80:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e032      	b.n	8006cfc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d01a      	beq.n	8006cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe fd5f 	bl	8005760 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <HAL_DMA2D_PollForTransfer+0x182>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e013      	b.n	8006cfc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0a1      	beq.n	8006c26 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2212      	movs	r2, #18
 8006ce8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d026      	beq.n	8006d74 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d021      	beq.n	8006d74 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d3e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	f043 0201 	orr.w	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2204      	movs	r2, #4
 8006d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d026      	beq.n	8006dcc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d021      	beq.n	8006dcc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d96:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	f043 0202 	orr.w	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2204      	movs	r2, #4
 8006db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d026      	beq.n	8006e24 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d021      	beq.n	8006e24 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2208      	movs	r2, #8
 8006df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	f043 0204 	orr.w	r2, r3, #4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2204      	movs	r2, #4
 8006e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e46:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f853 	bl	8006efc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d024      	beq.n	8006eaa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01f      	beq.n	8006eaa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01f      	beq.n	8006ef4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01a      	beq.n	8006ef4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ecc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f80e 	bl	8006f10 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_DMA2D_ConfigLayer+0x20>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e079      	b.n	8007038 <HAL_DMA2D_ConfigLayer+0x114>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	3318      	adds	r3, #24
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006f6e:	4b35      	ldr	r3, [pc, #212]	; (8007044 <HAL_DMA2D_ConfigLayer+0x120>)
 8006f70:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b0a      	cmp	r3, #10
 8006f78:	d003      	beq.n	8006f82 <HAL_DMA2D_ConfigLayer+0x5e>
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d107      	bne.n	8006f92 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e005      	b.n	8006f9e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d120      	bne.n	8006fe6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	43db      	mvns	r3, r3
 8006fae:	ea02 0103 	and.w	r1, r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b0a      	cmp	r3, #10
 8006fcc:	d003      	beq.n	8006fd6 <HAL_DMA2D_ConfigLayer+0xb2>
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b09      	cmp	r3, #9
 8006fd4:	d127      	bne.n	8007026 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fe4:	e01f      	b.n	8007026 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43db      	mvns	r3, r3
 8006ff0:	ea02 0103 	and.w	r1, r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b0a      	cmp	r3, #10
 800700e:	d003      	beq.n	8007018 <HAL_DMA2D_ConfigLayer+0xf4>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b09      	cmp	r3, #9
 8007016:	d106      	bne.n	8007026 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007024:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	ff03000f 	.word	0xff03000f

08007048 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007048:	b480      	push	{r7}
 800704a:	b08b      	sub	sp, #44	; 0x2c
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	041a      	lsls	r2, r3, #16
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	431a      	orrs	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007080:	d174      	bne.n	800716c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007088:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007090:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007098:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
 80070b8:	e053      	b.n	8007162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d106      	bne.n	80070d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
 80070ce:	e048      	b.n	8007162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d111      	bne.n	80070fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	0cdb      	lsrs	r3, r3, #19
 80070dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	0a9b      	lsrs	r3, r3, #10
 80070e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	02db      	lsls	r3, r3, #11
 80070f2:	4313      	orrs	r3, r2
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
 80070fa:	e032      	b.n	8007162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d117      	bne.n	8007134 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	0fdb      	lsrs	r3, r3, #31
 8007108:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	0cdb      	lsrs	r3, r3, #19
 800710e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	0adb      	lsrs	r3, r3, #11
 8007114:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	431a      	orrs	r2, r3
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	03db      	lsls	r3, r3, #15
 800712a:	4313      	orrs	r3, r2
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
 8007132:	e016      	b.n	8007162 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	0f1b      	lsrs	r3, r3, #28
 8007138:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	0d1b      	lsrs	r3, r3, #20
 800713e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	0b1b      	lsrs	r3, r3, #12
 8007144:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	091b      	lsrs	r3, r3, #4
 800714a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	011a      	lsls	r2, r3, #4
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	431a      	orrs	r2, r3
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	4313      	orrs	r3, r2
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800716a:	e003      	b.n	8007174 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	60da      	str	r2, [r3, #12]
}
 8007174:	bf00      	nop
 8007176:	372c      	adds	r7, #44	; 0x2c
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	; 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e175      	b.n	800748c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80071a0:	2201      	movs	r2, #1
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4013      	ands	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	f040 8164 	bne.w	8007486 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d005      	beq.n	80071d6 <HAL_GPIO_Init+0x56>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d130      	bne.n	8007238 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	2203      	movs	r2, #3
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800720c:	2201      	movs	r2, #1
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	4013      	ands	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 0201 	and.w	r2, r3, #1
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4313      	orrs	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	2b03      	cmp	r3, #3
 8007242:	d017      	beq.n	8007274 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	2203      	movs	r2, #3
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	43db      	mvns	r3, r3
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	4013      	ands	r3, r2
 800725a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	4313      	orrs	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d123      	bne.n	80072c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	08da      	lsrs	r2, r3, #3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3208      	adds	r2, #8
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	220f      	movs	r2, #15
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	08da      	lsrs	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3208      	adds	r2, #8
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	2203      	movs	r2, #3
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43db      	mvns	r3, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f003 0203 	and.w	r2, r3, #3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80be 	beq.w	8007486 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800730a:	4b66      	ldr	r3, [pc, #408]	; (80074a4 <HAL_GPIO_Init+0x324>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	4a65      	ldr	r2, [pc, #404]	; (80074a4 <HAL_GPIO_Init+0x324>)
 8007310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007314:	6453      	str	r3, [r2, #68]	; 0x44
 8007316:	4b63      	ldr	r3, [pc, #396]	; (80074a4 <HAL_GPIO_Init+0x324>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007322:	4a61      	ldr	r2, [pc, #388]	; (80074a8 <HAL_GPIO_Init+0x328>)
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	089b      	lsrs	r3, r3, #2
 8007328:	3302      	adds	r3, #2
 800732a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	220f      	movs	r2, #15
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43db      	mvns	r3, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4013      	ands	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a58      	ldr	r2, [pc, #352]	; (80074ac <HAL_GPIO_Init+0x32c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d037      	beq.n	80073be <HAL_GPIO_Init+0x23e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a57      	ldr	r2, [pc, #348]	; (80074b0 <HAL_GPIO_Init+0x330>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d031      	beq.n	80073ba <HAL_GPIO_Init+0x23a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a56      	ldr	r2, [pc, #344]	; (80074b4 <HAL_GPIO_Init+0x334>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d02b      	beq.n	80073b6 <HAL_GPIO_Init+0x236>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a55      	ldr	r2, [pc, #340]	; (80074b8 <HAL_GPIO_Init+0x338>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d025      	beq.n	80073b2 <HAL_GPIO_Init+0x232>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a54      	ldr	r2, [pc, #336]	; (80074bc <HAL_GPIO_Init+0x33c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01f      	beq.n	80073ae <HAL_GPIO_Init+0x22e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a53      	ldr	r2, [pc, #332]	; (80074c0 <HAL_GPIO_Init+0x340>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d019      	beq.n	80073aa <HAL_GPIO_Init+0x22a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a52      	ldr	r2, [pc, #328]	; (80074c4 <HAL_GPIO_Init+0x344>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <HAL_GPIO_Init+0x226>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a51      	ldr	r2, [pc, #324]	; (80074c8 <HAL_GPIO_Init+0x348>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00d      	beq.n	80073a2 <HAL_GPIO_Init+0x222>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a50      	ldr	r2, [pc, #320]	; (80074cc <HAL_GPIO_Init+0x34c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <HAL_GPIO_Init+0x21e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a4f      	ldr	r2, [pc, #316]	; (80074d0 <HAL_GPIO_Init+0x350>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_GPIO_Init+0x21a>
 8007396:	2309      	movs	r3, #9
 8007398:	e012      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 800739a:	230a      	movs	r3, #10
 800739c:	e010      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 800739e:	2308      	movs	r3, #8
 80073a0:	e00e      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073a2:	2307      	movs	r3, #7
 80073a4:	e00c      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073a6:	2306      	movs	r3, #6
 80073a8:	e00a      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073aa:	2305      	movs	r3, #5
 80073ac:	e008      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073ae:	2304      	movs	r3, #4
 80073b0:	e006      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073b2:	2303      	movs	r3, #3
 80073b4:	e004      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e002      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <HAL_GPIO_Init+0x240>
 80073be:	2300      	movs	r3, #0
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	f002 0203 	and.w	r2, r2, #3
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	4093      	lsls	r3, r2
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80073d0:	4935      	ldr	r1, [pc, #212]	; (80074a8 <HAL_GPIO_Init+0x328>)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <HAL_GPIO_Init+0x354>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	43db      	mvns	r3, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4013      	ands	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007402:	4a34      	ldr	r2, [pc, #208]	; (80074d4 <HAL_GPIO_Init+0x354>)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007408:	4b32      	ldr	r3, [pc, #200]	; (80074d4 <HAL_GPIO_Init+0x354>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	43db      	mvns	r3, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4013      	ands	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800742c:	4a29      	ldr	r2, [pc, #164]	; (80074d4 <HAL_GPIO_Init+0x354>)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007432:	4b28      	ldr	r3, [pc, #160]	; (80074d4 <HAL_GPIO_Init+0x354>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007456:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <HAL_GPIO_Init+0x354>)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <HAL_GPIO_Init+0x354>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	43db      	mvns	r3, r3
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	4013      	ands	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007480:	4a14      	ldr	r2, [pc, #80]	; (80074d4 <HAL_GPIO_Init+0x354>)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3301      	adds	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	f67f ae86 	bls.w	80071a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	3724      	adds	r7, #36	; 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800
 80074a8:	40013800 	.word	0x40013800
 80074ac:	40020000 	.word	0x40020000
 80074b0:	40020400 	.word	0x40020400
 80074b4:	40020800 	.word	0x40020800
 80074b8:	40020c00 	.word	0x40020c00
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40021400 	.word	0x40021400
 80074c4:	40021800 	.word	0x40021800
 80074c8:	40021c00 	.word	0x40021c00
 80074cc:	40022000 	.word	0x40022000
 80074d0:	40022400 	.word	0x40022400
 80074d4:	40013c00 	.word	0x40013c00

080074d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e0d9      	b.n	80076a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80074f4:	2201      	movs	r2, #1
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4013      	ands	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	f040 80c9 	bne.w	80076a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007510:	4a6b      	ldr	r2, [pc, #428]	; (80076c0 <HAL_GPIO_DeInit+0x1e8>)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	089b      	lsrs	r3, r3, #2
 8007516:	3302      	adds	r3, #2
 8007518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	220f      	movs	r2, #15
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	4013      	ands	r3, r2
 8007530:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a63      	ldr	r2, [pc, #396]	; (80076c4 <HAL_GPIO_DeInit+0x1ec>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d037      	beq.n	80075aa <HAL_GPIO_DeInit+0xd2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a62      	ldr	r2, [pc, #392]	; (80076c8 <HAL_GPIO_DeInit+0x1f0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d031      	beq.n	80075a6 <HAL_GPIO_DeInit+0xce>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a61      	ldr	r2, [pc, #388]	; (80076cc <HAL_GPIO_DeInit+0x1f4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d02b      	beq.n	80075a2 <HAL_GPIO_DeInit+0xca>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a60      	ldr	r2, [pc, #384]	; (80076d0 <HAL_GPIO_DeInit+0x1f8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d025      	beq.n	800759e <HAL_GPIO_DeInit+0xc6>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a5f      	ldr	r2, [pc, #380]	; (80076d4 <HAL_GPIO_DeInit+0x1fc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01f      	beq.n	800759a <HAL_GPIO_DeInit+0xc2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a5e      	ldr	r2, [pc, #376]	; (80076d8 <HAL_GPIO_DeInit+0x200>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d019      	beq.n	8007596 <HAL_GPIO_DeInit+0xbe>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a5d      	ldr	r2, [pc, #372]	; (80076dc <HAL_GPIO_DeInit+0x204>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_GPIO_DeInit+0xba>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a5c      	ldr	r2, [pc, #368]	; (80076e0 <HAL_GPIO_DeInit+0x208>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00d      	beq.n	800758e <HAL_GPIO_DeInit+0xb6>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a5b      	ldr	r2, [pc, #364]	; (80076e4 <HAL_GPIO_DeInit+0x20c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <HAL_GPIO_DeInit+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a5a      	ldr	r2, [pc, #360]	; (80076e8 <HAL_GPIO_DeInit+0x210>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <HAL_GPIO_DeInit+0xae>
 8007582:	2309      	movs	r3, #9
 8007584:	e012      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 8007586:	230a      	movs	r3, #10
 8007588:	e010      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 800758a:	2308      	movs	r3, #8
 800758c:	e00e      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 800758e:	2307      	movs	r3, #7
 8007590:	e00c      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 8007592:	2306      	movs	r3, #6
 8007594:	e00a      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 8007596:	2305      	movs	r3, #5
 8007598:	e008      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 800759a:	2304      	movs	r3, #4
 800759c:	e006      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 800759e:	2303      	movs	r3, #3
 80075a0:	e004      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e002      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <HAL_GPIO_DeInit+0xd4>
 80075aa:	2300      	movs	r3, #0
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	f002 0203 	and.w	r2, r2, #3
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	4093      	lsls	r3, r2
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d132      	bne.n	8007622 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80075bc:	4b4b      	ldr	r3, [pc, #300]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	4949      	ldr	r1, [pc, #292]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80075ca:	4b48      	ldr	r3, [pc, #288]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	4946      	ldr	r1, [pc, #280]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80075d8:	4b44      	ldr	r3, [pc, #272]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	43db      	mvns	r3, r3
 80075e0:	4942      	ldr	r1, [pc, #264]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80075e6:	4b41      	ldr	r3, [pc, #260]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	493f      	ldr	r1, [pc, #252]	; (80076ec <HAL_GPIO_DeInit+0x214>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	220f      	movs	r2, #15
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007604:	4a2e      	ldr	r2, [pc, #184]	; (80076c0 <HAL_GPIO_DeInit+0x1e8>)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	089b      	lsrs	r3, r3, #2
 800760a:	3302      	adds	r3, #2
 800760c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	43da      	mvns	r2, r3
 8007614:	482a      	ldr	r0, [pc, #168]	; (80076c0 <HAL_GPIO_DeInit+0x1e8>)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	089b      	lsrs	r3, r3, #2
 800761a:	400a      	ands	r2, r1
 800761c:	3302      	adds	r3, #2
 800761e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	2103      	movs	r1, #3
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	43db      	mvns	r3, r3
 8007632:	401a      	ands	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	08da      	lsrs	r2, r3, #3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3208      	adds	r2, #8
 8007640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	220f      	movs	r2, #15
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43db      	mvns	r3, r3
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	08d2      	lsrs	r2, r2, #3
 8007658:	4019      	ands	r1, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3208      	adds	r2, #8
 800765e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	2103      	movs	r1, #3
 800766c:	fa01 f303 	lsl.w	r3, r1, r3
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	2101      	movs	r1, #1
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	43db      	mvns	r3, r3
 8007686:	401a      	ands	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	2103      	movs	r1, #3
 8007696:	fa01 f303 	lsl.w	r3, r1, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	401a      	ands	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	3301      	adds	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b0f      	cmp	r3, #15
 80076ac:	f67f af22 	bls.w	80074f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40013800 	.word	0x40013800
 80076c4:	40020000 	.word	0x40020000
 80076c8:	40020400 	.word	0x40020400
 80076cc:	40020800 	.word	0x40020800
 80076d0:	40020c00 	.word	0x40020c00
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40021400 	.word	0x40021400
 80076dc:	40021800 	.word	0x40021800
 80076e0:	40021c00 	.word	0x40021c00
 80076e4:	40022000 	.word	0x40022000
 80076e8:	40022400 	.word	0x40022400
 80076ec:	40013c00 	.word	0x40013c00

080076f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	887b      	ldrh	r3, [r7, #2]
 8007702:	4013      	ands	r3, r2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	e001      	b.n	8007712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	807b      	strh	r3, [r7, #2]
 800772c:	4613      	mov	r3, r2
 800772e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007730:	787b      	ldrb	r3, [r7, #1]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007736:	887a      	ldrh	r2, [r7, #2]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800773c:	e003      	b.n	8007746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	041a      	lsls	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	619a      	str	r2, [r3, #24]
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e07f      	b.n	8007866 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fd f9f6 	bl	8004b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d107      	bne.n	80077ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	e006      	b.n	80077dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80077da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d104      	bne.n	80077ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6859      	ldr	r1, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <HAL_I2C_Init+0x11c>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800780c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69d9      	ldr	r1, [r3, #28]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1a      	ldr	r2, [r3, #32]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	02008000 	.word	0x02008000

08007874 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e021      	b.n	80078ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2224      	movs	r2, #36	; 0x24
 800788a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fd fa0c 	bl	8004cbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	4608      	mov	r0, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	4603      	mov	r3, r0
 80078e4:	817b      	strh	r3, [r7, #10]
 80078e6:	460b      	mov	r3, r1
 80078e8:	813b      	strh	r3, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	f040 80f9 	bne.w	8007aee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_I2C_Mem_Write+0x34>
 8007902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0ed      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_I2C_Mem_Write+0x4e>
 800791e:	2302      	movs	r3, #2
 8007920:	e0e6      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800792a:	f7fd ff19 	bl	8005760 <HAL_GetTick>
 800792e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	2319      	movs	r3, #25
 8007936:	2201      	movs	r2, #1
 8007938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fad1 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0d1      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2221      	movs	r2, #33	; 0x21
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2240      	movs	r2, #64	; 0x40
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a3a      	ldr	r2, [r7, #32]
 8007966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800796c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007974:	88f8      	ldrh	r0, [r7, #6]
 8007976:	893a      	ldrh	r2, [r7, #8]
 8007978:	8979      	ldrh	r1, [r7, #10]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4603      	mov	r3, r0
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f9e1 	bl	8007d4c <I2C_RequestMemoryWrite>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0a9      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	d90e      	bls.n	80079c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	22ff      	movs	r2, #255	; 0xff
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	8979      	ldrh	r1, [r7, #10]
 80079b4:	2300      	movs	r3, #0
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fc39 	bl	8008234 <I2C_TransferConfig>
 80079c2:	e00f      	b.n	80079e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	8979      	ldrh	r1, [r7, #10]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fc28 	bl	8008234 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fabb 	bl	8007f64 <I2C_WaitOnTXISFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e07b      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d034      	beq.n	8007a9c <HAL_I2C_Mem_Write+0x1c8>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d130      	bne.n	8007a9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	2200      	movs	r2, #0
 8007a42:	2180      	movs	r1, #128	; 0x80
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fa4d 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e04d      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2bff      	cmp	r3, #255	; 0xff
 8007a5c:	d90e      	bls.n	8007a7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	8979      	ldrh	r1, [r7, #10]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fbdd 	bl	8008234 <I2C_TransferConfig>
 8007a7a:	e00f      	b.n	8007a9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	8979      	ldrh	r1, [r7, #10]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fbcc 	bl	8008234 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d19e      	bne.n	80079e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 fa9a 	bl	8007fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e01a      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6859      	ldr	r1, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <HAL_I2C_Mem_Write+0x224>)
 8007ace:	400b      	ands	r3, r1
 8007ad0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e000      	b.n	8007af0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	fe00e800 	.word	0xfe00e800

08007afc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	817b      	strh	r3, [r7, #10]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	813b      	strh	r3, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	f040 80fd 	bne.w	8007d1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_I2C_Mem_Read+0x34>
 8007b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0f1      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_I2C_Mem_Read+0x4e>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e0ea      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b52:	f7fd fe05 	bl	8005760 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	2319      	movs	r3, #25
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f9bd 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0d5      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2222      	movs	r2, #34	; 0x22
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2240      	movs	r2, #64	; 0x40
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a3a      	ldr	r2, [r7, #32]
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b9c:	88f8      	ldrh	r0, [r7, #6]
 8007b9e:	893a      	ldrh	r2, [r7, #8]
 8007ba0:	8979      	ldrh	r1, [r7, #10]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4603      	mov	r3, r0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f921 	bl	8007df4 <I2C_RequestMemoryRead>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0ad      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2bff      	cmp	r3, #255	; 0xff
 8007bcc:	d90e      	bls.n	8007bec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	8979      	ldrh	r1, [r7, #10]
 8007bdc:	4b52      	ldr	r3, [pc, #328]	; (8007d28 <HAL_I2C_Mem_Read+0x22c>)
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fb25 	bl	8008234 <I2C_TransferConfig>
 8007bea:	e00f      	b.n	8007c0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	4b4a      	ldr	r3, [pc, #296]	; (8007d28 <HAL_I2C_Mem_Read+0x22c>)
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fb14 	bl	8008234 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2200      	movs	r2, #0
 8007c14:	2104      	movs	r1, #4
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f964 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e07c      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d034      	beq.n	8007ccc <HAL_I2C_Mem_Read+0x1d0>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d130      	bne.n	8007ccc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2200      	movs	r2, #0
 8007c72:	2180      	movs	r1, #128	; 0x80
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f935 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e04d      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2bff      	cmp	r3, #255	; 0xff
 8007c8c:	d90e      	bls.n	8007cac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	22ff      	movs	r2, #255	; 0xff
 8007c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	8979      	ldrh	r1, [r7, #10]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fac5 	bl	8008234 <I2C_TransferConfig>
 8007caa:	e00f      	b.n	8007ccc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	8979      	ldrh	r1, [r7, #10]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fab4 	bl	8008234 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d19a      	bne.n	8007c0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f982 	bl	8007fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e01a      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6859      	ldr	r1, [r3, #4]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_I2C_Mem_Read+0x230>)
 8007cfe:	400b      	ands	r3, r1
 8007d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e000      	b.n	8007d20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
  }
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	80002400 	.word	0x80002400
 8007d2c:	fe00e800 	.word	0xfe00e800

08007d30 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d3e:	b2db      	uxtb	r3, r3
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	4608      	mov	r0, r1
 8007d56:	4611      	mov	r1, r2
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	817b      	strh	r3, [r7, #10]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	813b      	strh	r3, [r7, #8]
 8007d62:	4613      	mov	r3, r2
 8007d64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	8979      	ldrh	r1, [r7, #10]
 8007d6c:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <I2C_RequestMemoryWrite+0xa4>)
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fa5d 	bl	8008234 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	69b9      	ldr	r1, [r7, #24]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f8f0 	bl	8007f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e02c      	b.n	8007de8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d105      	bne.n	8007da0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d94:	893b      	ldrh	r3, [r7, #8]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8007d9e:	e015      	b.n	8007dcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007da0:	893b      	ldrh	r3, [r7, #8]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f8d6 	bl	8007f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e012      	b.n	8007de8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2180      	movs	r1, #128	; 0x80
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f884 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	80002000 	.word	0x80002000

08007df4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	461a      	mov	r2, r3
 8007e02:	4603      	mov	r3, r0
 8007e04:	817b      	strh	r3, [r7, #10]
 8007e06:	460b      	mov	r3, r1
 8007e08:	813b      	strh	r3, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	8979      	ldrh	r1, [r7, #10]
 8007e14:	4b20      	ldr	r3, [pc, #128]	; (8007e98 <I2C_RequestMemoryRead+0xa4>)
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fa0a 	bl	8008234 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	69b9      	ldr	r1, [r7, #24]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f89d 	bl	8007f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e02c      	b.n	8007e8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d105      	bne.n	8007e46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e3a:	893b      	ldrh	r3, [r7, #8]
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	629a      	str	r2, [r3, #40]	; 0x28
 8007e44:	e015      	b.n	8007e72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e46:	893b      	ldrh	r3, [r7, #8]
 8007e48:	0a1b      	lsrs	r3, r3, #8
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	69b9      	ldr	r1, [r7, #24]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f883 	bl	8007f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e012      	b.n	8007e8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e68:	893b      	ldrh	r3, [r7, #8]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2140      	movs	r1, #64	; 0x40
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f831 	bl	8007ee4 <I2C_WaitOnFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e000      	b.n	8007e8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	80002000 	.word	0x80002000

08007e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d103      	bne.n	8007eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d007      	beq.n	8007ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	619a      	str	r2, [r3, #24]
  }
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ef4:	e022      	b.n	8007f3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d01e      	beq.n	8007f3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fd fc2f 	bl	8005760 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f18:	f043 0220 	orr.w	r2, r3, #32
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e00f      	b.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4013      	ands	r3, r2
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d0cd      	beq.n	8007ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f70:	e02c      	b.n	8007fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 f870 	bl	800805c <I2C_IsErrorOccurred>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e02a      	b.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d01e      	beq.n	8007fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8e:	f7fd fbe7 	bl	8005760 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d302      	bcc.n	8007fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d113      	bne.n	8007fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e007      	b.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d1cb      	bne.n	8007f72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ff0:	e028      	b.n	8008044 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f830 	bl	800805c <I2C_IsErrorOccurred>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e026      	b.n	8008054 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008006:	f7fd fbab 	bl	8005760 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	d302      	bcc.n	800801c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d113      	bne.n	8008044 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008020:	f043 0220 	orr.w	r2, r3, #32
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e007      	b.n	8008054 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b20      	cmp	r3, #32
 8008050:	d1cf      	bne.n	8007ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08a      	sub	sp, #40	; 0x28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b00      	cmp	r3, #0
 8008086:	d075      	beq.n	8008174 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2210      	movs	r2, #16
 800808e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008090:	e056      	b.n	8008140 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d052      	beq.n	8008140 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800809a:	f7fd fb61 	bl	8005760 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d302      	bcc.n	80080b0 <I2C_IsErrorOccurred+0x54>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d147      	bne.n	8008140 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d2:	d12e      	bne.n	8008132 <I2C_IsErrorOccurred+0xd6>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080da:	d02a      	beq.n	8008132 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80080dc:	7cfb      	ldrb	r3, [r7, #19]
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d027      	beq.n	8008132 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080f0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80080f2:	f7fd fb35 	bl	8005760 <HAL_GetTick>
 80080f6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080f8:	e01b      	b.n	8008132 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080fa:	f7fd fb31 	bl	8005760 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b19      	cmp	r3, #25
 8008106:	d914      	bls.n	8008132 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b20      	cmp	r3, #32
 800813e:	d1dc      	bne.n	80080fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b20      	cmp	r3, #32
 800814c:	d003      	beq.n	8008156 <I2C_IsErrorOccurred+0xfa>
 800814e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008152:	2b00      	cmp	r3, #0
 8008154:	d09d      	beq.n	8008092 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2220      	movs	r2, #32
 8008164:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	f043 0304 	orr.w	r3, r3, #4
 800816c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	f043 0308 	orr.w	r3, r3, #8
 80081ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	f043 0302 	orr.w	r3, r3, #2
 80081d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80081e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01c      	beq.n	8008224 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fe56 	bl	8007e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <I2C_IsErrorOccurred+0x1d4>)
 80081fc:	400b      	ands	r3, r1
 80081fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	431a      	orrs	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	fe00e800 	.word	0xfe00e800

08008234 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	607b      	str	r3, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	817b      	strh	r3, [r7, #10]
 8008242:	4613      	mov	r3, r2
 8008244:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008246:	897b      	ldrh	r3, [r7, #10]
 8008248:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800824c:	7a7b      	ldrb	r3, [r7, #9]
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008254:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	4313      	orrs	r3, r2
 800825e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008262:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	0d5b      	lsrs	r3, r3, #21
 800826e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <I2C_TransferConfig+0x60>)
 8008274:	430b      	orrs	r3, r1
 8008276:	43db      	mvns	r3, r3
 8008278:	ea02 0103 	and.w	r1, r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008286:	bf00      	nop
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	03ff63ff 	.word	0x03ff63ff

08008298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d138      	bne.n	8008320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e032      	b.n	8008322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2224      	movs	r2, #36	; 0x24
 80082c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e000      	b.n	8008322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b20      	cmp	r3, #32
 8008342:	d139      	bne.n	80083b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800834e:	2302      	movs	r3, #2
 8008350:	e033      	b.n	80083ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2224      	movs	r2, #36	; 0x24
 800835e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e000      	b.n	80083ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083b8:	2302      	movs	r3, #2
  }
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e0bf      	b.n	800855a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fc fca0 	bl	8004d34 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800840a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6999      	ldr	r1, [r3, #24]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008420:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6899      	ldr	r1, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b4a      	ldr	r3, [pc, #296]	; (8008564 <HAL_LTDC_Init+0x19c>)
 800843c:	400b      	ands	r3, r1
 800843e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	041b      	lsls	r3, r3, #16
 8008446:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6899      	ldr	r1, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68d9      	ldr	r1, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b3e      	ldr	r3, [pc, #248]	; (8008564 <HAL_LTDC_Init+0x19c>)
 800846a:	400b      	ands	r3, r1
 800846c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68d9      	ldr	r1, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1a      	ldr	r2, [r3, #32]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6919      	ldr	r1, [r3, #16]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4b33      	ldr	r3, [pc, #204]	; (8008564 <HAL_LTDC_Init+0x19c>)
 8008498:	400b      	ands	r3, r1
 800849a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6919      	ldr	r1, [r3, #16]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6959      	ldr	r1, [r3, #20]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b27      	ldr	r3, [pc, #156]	; (8008564 <HAL_LTDC_Init+0x19c>)
 80084c6:	400b      	ands	r3, r1
 80084c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6959      	ldr	r1, [r3, #20]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0206 	orr.w	r2, r2, #6
 8008536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	f000f800 	.word	0xf000f800

08008568 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d023      	beq.n	80085d2 <HAL_LTDC_IRQHandler+0x6a>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01e      	beq.n	80085d2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0204 	bic.w	r2, r2, #4
 80085a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2204      	movs	r2, #4
 80085aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085b2:	f043 0201 	orr.w	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f86f 	bl	80086b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d023      	beq.n	8008624 <HAL_LTDC_IRQHandler+0xbc>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01e      	beq.n	8008624 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0202 	bic.w	r2, r2, #2
 80085f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2202      	movs	r2, #2
 80085fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008604:	f043 0202 	orr.w	r2, r3, #2
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f846 	bl	80086b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01b      	beq.n	8008666 <HAL_LTDC_IRQHandler+0xfe>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d016      	beq.n	8008666 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2201      	movs	r2, #1
 800864e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f82f 	bl	80086c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0308 	and.w	r3, r3, #8
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <HAL_LTDC_IRQHandler+0x140>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d016      	beq.n	80086a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0208 	bic.w	r2, r2, #8
 8008688:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2208      	movs	r2, #8
 8008690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f818 	bl	80086d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80086ec:	b5b0      	push	{r4, r5, r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d101      	bne.n	8008706 <HAL_LTDC_ConfigLayer+0x1a>
 8008702:	2302      	movs	r3, #2
 8008704:	e02c      	b.n	8008760 <HAL_LTDC_ConfigLayer+0x74>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2134      	movs	r1, #52	; 0x34
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	4413      	add	r3, r2
 8008722:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4614      	mov	r4, r2
 800872a:	461d      	mov	r5, r3
 800872c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800872e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f81f 	bl	8008784 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2201      	movs	r2, #1
 800874c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bdb0      	pop	{r4, r5, r7, pc}

08008768 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008776:	b2db      	uxtb	r3, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008784:	b480      	push	{r7}
 8008786:	b089      	sub	sp, #36	; 0x24
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a0:	4413      	add	r3, r2
 80087a2:	041b      	lsls	r3, r3, #16
 80087a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	01db      	lsls	r3, r3, #7
 80087b0:	4413      	add	r3, r2
 80087b2:	3384      	adds	r3, #132	; 0x84
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	4611      	mov	r1, r2
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	01d2      	lsls	r2, r2, #7
 80087c0:	440a      	add	r2, r1
 80087c2:	3284      	adds	r2, #132	; 0x84
 80087c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80087c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087da:	4413      	add	r3, r2
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4619      	mov	r1, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	01db      	lsls	r3, r3, #7
 80087e8:	440b      	add	r3, r1
 80087ea:	3384      	adds	r3, #132	; 0x84
 80087ec:	4619      	mov	r1, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008802:	4413      	add	r3, r2
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	01db      	lsls	r3, r3, #7
 8008812:	4413      	add	r3, r2
 8008814:	3384      	adds	r3, #132	; 0x84
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	4611      	mov	r1, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	01d2      	lsls	r2, r2, #7
 8008822:	440a      	add	r2, r1
 8008824:	3284      	adds	r2, #132	; 0x84
 8008826:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800882a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800883a:	4413      	add	r3, r2
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4619      	mov	r1, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	01db      	lsls	r3, r3, #7
 8008848:	440b      	add	r3, r1
 800884a:	3384      	adds	r3, #132	; 0x84
 800884c:	4619      	mov	r1, r3
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4313      	orrs	r3, r2
 8008852:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	01db      	lsls	r3, r3, #7
 800885e:	4413      	add	r3, r2
 8008860:	3384      	adds	r3, #132	; 0x84
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	4611      	mov	r1, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	01d2      	lsls	r2, r2, #7
 800886e:	440a      	add	r2, r1
 8008870:	3284      	adds	r2, #132	; 0x84
 8008872:	f023 0307 	bic.w	r3, r3, #7
 8008876:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	01db      	lsls	r3, r3, #7
 8008882:	4413      	add	r3, r2
 8008884:	3384      	adds	r3, #132	; 0x84
 8008886:	461a      	mov	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	01db      	lsls	r3, r3, #7
 80088b4:	4413      	add	r3, r2
 80088b6:	3384      	adds	r3, #132	; 0x84
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	01db      	lsls	r3, r3, #7
 80088c4:	4413      	add	r3, r2
 80088c6:	3384      	adds	r3, #132	; 0x84
 80088c8:	461a      	mov	r2, r3
 80088ca:	2300      	movs	r3, #0
 80088cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088d4:	461a      	mov	r2, r3
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	431a      	orrs	r2, r3
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	431a      	orrs	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	01db      	lsls	r3, r3, #7
 80088e8:	440b      	add	r3, r1
 80088ea:	3384      	adds	r3, #132	; 0x84
 80088ec:	4619      	mov	r1, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	01db      	lsls	r3, r3, #7
 80088fe:	4413      	add	r3, r2
 8008900:	3384      	adds	r3, #132	; 0x84
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	4611      	mov	r1, r2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	01d2      	lsls	r2, r2, #7
 800890e:	440a      	add	r2, r1
 8008910:	3284      	adds	r2, #132	; 0x84
 8008912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008916:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	01db      	lsls	r3, r3, #7
 8008922:	4413      	add	r3, r2
 8008924:	3384      	adds	r3, #132	; 0x84
 8008926:	461a      	mov	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	01db      	lsls	r3, r3, #7
 8008938:	4413      	add	r3, r2
 800893a:	3384      	adds	r3, #132	; 0x84
 800893c:	69da      	ldr	r2, [r3, #28]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4619      	mov	r1, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	01db      	lsls	r3, r3, #7
 8008948:	440b      	add	r3, r1
 800894a:	3384      	adds	r3, #132	; 0x84
 800894c:	4619      	mov	r1, r3
 800894e:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <LTDC_SetConfig+0x32c>)
 8008950:	4013      	ands	r3, r2
 8008952:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	68f9      	ldr	r1, [r7, #12]
 800895e:	6809      	ldr	r1, [r1, #0]
 8008960:	4608      	mov	r0, r1
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	01c9      	lsls	r1, r1, #7
 8008966:	4401      	add	r1, r0
 8008968:	3184      	adds	r1, #132	; 0x84
 800896a:	4313      	orrs	r3, r2
 800896c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	01db      	lsls	r3, r3, #7
 8008978:	4413      	add	r3, r2
 800897a:	3384      	adds	r3, #132	; 0x84
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	01db      	lsls	r3, r3, #7
 8008988:	4413      	add	r3, r2
 800898a:	3384      	adds	r3, #132	; 0x84
 800898c:	461a      	mov	r2, r3
 800898e:	2300      	movs	r3, #0
 8008990:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	01db      	lsls	r3, r3, #7
 800899c:	4413      	add	r3, r2
 800899e:	3384      	adds	r3, #132	; 0x84
 80089a0:	461a      	mov	r2, r3
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80089b0:	2304      	movs	r3, #4
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e01b      	b.n	80089ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d102      	bne.n	80089c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80089be:	2303      	movs	r3, #3
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e014      	b.n	80089ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d00b      	beq.n	80089e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d007      	beq.n	80089e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d003      	beq.n	80089e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	d102      	bne.n	80089ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80089e4:	2302      	movs	r3, #2
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	e001      	b.n	80089ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80089ea:	2301      	movs	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	01db      	lsls	r3, r3, #7
 80089f8:	4413      	add	r3, r2
 80089fa:	3384      	adds	r3, #132	; 0x84
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	6812      	ldr	r2, [r2, #0]
 8008a02:	4611      	mov	r1, r2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	01d2      	lsls	r2, r2, #7
 8008a08:	440a      	add	r2, r1
 8008a0a:	3284      	adds	r2, #132	; 0x84
 8008a0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	fb02 f303 	mul.w	r3, r2, r3
 8008a1c:	041a      	lsls	r2, r3, #16
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6859      	ldr	r1, [r3, #4]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1acb      	subs	r3, r1, r3
 8008a28:	69f9      	ldr	r1, [r7, #28]
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	3303      	adds	r3, #3
 8008a30:	68f9      	ldr	r1, [r7, #12]
 8008a32:	6809      	ldr	r1, [r1, #0]
 8008a34:	4608      	mov	r0, r1
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	01c9      	lsls	r1, r1, #7
 8008a3a:	4401      	add	r1, r0
 8008a3c:	3184      	adds	r1, #132	; 0x84
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	01db      	lsls	r3, r3, #7
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3384      	adds	r3, #132	; 0x84
 8008a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	440b      	add	r3, r1
 8008a5e:	3384      	adds	r3, #132	; 0x84
 8008a60:	4619      	mov	r1, r3
 8008a62:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <LTDC_SetConfig+0x330>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	01db      	lsls	r3, r3, #7
 8008a72:	4413      	add	r3, r2
 8008a74:	3384      	adds	r3, #132	; 0x84
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	01db      	lsls	r3, r3, #7
 8008a88:	4413      	add	r3, r2
 8008a8a:	3384      	adds	r3, #132	; 0x84
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	4611      	mov	r1, r2
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	01d2      	lsls	r2, r2, #7
 8008a98:	440a      	add	r2, r1
 8008a9a:	3284      	adds	r2, #132	; 0x84
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	6013      	str	r3, [r2, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	3724      	adds	r7, #36	; 0x24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	fffff8f8 	.word	0xfffff8f8
 8008ab4:	fffff800 	.word	0xfffff800

08008ab8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ac6:	6013      	str	r3, [r2, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40007000 	.word	0x40007000

08008ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008ae2:	4b23      	ldr	r3, [pc, #140]	; (8008b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	4a22      	ldr	r2, [pc, #136]	; (8008b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aec:	6413      	str	r3, [r2, #64]	; 0x40
 8008aee:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008afa:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a1d      	ldr	r2, [pc, #116]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b06:	f7fc fe2b 	bl	8005760 <HAL_GetTick>
 8008b0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b0c:	e009      	b.n	8008b22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b0e:	f7fc fe27 	bl	8005760 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b1c:	d901      	bls.n	8008b22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e022      	b.n	8008b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b22:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2e:	d1ee      	bne.n	8008b0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a0f      	ldr	r2, [pc, #60]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b3c:	f7fc fe10 	bl	8005760 <HAL_GetTick>
 8008b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b42:	e009      	b.n	8008b58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b44:	f7fc fe0c 	bl	8005760 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b52:	d901      	bls.n	8008b58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e007      	b.n	8008b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b64:	d1ee      	bne.n	8008b44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40007000 	.word	0x40007000

08008b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e291      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 8087 	beq.w	8008caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b9c:	4b96      	ldr	r3, [pc, #600]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 030c 	and.w	r3, r3, #12
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d00c      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ba8:	4b93      	ldr	r3, [pc, #588]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 030c 	and.w	r3, r3, #12
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d112      	bne.n	8008bda <HAL_RCC_OscConfig+0x62>
 8008bb4:	4b90      	ldr	r3, [pc, #576]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc0:	d10b      	bne.n	8008bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d06c      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x130>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d168      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e26b      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be2:	d106      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x7a>
 8008be4:	4b84      	ldr	r3, [pc, #528]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a83      	ldr	r2, [pc, #524]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	e02e      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCC_OscConfig+0x9c>
 8008bfa:	4b7f      	ldr	r3, [pc, #508]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a7e      	ldr	r2, [pc, #504]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	4b7c      	ldr	r3, [pc, #496]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a7b      	ldr	r2, [pc, #492]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	e01d      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c1c:	d10c      	bne.n	8008c38 <HAL_RCC_OscConfig+0xc0>
 8008c1e:	4b76      	ldr	r3, [pc, #472]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a75      	ldr	r2, [pc, #468]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4b73      	ldr	r3, [pc, #460]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a72      	ldr	r2, [pc, #456]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e00b      	b.n	8008c50 <HAL_RCC_OscConfig+0xd8>
 8008c38:	4b6f      	ldr	r3, [pc, #444]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a6e      	ldr	r2, [pc, #440]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	4b6c      	ldr	r3, [pc, #432]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a6b      	ldr	r2, [pc, #428]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d013      	beq.n	8008c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c58:	f7fc fd82 	bl	8005760 <HAL_GetTick>
 8008c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c60:	f7fc fd7e 	bl	8005760 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b64      	cmp	r3, #100	; 0x64
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e21f      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c72:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f0      	beq.n	8008c60 <HAL_RCC_OscConfig+0xe8>
 8008c7e:	e014      	b.n	8008caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c80:	f7fc fd6e 	bl	8005760 <HAL_GetTick>
 8008c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c88:	f7fc fd6a 	bl	8005760 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b64      	cmp	r3, #100	; 0x64
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e20b      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c9a:	4b57      	ldr	r3, [pc, #348]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f0      	bne.n	8008c88 <HAL_RCC_OscConfig+0x110>
 8008ca6:	e000      	b.n	8008caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d069      	beq.n	8008d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cb6:	4b50      	ldr	r3, [pc, #320]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 030c 	and.w	r3, r3, #12
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cc2:	4b4d      	ldr	r3, [pc, #308]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 030c 	and.w	r3, r3, #12
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d11c      	bne.n	8008d08 <HAL_RCC_OscConfig+0x190>
 8008cce:	4b4a      	ldr	r3, [pc, #296]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d116      	bne.n	8008d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cda:	4b47      	ldr	r3, [pc, #284]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x17a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d001      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e1df      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf2:	4b41      	ldr	r3, [pc, #260]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	493d      	ldr	r1, [pc, #244]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d06:	e040      	b.n	8008d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d023      	beq.n	8008d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d10:	4b39      	ldr	r3, [pc, #228]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a38      	ldr	r2, [pc, #224]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1c:	f7fc fd20 	bl	8005760 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d24:	f7fc fd1c 	bl	8005760 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e1bd      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d36:	4b30      	ldr	r3, [pc, #192]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0f0      	beq.n	8008d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d42:	4b2d      	ldr	r3, [pc, #180]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4929      	ldr	r1, [pc, #164]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	600b      	str	r3, [r1, #0]
 8008d56:	e018      	b.n	8008d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d58:	4b27      	ldr	r3, [pc, #156]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a26      	ldr	r2, [pc, #152]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7fc fcfc 	bl	8005760 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d6c:	f7fc fcf8 	bl	8005760 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e199      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d038      	beq.n	8008e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d019      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008daa:	f7fc fcd9 	bl	8005760 <HAL_GetTick>
 8008dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008db0:	e008      	b.n	8008dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008db2:	f7fc fcd5 	bl	8005760 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e176      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0f0      	beq.n	8008db2 <HAL_RCC_OscConfig+0x23a>
 8008dd0:	e01a      	b.n	8008e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd6:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <HAL_RCC_OscConfig+0x280>)
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dde:	f7fc fcbf 	bl	8005760 <HAL_GetTick>
 8008de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008de4:	e00a      	b.n	8008dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008de6:	f7fc fcbb 	bl	8005760 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d903      	bls.n	8008dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e15c      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
 8008df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dfc:	4b91      	ldr	r3, [pc, #580]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1ee      	bne.n	8008de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80a4 	beq.w	8008f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e16:	4b8b      	ldr	r3, [pc, #556]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10d      	bne.n	8008e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e22:	4b88      	ldr	r3, [pc, #544]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	4a87      	ldr	r2, [pc, #540]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e2e:	4b85      	ldr	r3, [pc, #532]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e36:	60bb      	str	r3, [r7, #8]
 8008e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e3e:	4b82      	ldr	r3, [pc, #520]	; (8009048 <HAL_RCC_OscConfig+0x4d0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d118      	bne.n	8008e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008e4a:	4b7f      	ldr	r3, [pc, #508]	; (8009048 <HAL_RCC_OscConfig+0x4d0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a7e      	ldr	r2, [pc, #504]	; (8009048 <HAL_RCC_OscConfig+0x4d0>)
 8008e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e56:	f7fc fc83 	bl	8005760 <HAL_GetTick>
 8008e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e5e:	f7fc fc7f 	bl	8005760 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b64      	cmp	r3, #100	; 0x64
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e120      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e70:	4b75      	ldr	r3, [pc, #468]	; (8009048 <HAL_RCC_OscConfig+0x4d0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d0f0      	beq.n	8008e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d106      	bne.n	8008e92 <HAL_RCC_OscConfig+0x31a>
 8008e84:	4b6f      	ldr	r3, [pc, #444]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e88:	4a6e      	ldr	r2, [pc, #440]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e90:	e02d      	b.n	8008eee <HAL_RCC_OscConfig+0x376>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10c      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x33c>
 8008e9a:	4b6a      	ldr	r3, [pc, #424]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	4a69      	ldr	r2, [pc, #420]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea6:	4b67      	ldr	r3, [pc, #412]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eaa:	4a66      	ldr	r2, [pc, #408]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008eac:	f023 0304 	bic.w	r3, r3, #4
 8008eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8008eb2:	e01c      	b.n	8008eee <HAL_RCC_OscConfig+0x376>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	d10c      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x35e>
 8008ebc:	4b61      	ldr	r3, [pc, #388]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec0:	4a60      	ldr	r2, [pc, #384]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ec2:	f043 0304 	orr.w	r3, r3, #4
 8008ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ec8:	4b5e      	ldr	r3, [pc, #376]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ecc:	4a5d      	ldr	r2, [pc, #372]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ed4:	e00b      	b.n	8008eee <HAL_RCC_OscConfig+0x376>
 8008ed6:	4b5b      	ldr	r3, [pc, #364]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eda:	4a5a      	ldr	r2, [pc, #360]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ee2:	4b58      	ldr	r3, [pc, #352]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	4a57      	ldr	r2, [pc, #348]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008ee8:	f023 0304 	bic.w	r3, r3, #4
 8008eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d015      	beq.n	8008f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef6:	f7fc fc33 	bl	8005760 <HAL_GetTick>
 8008efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008efc:	e00a      	b.n	8008f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008efe:	f7fc fc2f 	bl	8005760 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e0ce      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f14:	4b4b      	ldr	r3, [pc, #300]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0ee      	beq.n	8008efe <HAL_RCC_OscConfig+0x386>
 8008f20:	e014      	b.n	8008f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f22:	f7fc fc1d 	bl	8005760 <HAL_GetTick>
 8008f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f28:	e00a      	b.n	8008f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2a:	f7fc fc19 	bl	8005760 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e0b8      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f40:	4b40      	ldr	r3, [pc, #256]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1ee      	bne.n	8008f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d105      	bne.n	8008f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f52:	4b3c      	ldr	r3, [pc, #240]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	4a3b      	ldr	r2, [pc, #236]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80a4 	beq.w	80090b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f68:	4b36      	ldr	r3, [pc, #216]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 030c 	and.w	r3, r3, #12
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d06b      	beq.n	800904c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d149      	bne.n	8009010 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7c:	4b31      	ldr	r3, [pc, #196]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a30      	ldr	r2, [pc, #192]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fc fbea 	bl	8005760 <HAL_GetTick>
 8008f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f90:	f7fc fbe6 	bl	8005760 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e087      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa2:	4b28      	ldr	r3, [pc, #160]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f0      	bne.n	8008f90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69da      	ldr	r2, [r3, #28]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	019b      	lsls	r3, r3, #6
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	085b      	lsrs	r3, r3, #1
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	061b      	lsls	r3, r3, #24
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fdc:	4b19      	ldr	r3, [pc, #100]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8008fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe8:	f7fc fbba 	bl	8005760 <HAL_GetTick>
 8008fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fee:	e008      	b.n	8009002 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ff0:	f7fc fbb6 	bl	8005760 <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d901      	bls.n	8009002 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e057      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009002:	4b10      	ldr	r3, [pc, #64]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f0      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x478>
 800900e:	e04f      	b.n	80090b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a0b      	ldr	r2, [pc, #44]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8009016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800901a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800901c:	f7fc fba0 	bl	8005760 <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009022:	e008      	b.n	8009036 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009024:	f7fc fb9c 	bl	8005760 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d901      	bls.n	8009036 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e03d      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009036:	4b03      	ldr	r3, [pc, #12]	; (8009044 <HAL_RCC_OscConfig+0x4cc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1f0      	bne.n	8009024 <HAL_RCC_OscConfig+0x4ac>
 8009042:	e035      	b.n	80090b0 <HAL_RCC_OscConfig+0x538>
 8009044:	40023800 	.word	0x40023800
 8009048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800904c:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <HAL_RCC_OscConfig+0x544>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d028      	beq.n	80090ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009064:	429a      	cmp	r2, r3
 8009066:	d121      	bne.n	80090ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009072:	429a      	cmp	r2, r3
 8009074:	d11a      	bne.n	80090ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800907c:	4013      	ands	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009084:	4293      	cmp	r3, r2
 8009086:	d111      	bne.n	80090ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	3b01      	subs	r3, #1
 8009096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d107      	bne.n	80090ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d001      	beq.n	80090b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40023800 	.word	0x40023800

080090c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0d0      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090d8:	4b6a      	ldr	r3, [pc, #424]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d910      	bls.n	8009108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090e6:	4b67      	ldr	r3, [pc, #412]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f023 020f 	bic.w	r2, r3, #15
 80090ee:	4965      	ldr	r1, [pc, #404]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090f6:	4b63      	ldr	r3, [pc, #396]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d001      	beq.n	8009108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0b8      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d020      	beq.n	8009156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009120:	4b59      	ldr	r3, [pc, #356]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a58      	ldr	r2, [pc, #352]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800912a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0308 	and.w	r3, r3, #8
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009138:	4b53      	ldr	r3, [pc, #332]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	4a52      	ldr	r2, [pc, #328]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800913e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009144:	4b50      	ldr	r3, [pc, #320]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	494d      	ldr	r1, [pc, #308]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009152:	4313      	orrs	r3, r2
 8009154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d040      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d107      	bne.n	800917a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800916a:	4b47      	ldr	r3, [pc, #284]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d115      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e07f      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d107      	bne.n	8009192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009182:	4b41      	ldr	r3, [pc, #260]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e073      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009192:	4b3d      	ldr	r3, [pc, #244]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e06b      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091a2:	4b39      	ldr	r3, [pc, #228]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f023 0203 	bic.w	r2, r3, #3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	4936      	ldr	r1, [pc, #216]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b4:	f7fc fad4 	bl	8005760 <HAL_GetTick>
 80091b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ba:	e00a      	b.n	80091d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091bc:	f7fc fad0 	bl	8005760 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e053      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d2:	4b2d      	ldr	r3, [pc, #180]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 020c 	and.w	r2, r3, #12
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d1eb      	bne.n	80091bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091e4:	4b27      	ldr	r3, [pc, #156]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 030f 	and.w	r3, r3, #15
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d210      	bcs.n	8009214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f023 020f 	bic.w	r2, r3, #15
 80091fa:	4922      	ldr	r1, [pc, #136]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	4313      	orrs	r3, r2
 8009200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009202:	4b20      	ldr	r3, [pc, #128]	; (8009284 <HAL_RCC_ClockConfig+0x1c4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d001      	beq.n	8009214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e032      	b.n	800927a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d008      	beq.n	8009232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009220:	4b19      	ldr	r3, [pc, #100]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	4916      	ldr	r1, [pc, #88]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800922e:	4313      	orrs	r3, r2
 8009230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	490e      	ldr	r1, [pc, #56]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800924e:	4313      	orrs	r3, r2
 8009250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009252:	f000 f821 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 8009256:	4602      	mov	r2, r0
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <HAL_RCC_ClockConfig+0x1c8>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	091b      	lsrs	r3, r3, #4
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	490a      	ldr	r1, [pc, #40]	; (800928c <HAL_RCC_ClockConfig+0x1cc>)
 8009264:	5ccb      	ldrb	r3, [r1, r3]
 8009266:	fa22 f303 	lsr.w	r3, r2, r3
 800926a:	4a09      	ldr	r2, [pc, #36]	; (8009290 <HAL_RCC_ClockConfig+0x1d0>)
 800926c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <HAL_RCC_ClockConfig+0x1d4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4618      	mov	r0, r3
 8009274:	f7fc f934 	bl	80054e0 <HAL_InitTick>

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40023c00 	.word	0x40023c00
 8009288:	40023800 	.word	0x40023800
 800928c:	08071a10 	.word	0x08071a10
 8009290:	200000c8 	.word	0x200000c8
 8009294:	200000cc 	.word	0x200000cc

08009298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800929c:	b090      	sub	sp, #64	; 0x40
 800929e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	637b      	str	r3, [r7, #52]	; 0x34
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	2300      	movs	r3, #0
 80092aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092b0:	4b59      	ldr	r3, [pc, #356]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 030c 	and.w	r3, r3, #12
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d00d      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0x40>
 80092bc:	2b08      	cmp	r3, #8
 80092be:	f200 80a1 	bhi.w	8009404 <HAL_RCC_GetSysClockFreq+0x16c>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_RCC_GetSysClockFreq+0x34>
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d003      	beq.n	80092d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80092ca:	e09b      	b.n	8009404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092cc:	4b53      	ldr	r3, [pc, #332]	; (800941c <HAL_RCC_GetSysClockFreq+0x184>)
 80092ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092d0:	e09b      	b.n	800940a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092d2:	4b53      	ldr	r3, [pc, #332]	; (8009420 <HAL_RCC_GetSysClockFreq+0x188>)
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092d6:	e098      	b.n	800940a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092d8:	4b4f      	ldr	r3, [pc, #316]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80092e2:	4b4d      	ldr	r3, [pc, #308]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d028      	beq.n	8009340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092ee:	4b4a      	ldr	r3, [pc, #296]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	099b      	lsrs	r3, r3, #6
 80092f4:	2200      	movs	r2, #0
 80092f6:	623b      	str	r3, [r7, #32]
 80092f8:	627a      	str	r2, [r7, #36]	; 0x24
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009300:	2100      	movs	r1, #0
 8009302:	4b47      	ldr	r3, [pc, #284]	; (8009420 <HAL_RCC_GetSysClockFreq+0x188>)
 8009304:	fb03 f201 	mul.w	r2, r3, r1
 8009308:	2300      	movs	r3, #0
 800930a:	fb00 f303 	mul.w	r3, r0, r3
 800930e:	4413      	add	r3, r2
 8009310:	4a43      	ldr	r2, [pc, #268]	; (8009420 <HAL_RCC_GetSysClockFreq+0x188>)
 8009312:	fba0 1202 	umull	r1, r2, r0, r2
 8009316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009318:	460a      	mov	r2, r1
 800931a:	62ba      	str	r2, [r7, #40]	; 0x28
 800931c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931e:	4413      	add	r3, r2
 8009320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	2200      	movs	r2, #0
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	61fa      	str	r2, [r7, #28]
 800932a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800932e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009332:	f7f6 ffbd 	bl	80002b0 <__aeabi_uldivmod>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4613      	mov	r3, r2
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933e:	e053      	b.n	80093e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009340:	4b35      	ldr	r3, [pc, #212]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	099b      	lsrs	r3, r3, #6
 8009346:	2200      	movs	r2, #0
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	617a      	str	r2, [r7, #20]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009352:	f04f 0b00 	mov.w	fp, #0
 8009356:	4652      	mov	r2, sl
 8009358:	465b      	mov	r3, fp
 800935a:	f04f 0000 	mov.w	r0, #0
 800935e:	f04f 0100 	mov.w	r1, #0
 8009362:	0159      	lsls	r1, r3, #5
 8009364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009368:	0150      	lsls	r0, r2, #5
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	ebb2 080a 	subs.w	r8, r2, sl
 8009372:	eb63 090b 	sbc.w	r9, r3, fp
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800938a:	ebb2 0408 	subs.w	r4, r2, r8
 800938e:	eb63 0509 	sbc.w	r5, r3, r9
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	00eb      	lsls	r3, r5, #3
 800939c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093a0:	00e2      	lsls	r2, r4, #3
 80093a2:	4614      	mov	r4, r2
 80093a4:	461d      	mov	r5, r3
 80093a6:	eb14 030a 	adds.w	r3, r4, sl
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	eb45 030b 	adc.w	r3, r5, fp
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093be:	4629      	mov	r1, r5
 80093c0:	028b      	lsls	r3, r1, #10
 80093c2:	4621      	mov	r1, r4
 80093c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093c8:	4621      	mov	r1, r4
 80093ca:	028a      	lsls	r2, r1, #10
 80093cc:	4610      	mov	r0, r2
 80093ce:	4619      	mov	r1, r3
 80093d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d2:	2200      	movs	r2, #0
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	60fa      	str	r2, [r7, #12]
 80093d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093dc:	f7f6 ff68 	bl	80002b0 <__aeabi_uldivmod>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4613      	mov	r3, r2
 80093e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <HAL_RCC_GetSysClockFreq+0x180>)
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	3301      	adds	r3, #1
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80093f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009402:	e002      	b.n	800940a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <HAL_RCC_GetSysClockFreq+0x184>)
 8009406:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800940c:	4618      	mov	r0, r3
 800940e:	3740      	adds	r7, #64	; 0x40
 8009410:	46bd      	mov	sp, r7
 8009412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009416:	bf00      	nop
 8009418:	40023800 	.word	0x40023800
 800941c:	00f42400 	.word	0x00f42400
 8009420:	017d7840 	.word	0x017d7840

08009424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009428:	4b03      	ldr	r3, [pc, #12]	; (8009438 <HAL_RCC_GetHCLKFreq+0x14>)
 800942a:	681b      	ldr	r3, [r3, #0]
}
 800942c:	4618      	mov	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	200000c8 	.word	0x200000c8

0800943c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009440:	f7ff fff0 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8009444:	4602      	mov	r2, r0
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	0a9b      	lsrs	r3, r3, #10
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	4903      	ldr	r1, [pc, #12]	; (8009460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009452:	5ccb      	ldrb	r3, [r1, r3]
 8009454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009458:	4618      	mov	r0, r3
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40023800 	.word	0x40023800
 8009460:	08071a20 	.word	0x08071a20

08009464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009468:	f7ff ffdc 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 800946c:	4602      	mov	r2, r0
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	0b5b      	lsrs	r3, r3, #13
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	4903      	ldr	r1, [pc, #12]	; (8009488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800947a:	5ccb      	ldrb	r3, [r1, r3]
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009480:	4618      	mov	r0, r3
 8009482:	bd80      	pop	{r7, pc}
 8009484:	40023800 	.word	0x40023800
 8009488:	08071a20 	.word	0x08071a20

0800948c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	220f      	movs	r2, #15
 800949a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800949c:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <HAL_RCC_GetClockConfig+0x5c>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0203 	and.w	r2, r3, #3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <HAL_RCC_GetClockConfig+0x5c>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80094b4:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <HAL_RCC_GetClockConfig+0x5c>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80094c0:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <HAL_RCC_GetClockConfig+0x5c>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	08db      	lsrs	r3, r3, #3
 80094c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80094ce:	4b07      	ldr	r3, [pc, #28]	; (80094ec <HAL_RCC_GetClockConfig+0x60>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	601a      	str	r2, [r3, #0]
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40023800 	.word	0x40023800
 80094ec:	40023c00 	.word	0x40023c00

080094f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d012      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009518:	4b69      	ldr	r3, [pc, #420]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	4a68      	ldr	r2, [pc, #416]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800951e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009522:	6093      	str	r3, [r2, #8]
 8009524:	4b66      	ldr	r3, [pc, #408]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952c:	4964      	ldr	r1, [pc, #400]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952e:	4313      	orrs	r3, r2
 8009530:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800953a:	2301      	movs	r3, #1
 800953c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d017      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800954a:	4b5d      	ldr	r3, [pc, #372]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009558:	4959      	ldr	r1, [pc, #356]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800955a:	4313      	orrs	r3, r2
 800955c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009568:	d101      	bne.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009576:	2301      	movs	r3, #1
 8009578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d017      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009586:	4b4e      	ldr	r3, [pc, #312]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800958c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	494a      	ldr	r1, [pc, #296]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095a4:	d101      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80095a6:	2301      	movs	r3, #1
 80095a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80095b2:	2301      	movs	r3, #1
 80095b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 808b 	beq.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80095d4:	4b3a      	ldr	r3, [pc, #232]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d8:	4a39      	ldr	r2, [pc, #228]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095de:	6413      	str	r3, [r2, #64]	; 0x40
 80095e0:	4b37      	ldr	r3, [pc, #220]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80095ec:	4b35      	ldr	r3, [pc, #212]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a34      	ldr	r2, [pc, #208]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80095f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095f8:	f7fc f8b2 	bl	8005760 <HAL_GetTick>
 80095fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80095fe:	e008      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009600:	f7fc f8ae 	bl	8005760 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b64      	cmp	r3, #100	; 0x64
 800960c:	d901      	bls.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e357      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009612:	4b2c      	ldr	r3, [pc, #176]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0f0      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800961e:	4b28      	ldr	r3, [pc, #160]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009626:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d035      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	429a      	cmp	r2, r3
 800963a:	d02e      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800963c:	4b20      	ldr	r3, [pc, #128]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009644:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009646:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964a:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800964c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009650:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009652:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	4a1a      	ldr	r2, [pc, #104]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800965c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800965e:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b01      	cmp	r3, #1
 800966e:	d114      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009670:	f7fc f876 	bl	8005760 <HAL_GetTick>
 8009674:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009676:	e00a      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009678:	f7fc f872 	bl	8005760 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	f241 3288 	movw	r2, #5000	; 0x1388
 8009686:	4293      	cmp	r3, r2
 8009688:	d901      	bls.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e319      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800968e:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0ee      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a6:	d111      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096b6:	400b      	ands	r3, r1
 80096b8:	4901      	ldr	r1, [pc, #4]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	608b      	str	r3, [r1, #8]
 80096be:	e00b      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80096c0:	40023800 	.word	0x40023800
 80096c4:	40007000 	.word	0x40007000
 80096c8:	0ffffcff 	.word	0x0ffffcff
 80096cc:	4baa      	ldr	r3, [pc, #680]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	4aa9      	ldr	r2, [pc, #676]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80096d6:	6093      	str	r3, [r2, #8]
 80096d8:	4ba7      	ldr	r3, [pc, #668]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e4:	49a4      	ldr	r1, [pc, #656]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d010      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096f6:	4ba0      	ldr	r3, [pc, #640]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fc:	4a9e      	ldr	r2, [pc, #632]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009706:	4b9c      	ldr	r3, [pc, #624]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009708:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	4999      	ldr	r1, [pc, #612]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009712:	4313      	orrs	r3, r2
 8009714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009724:	4b94      	ldr	r3, [pc, #592]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009732:	4991      	ldr	r1, [pc, #580]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009734:	4313      	orrs	r3, r2
 8009736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009746:	4b8c      	ldr	r3, [pc, #560]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009754:	4988      	ldr	r1, [pc, #544]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009756:	4313      	orrs	r3, r2
 8009758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00a      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009768:	4b83      	ldr	r3, [pc, #524]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800976a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009776:	4980      	ldr	r1, [pc, #512]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009778:	4313      	orrs	r3, r2
 800977a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800978a:	4b7b      	ldr	r3, [pc, #492]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800978c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009798:	4977      	ldr	r1, [pc, #476]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800979a:	4313      	orrs	r3, r2
 800979c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097ac:	4b72      	ldr	r3, [pc, #456]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b2:	f023 0203 	bic.w	r2, r3, #3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ba:	496f      	ldr	r1, [pc, #444]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097ce:	4b6a      	ldr	r3, [pc, #424]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d4:	f023 020c 	bic.w	r2, r3, #12
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097dc:	4966      	ldr	r1, [pc, #408]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097f0:	4b61      	ldr	r3, [pc, #388]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fe:	495e      	ldr	r1, [pc, #376]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009800:	4313      	orrs	r3, r2
 8009802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009812:	4b59      	ldr	r3, [pc, #356]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009818:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009820:	4955      	ldr	r1, [pc, #340]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009822:	4313      	orrs	r3, r2
 8009824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00a      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009834:	4b50      	ldr	r3, [pc, #320]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009842:	494d      	ldr	r1, [pc, #308]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009844:	4313      	orrs	r3, r2
 8009846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00a      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009856:	4b48      	ldr	r3, [pc, #288]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009864:	4944      	ldr	r1, [pc, #272]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009866:	4313      	orrs	r3, r2
 8009868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009878:	4b3f      	ldr	r3, [pc, #252]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800987a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800987e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009886:	493c      	ldr	r1, [pc, #240]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009888:	4313      	orrs	r3, r2
 800988a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800989a:	4b37      	ldr	r3, [pc, #220]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800989c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a8:	4933      	ldr	r1, [pc, #204]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098bc:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ca:	492b      	ldr	r1, [pc, #172]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d011      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80098de:	4b26      	ldr	r3, [pc, #152]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ec:	4922      	ldr	r1, [pc, #136]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098fc:	d101      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80098fe:	2301      	movs	r3, #1
 8009900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0308 	and.w	r3, r3, #8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800990e:	2301      	movs	r3, #1
 8009910:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009924:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992c:	4912      	ldr	r1, [pc, #72]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800992e:	4313      	orrs	r3, r2
 8009930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009940:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009950:	4909      	ldr	r1, [pc, #36]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009952:	4313      	orrs	r3, r2
 8009954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d006      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80d9 	beq.w	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a01      	ldr	r2, [pc, #4]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009976:	e001      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009978:	40023800 	.word	0x40023800
 800997c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800997e:	f7fb feef 	bl	8005760 <HAL_GetTick>
 8009982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009984:	e008      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009986:	f7fb feeb 	bl	8005760 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b64      	cmp	r3, #100	; 0x64
 8009992:	d901      	bls.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e194      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009998:	4b6c      	ldr	r3, [pc, #432]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f0      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d021      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11d      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80099b8:	4b64      	ldr	r3, [pc, #400]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099be:	0c1b      	lsrs	r3, r3, #16
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099c6:	4b61      	ldr	r3, [pc, #388]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099cc:	0e1b      	lsrs	r3, r3, #24
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	019a      	lsls	r2, r3, #6
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	431a      	orrs	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	071b      	lsls	r3, r3, #28
 80099ec:	4957      	ldr	r1, [pc, #348]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a08:	d00a      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d02e      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a1e:	d129      	bne.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a20:	4b4a      	ldr	r3, [pc, #296]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a26:	0c1b      	lsrs	r3, r3, #16
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a2e:	4b47      	ldr	r3, [pc, #284]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a34:	0f1b      	lsrs	r3, r3, #28
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	019a      	lsls	r2, r3, #6
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	061b      	lsls	r3, r3, #24
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	071b      	lsls	r3, r3, #28
 8009a54:	493d      	ldr	r1, [pc, #244]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a5c:	4b3b      	ldr	r3, [pc, #236]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a62:	f023 021f 	bic.w	r2, r3, #31
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4937      	ldr	r1, [pc, #220]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01d      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a80:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a86:	0e1b      	lsrs	r3, r3, #24
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a94:	0f1b      	lsrs	r3, r3, #28
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	019a      	lsls	r2, r3, #6
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	061b      	lsls	r3, r3, #24
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	071b      	lsls	r3, r3, #28
 8009ab4:	4925      	ldr	r1, [pc, #148]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d011      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	019a      	lsls	r2, r3, #6
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	061b      	lsls	r3, r3, #24
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	071b      	lsls	r3, r3, #28
 8009ae4:	4919      	ldr	r1, [pc, #100]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009aec:	4b17      	ldr	r3, [pc, #92]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a16      	ldr	r2, [pc, #88]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009af2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009af8:	f7fb fe32 	bl	8005760 <HAL_GetTick>
 8009afc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009afe:	e008      	b.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b00:	f7fb fe2e 	bl	8005760 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b64      	cmp	r3, #100	; 0x64
 8009b0c:	d901      	bls.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e0d7      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b12:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f0      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	f040 80cd 	bne.w	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a08      	ldr	r2, [pc, #32]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b32:	f7fb fe15 	bl	8005760 <HAL_GetTick>
 8009b36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b38:	e00a      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b3a:	f7fb fe11 	bl	8005760 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	2b64      	cmp	r3, #100	; 0x64
 8009b46:	d903      	bls.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e0ba      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009b4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b50:	4b5e      	ldr	r3, [pc, #376]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b5c:	d0ed      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d02e      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d12a      	bne.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b86:	4b51      	ldr	r3, [pc, #324]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8c:	0c1b      	lsrs	r3, r3, #16
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b94:	4b4d      	ldr	r3, [pc, #308]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9a:	0f1b      	lsrs	r3, r3, #28
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	019a      	lsls	r2, r3, #6
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	071b      	lsls	r3, r3, #28
 8009bba:	4944      	ldr	r1, [pc, #272]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009bc2:	4b42      	ldr	r3, [pc, #264]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	493d      	ldr	r1, [pc, #244]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d022      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bf0:	d11d      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009bf2:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c00:	4b32      	ldr	r3, [pc, #200]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c06:	0f1b      	lsrs	r3, r3, #28
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	019a      	lsls	r2, r3, #6
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	061b      	lsls	r3, r3, #24
 8009c20:	431a      	orrs	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	071b      	lsls	r3, r3, #28
 8009c26:	4929      	ldr	r1, [pc, #164]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d028      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c3a:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c40:	0e1b      	lsrs	r3, r3, #24
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009c48:	4b20      	ldr	r3, [pc, #128]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	0c1b      	lsrs	r3, r3, #16
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	019a      	lsls	r2, r3, #6
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	431a      	orrs	r2, r3
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	061b      	lsls	r3, r3, #24
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	4917      	ldr	r1, [pc, #92]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009c76:	4b15      	ldr	r3, [pc, #84]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4911      	ldr	r1, [pc, #68]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0e      	ldr	r2, [pc, #56]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c98:	f7fb fd62 	bl	8005760 <HAL_GetTick>
 8009c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ca0:	f7fb fd5e 	bl	8005760 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b64      	cmp	r3, #100	; 0x64
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e007      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cb2:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cbe:	d1ef      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40023800 	.word	0x40023800

08009cd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e081      	b.n	8009de6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7f5b      	ldrb	r3, [r3, #29]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d105      	bne.n	8009cf8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7fb f920 	bl	8004f38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	22ca      	movs	r2, #202	; 0xca
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2253      	movs	r2, #83	; 0x53
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb16 	bl	800a340 <RTC_EnterInitMode>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2204      	movs	r2, #4
 8009d26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e05c      	b.n	8009de6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6899      	ldr	r1, [r3, #8]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <HAL_RTC_Init+0x120>)
 8009d38:	400b      	ands	r3, r1
 8009d3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6899      	ldr	r1, [r3, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	431a      	orrs	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68d2      	ldr	r2, [r2, #12]
 8009d62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6919      	ldr	r1, [r3, #16]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	041a      	lsls	r2, r3, #16
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d86:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10e      	bne.n	8009db4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 faaa 	bl	800a2f0 <HAL_RTC_WaitForSynchro>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2204      	movs	r2, #4
 8009dae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e018      	b.n	8009de6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0208 	bic.w	r2, r2, #8
 8009dc2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	22ff      	movs	r2, #255	; 0xff
 8009ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009de4:	2300      	movs	r3, #0
  }
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	ff8fffbf 	.word	0xff8fffbf

08009df4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	7f1b      	ldrb	r3, [r3, #28]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_RTC_SetTime+0x1c>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e0a8      	b.n	8009f62 <HAL_RTC_SetTime+0x16e>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d126      	bne.n	8009e70 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2200      	movs	r2, #0
 8009e34:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 faac 	bl	800a398 <RTC_ByteToBcd2>
 8009e40:	4603      	mov	r3, r0
 8009e42:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 faa5 	bl	800a398 <RTC_ByteToBcd2>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e52:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	789b      	ldrb	r3, [r3, #2]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fa9d 	bl	800a398 <RTC_ByteToBcd2>
 8009e5e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009e60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	7b1b      	ldrb	r3, [r3, #12]
 8009e68:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	e018      	b.n	8009ea2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009e90:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009e96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	7b1b      	ldrb	r3, [r3, #12]
 8009e9c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	22ca      	movs	r2, #202	; 0xca
 8009ea8:	625a      	str	r2, [r3, #36]	; 0x24
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2253      	movs	r2, #83	; 0x53
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 fa44 	bl	800a340 <RTC_EnterInitMode>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	22ff      	movs	r2, #255	; 0xff
 8009ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2204      	movs	r2, #4
 8009eca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e045      	b.n	8009f62 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <HAL_RTC_SetTime+0x178>)
 8009ede:	400b      	ands	r3, r1
 8009ee0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ef0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6899      	ldr	r1, [r3, #8]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f18:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d111      	bne.n	8009f4c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 f9e1 	bl	800a2f0 <HAL_RTC_WaitForSynchro>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	22ff      	movs	r2, #255	; 0xff
 8009f3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e00a      	b.n	8009f62 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	22ff      	movs	r2, #255	; 0xff
 8009f52:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009f60:	2300      	movs	r3, #0
  }
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd90      	pop	{r4, r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	007f7f7f 	.word	0x007f7f7f

08009f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	7f1b      	ldrb	r3, [r3, #28]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_RTC_SetDate+0x1c>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e092      	b.n	800a0b2 <HAL_RTC_SetDate+0x142>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2202      	movs	r2, #2
 8009f96:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10e      	bne.n	8009fbc <HAL_RTC_SetDate+0x4c>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	f023 0310 	bic.w	r3, r3, #16
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	330a      	adds	r3, #10
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11c      	bne.n	8009ffc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	78db      	ldrb	r3, [r3, #3]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f9e6 	bl	800a398 <RTC_ByteToBcd2>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f9df 	bl	800a398 <RTC_ByteToBcd2>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009fde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	789b      	ldrb	r3, [r3, #2]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f9d7 	bl	800a398 <RTC_ByteToBcd2>
 8009fea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009fec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	617b      	str	r3, [r7, #20]
 8009ffa:	e00e      	b.n	800a01a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	78db      	ldrb	r3, [r3, #3]
 800a000:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a008:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a00e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	22ca      	movs	r2, #202	; 0xca
 800a020:	625a      	str	r2, [r3, #36]	; 0x24
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2253      	movs	r2, #83	; 0x53
 800a028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 f988 	bl	800a340 <RTC_EnterInitMode>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	22ff      	movs	r2, #255	; 0xff
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2204      	movs	r2, #4
 800a042:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e031      	b.n	800a0b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	6979      	ldr	r1, [r7, #20]
 800a054:	4b19      	ldr	r3, [pc, #100]	; (800a0bc <HAL_RTC_SetDate+0x14c>)
 800a056:	400b      	ands	r3, r1
 800a058:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a068:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b00      	cmp	r3, #0
 800a076:	d111      	bne.n	800a09c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f939 	bl	800a2f0 <HAL_RTC_WaitForSynchro>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	22ff      	movs	r2, #255	; 0xff
 800a08a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2204      	movs	r2, #4
 800a090:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e00a      	b.n	800a0b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	22ff      	movs	r2, #255	; 0xff
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd90      	pop	{r4, r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	00ffff3f 	.word	0x00ffff3f

0800a0c0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a0c0:	b590      	push	{r4, r7, lr}
 800a0c2:	b089      	sub	sp, #36	; 0x24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7f1b      	ldrb	r3, [r3, #28]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <HAL_RTC_SetAlarm+0x24>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e101      	b.n	800a2e8 <HAL_RTC_SetAlarm+0x228>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d137      	bne.n	800a166 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d102      	bne.n	800a10a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f942 	bl	800a398 <RTC_ByteToBcd2>
 800a114:	4603      	mov	r3, r0
 800a116:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f93b 	bl	800a398 <RTC_ByteToBcd2>
 800a122:	4603      	mov	r3, r0
 800a124:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a126:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	789b      	ldrb	r3, [r3, #2]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f933 	bl	800a398 <RTC_ByteToBcd2>
 800a132:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a134:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	7b1b      	ldrb	r3, [r3, #12]
 800a13c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a13e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 f925 	bl	800a398 <RTC_ByteToBcd2>
 800a14e:	4603      	mov	r3, r0
 800a150:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a152:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a15a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a160:	4313      	orrs	r3, r2
 800a162:	61fb      	str	r3, [r7, #28]
 800a164:	e023      	b.n	800a1ae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2200      	movs	r2, #0
 800a178:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a186:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a18c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	7b1b      	ldrb	r3, [r3, #12]
 800a192:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a194:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a19c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a19e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a1a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	22ca      	movs	r2, #202	; 0xca
 800a1c0:	625a      	str	r2, [r3, #36]	; 0x24
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2253      	movs	r2, #83	; 0x53
 800a1c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d2:	d13f      	bne.n	800a254 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689a      	ldr	r2, [r3, #8]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1f4:	f7fb fab4 	bl	8005760 <HAL_GetTick>
 800a1f8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a1fa:	e013      	b.n	800a224 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a1fc:	f7fb fab0 	bl	8005760 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a20a:	d90b      	bls.n	800a224 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	22ff      	movs	r2, #255	; 0xff
 800a212:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2203      	movs	r2, #3
 800a218:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e061      	b.n	800a2e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0e4      	beq.n	800a1fc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a250:	609a      	str	r2, [r3, #8]
 800a252:	e03e      	b.n	800a2d2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a262:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a272:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a274:	f7fb fa74 	bl	8005760 <HAL_GetTick>
 800a278:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a27a:	e013      	b.n	800a2a4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a27c:	f7fb fa70 	bl	8005760 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a28a:	d90b      	bls.n	800a2a4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2203      	movs	r2, #3
 800a298:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e021      	b.n	800a2e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0e4      	beq.n	800a27c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	22ff      	movs	r2, #255	; 0xff
 800a2d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3724      	adds	r7, #36	; 0x24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd90      	pop	{r4, r7, pc}

0800a2f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a30a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a30c:	f7fb fa28 	bl	8005760 <HAL_GetTick>
 800a310:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a312:	e009      	b.n	800a328 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a314:	f7fb fa24 	bl	8005760 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a322:	d901      	bls.n	800a328 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e007      	b.n	800a338 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0ee      	beq.n	800a314 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d119      	bne.n	800a38e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a364:	f7fb f9fc 	bl	8005760 <HAL_GetTick>
 800a368:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a36a:	e009      	b.n	800a380 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a36c:	f7fb f9f8 	bl	8005760 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a37a:	d901      	bls.n	800a380 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e007      	b.n	800a390 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0ee      	beq.n	800a36c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a3a6:	e005      	b.n	800a3b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	3b0a      	subs	r3, #10
 800a3b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	d8f6      	bhi.n	800a3a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	b2db      	uxtb	r3, r3
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7f1b      	ldrb	r3, [r3, #28]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d101      	bne.n	800a3f0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e03e      	b.n	800a46e <HAL_RTCEx_SetTimeStamp+0x9a>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a404:	4013      	ands	r3, r2
 800a406:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	22ca      	movs	r2, #202	; 0xca
 800a416:	625a      	str	r2, [r3, #36]	; 0x24
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2253      	movs	r2, #83	; 0x53
 800a41e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0206 	bic.w	r2, r2, #6
 800a42e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a456:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	22ff      	movs	r2, #255	; 0xff
 800a45e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	fffff7f7 	.word	0xfffff7f7

0800a480 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e025      	b.n	800a4e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7fb f80f 	bl	80054cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f002 f82f 	bl	800c524 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	f002 f883 	bl	800c5dc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d101      	bne.n	800a506 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
 800a504:	e021      	b.n	800a54a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d002      	beq.n	800a512 <HAL_SDRAM_SendCommand+0x2a>
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	2b05      	cmp	r3, #5
 800a510:	d118      	bne.n	800a544 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2202      	movs	r2, #2
 800a516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f002 f8c4 	bl	800c6b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d104      	bne.n	800a53a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2205      	movs	r2, #5
 800a534:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a538:	e006      	b.n	800a548 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a542:	e001      	b.n	800a548 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d101      	bne.n	800a56c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a568:	2302      	movs	r3, #2
 800a56a:	e016      	b.n	800a59a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d10f      	bne.n	800a598 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2202      	movs	r2, #2
 800a57c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f002 f8b6 	bl	800c6f8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	e000      	b.n	800a59a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e09d      	b.n	800a6f0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d108      	bne.n	800a5ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5c4:	d009      	beq.n	800a5da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	61da      	str	r2, [r3, #28]
 800a5cc:	e005      	b.n	800a5da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fa fccd 	bl	8004f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a610:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a61a:	d902      	bls.n	800a622 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a61c:	2300      	movs	r3, #0
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e002      	b.n	800a628 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a626:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a630:	d007      	beq.n	800a642 <HAL_SPI_Init+0xa0>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a63a:	d002      	beq.n	800a642 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67a:	431a      	orrs	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a684:	ea42 0103 	orr.w	r1, r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	0c1b      	lsrs	r3, r3, #16
 800a69e:	f003 0204 	and.w	r2, r3, #4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	f003 0310 	and.w	r3, r3, #16
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a6be:	ea42 0103 	orr.w	r1, r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69da      	ldr	r2, [r3, #28]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e049      	b.n	800a79e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7fa fc9a 	bl	8005058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f000 fac0 	bl	800acbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d001      	beq.n	800a7c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e054      	b.n	800a86a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a26      	ldr	r2, [pc, #152]	; (800a878 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d022      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ea:	d01d      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <HAL_TIM_Base_Start_IT+0xd4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d018      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a21      	ldr	r2, [pc, #132]	; (800a880 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d013      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <HAL_TIM_Base_Start_IT+0xdc>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00e      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <HAL_TIM_Base_Start_IT+0xe0>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d009      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <HAL_TIM_Base_Start_IT+0xe4>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d004      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1b      	ldr	r2, [pc, #108]	; (800a890 <HAL_TIM_Base_Start_IT+0xe8>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d115      	bne.n	800a854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <HAL_TIM_Base_Start_IT+0xec>)
 800a830:	4013      	ands	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b06      	cmp	r3, #6
 800a838:	d015      	beq.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a840:	d011      	beq.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f042 0201 	orr.w	r2, r2, #1
 800a850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a852:	e008      	b.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f042 0201 	orr.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e000      	b.n	800a868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40010000 	.word	0x40010000
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40010400 	.word	0x40010400
 800a88c:	40014000 	.word	0x40014000
 800a890:	40001800 	.word	0x40001800
 800a894:	00010007 	.word	0x00010007

0800a898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d122      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d11b      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0202 	mvn.w	r2, #2
 800a8c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f9d0 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f9c2 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f9d3 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d122      	bne.n	800a948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d11b      	bne.n	800a948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0204 	mvn.w	r2, #4
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2202      	movs	r2, #2
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f9a6 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f998 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f9a9 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0308 	and.w	r3, r3, #8
 800a952:	2b08      	cmp	r3, #8
 800a954:	d122      	bne.n	800a99c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f003 0308 	and.w	r3, r3, #8
 800a960:	2b08      	cmp	r3, #8
 800a962:	d11b      	bne.n	800a99c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0208 	mvn.w	r2, #8
 800a96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2204      	movs	r2, #4
 800a972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f97c 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a988:	e005      	b.n	800a996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f96e 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f97f 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0310 	and.w	r3, r3, #16
 800a9a6:	2b10      	cmp	r3, #16
 800a9a8:	d122      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	2b10      	cmp	r3, #16
 800a9b6:	d11b      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0210 	mvn.w	r2, #16
 800a9c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2208      	movs	r2, #8
 800a9c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f952 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a9dc:	e005      	b.n	800a9ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f944 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f955 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d10e      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d107      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f06f 0201 	mvn.w	r2, #1
 800aa14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7f8 f920 	bl	8002c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa26:	2b80      	cmp	r3, #128	; 0x80
 800aa28:	d10e      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa34:	2b80      	cmp	r3, #128	; 0x80
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fb0c 	bl	800b060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa56:	d10e      	bne.n	800aa76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d107      	bne.n	800aa76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 faff 	bl	800b074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d10e      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d107      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f903 	bl	800aca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f003 0320 	and.w	r3, r3, #32
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	d10e      	bne.n	800aace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d107      	bne.n	800aace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f06f 0220 	mvn.w	r2, #32
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fabf 	bl	800b04c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_TIM_ConfigClockSource+0x1c>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e0b4      	b.n	800ac5e <HAL_TIM_ConfigClockSource+0x186>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	4b56      	ldr	r3, [pc, #344]	; (800ac68 <HAL_TIM_ConfigClockSource+0x190>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab2c:	d03e      	beq.n	800abac <HAL_TIM_ConfigClockSource+0xd4>
 800ab2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab32:	f200 8087 	bhi.w	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab3a:	f000 8086 	beq.w	800ac4a <HAL_TIM_ConfigClockSource+0x172>
 800ab3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab42:	d87f      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab44:	2b70      	cmp	r3, #112	; 0x70
 800ab46:	d01a      	beq.n	800ab7e <HAL_TIM_ConfigClockSource+0xa6>
 800ab48:	2b70      	cmp	r3, #112	; 0x70
 800ab4a:	d87b      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab4c:	2b60      	cmp	r3, #96	; 0x60
 800ab4e:	d050      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0x11a>
 800ab50:	2b60      	cmp	r3, #96	; 0x60
 800ab52:	d877      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab54:	2b50      	cmp	r3, #80	; 0x50
 800ab56:	d03c      	beq.n	800abd2 <HAL_TIM_ConfigClockSource+0xfa>
 800ab58:	2b50      	cmp	r3, #80	; 0x50
 800ab5a:	d873      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab5c:	2b40      	cmp	r3, #64	; 0x40
 800ab5e:	d058      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x13a>
 800ab60:	2b40      	cmp	r3, #64	; 0x40
 800ab62:	d86f      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab64:	2b30      	cmp	r3, #48	; 0x30
 800ab66:	d064      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x15a>
 800ab68:	2b30      	cmp	r3, #48	; 0x30
 800ab6a:	d86b      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d060      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x15a>
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d867      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d05c      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x15a>
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	d05a      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x15a>
 800ab7c:	e062      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	6899      	ldr	r1, [r3, #8]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	f000 f9af 	bl	800aef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	609a      	str	r2, [r3, #8]
      break;
 800abaa:	e04f      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	6899      	ldr	r1, [r3, #8]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f000 f998 	bl	800aef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abce:	609a      	str	r2, [r3, #8]
      break;
 800abd0:	e03c      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6859      	ldr	r1, [r3, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	461a      	mov	r2, r3
 800abe0:	f000 f90c 	bl	800adfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2150      	movs	r1, #80	; 0x50
 800abea:	4618      	mov	r0, r3
 800abec:	f000 f965 	bl	800aeba <TIM_ITRx_SetConfig>
      break;
 800abf0:	e02c      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6859      	ldr	r1, [r3, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f000 f92b 	bl	800ae5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2160      	movs	r1, #96	; 0x60
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f955 	bl	800aeba <TIM_ITRx_SetConfig>
      break;
 800ac10:	e01c      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f000 f8ec 	bl	800adfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2140      	movs	r1, #64	; 0x40
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f945 	bl	800aeba <TIM_ITRx_SetConfig>
      break;
 800ac30:	e00c      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f000 f93c 	bl	800aeba <TIM_ITRx_SetConfig>
      break;
 800ac42:	e003      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
      break;
 800ac48:	e000      	b.n	800ac4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	fffeff88 	.word	0xfffeff88

0800ac6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a40      	ldr	r2, [pc, #256]	; (800add0 <TIM_Base_SetConfig+0x114>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d013      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acda:	d00f      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a3d      	ldr	r2, [pc, #244]	; (800add4 <TIM_Base_SetConfig+0x118>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00b      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a3c      	ldr	r2, [pc, #240]	; (800add8 <TIM_Base_SetConfig+0x11c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d007      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a3b      	ldr	r2, [pc, #236]	; (800addc <TIM_Base_SetConfig+0x120>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d003      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a3a      	ldr	r2, [pc, #232]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d108      	bne.n	800ad0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a2f      	ldr	r2, [pc, #188]	; (800add0 <TIM_Base_SetConfig+0x114>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d02b      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1c:	d027      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a2c      	ldr	r2, [pc, #176]	; (800add4 <TIM_Base_SetConfig+0x118>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d023      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a2b      	ldr	r2, [pc, #172]	; (800add8 <TIM_Base_SetConfig+0x11c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d01f      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a2a      	ldr	r2, [pc, #168]	; (800addc <TIM_Base_SetConfig+0x120>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d01b      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a29      	ldr	r2, [pc, #164]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d017      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <TIM_Base_SetConfig+0x128>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d013      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a27      	ldr	r2, [pc, #156]	; (800ade8 <TIM_Base_SetConfig+0x12c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d00f      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a26      	ldr	r2, [pc, #152]	; (800adec <TIM_Base_SetConfig+0x130>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00b      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a25      	ldr	r2, [pc, #148]	; (800adf0 <TIM_Base_SetConfig+0x134>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d007      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a24      	ldr	r2, [pc, #144]	; (800adf4 <TIM_Base_SetConfig+0x138>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d003      	beq.n	800ad6e <TIM_Base_SetConfig+0xb2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a23      	ldr	r2, [pc, #140]	; (800adf8 <TIM_Base_SetConfig+0x13c>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d108      	bne.n	800ad80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a0a      	ldr	r2, [pc, #40]	; (800add0 <TIM_Base_SetConfig+0x114>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d003      	beq.n	800adb4 <TIM_Base_SetConfig+0xf8>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a0c      	ldr	r2, [pc, #48]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d103      	bne.n	800adbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	691a      	ldr	r2, [r3, #16]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	615a      	str	r2, [r3, #20]
}
 800adc2:	bf00      	nop
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40010000 	.word	0x40010000
 800add4:	40000400 	.word	0x40000400
 800add8:	40000800 	.word	0x40000800
 800addc:	40000c00 	.word	0x40000c00
 800ade0:	40010400 	.word	0x40010400
 800ade4:	40014000 	.word	0x40014000
 800ade8:	40014400 	.word	0x40014400
 800adec:	40014800 	.word	0x40014800
 800adf0:	40001800 	.word	0x40001800
 800adf4:	40001c00 	.word	0x40001c00
 800adf8:	40002000 	.word	0x40002000

0800adfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f023 0201 	bic.w	r2, r3, #1
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f023 030a 	bic.w	r3, r3, #10
 800ae38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b087      	sub	sp, #28
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f023 0210 	bic.w	r2, r3, #16
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	031b      	lsls	r3, r3, #12
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b085      	sub	sp, #20
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	f043 0307 	orr.w	r3, r3, #7
 800aedc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	609a      	str	r2, [r3, #8]
}
 800aee4:	bf00      	nop
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	021a      	lsls	r2, r3, #8
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	431a      	orrs	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4313      	orrs	r3, r2
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	609a      	str	r2, [r3, #8]
}
 800af24:	bf00      	nop
 800af26:	371c      	adds	r7, #28
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af40:	2b01      	cmp	r3, #1
 800af42:	d101      	bne.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af44:	2302      	movs	r3, #2
 800af46:	e06d      	b.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a30      	ldr	r2, [pc, #192]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a2f      	ldr	r2, [pc, #188]	; (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d108      	bne.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a20      	ldr	r2, [pc, #128]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d022      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afba:	d01d      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a1d      	ldr	r2, [pc, #116]	; (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d018      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d013      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a1a      	ldr	r2, [pc, #104]	; (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00e      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a15      	ldr	r2, [pc, #84]	; (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d009      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a16      	ldr	r2, [pc, #88]	; (800b044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d004      	beq.n	800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a15      	ldr	r2, [pc, #84]	; (800b048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d10c      	bne.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	4313      	orrs	r3, r2
 800b008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	40010000 	.word	0x40010000
 800b034:	40010400 	.word	0x40010400
 800b038:	40000400 	.word	0x40000400
 800b03c:	40000800 	.word	0x40000800
 800b040:	40000c00 	.word	0x40000c00
 800b044:	40014000 	.word	0x40014000
 800b048:	40001800 	.word	0x40001800

0800b04c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e040      	b.n	800b11c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fa f866 	bl	800517c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2224      	movs	r2, #36	; 0x24
 800b0b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 0201 	bic.w	r2, r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fb64 	bl	800b794 <UART_SetConfig>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e022      	b.n	800b11c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fdbc 	bl	800bc5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fe43 	bl	800bda0 <UART_CheckIdleState>
 800b11a:	4603      	mov	r3, r0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4613      	mov	r3, r2
 800b130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b136:	2b20      	cmp	r3, #32
 800b138:	d13d      	bne.n	800b1b6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <HAL_UART_Receive_IT+0x22>
 800b140:	88fb      	ldrh	r3, [r7, #6]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e036      	b.n	800b1b8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b150:	2b01      	cmp	r3, #1
 800b152:	d101      	bne.n	800b158 <HAL_UART_Receive_IT+0x34>
 800b154:	2302      	movs	r3, #2
 800b156:	e02f      	b.n	800b1b8 <HAL_UART_Receive_IT+0x94>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d018      	beq.n	800b1a6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	613b      	str	r3, [r7, #16]
   return(result);
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	623b      	str	r3, [r7, #32]
 800b194:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	69f9      	ldr	r1, [r7, #28]
 800b198:	6a3a      	ldr	r2, [r7, #32]
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e6      	bne.n	800b174 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b1a6:	88fb      	ldrh	r3, [r7, #6]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 feef 	bl	800bf90 <UART_Start_Receive_IT>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	e000      	b.n	800b1b8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1b6:	2302      	movs	r3, #2
  }
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3728      	adds	r7, #40	; 0x28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b0ba      	sub	sp, #232	; 0xe8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b1f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d115      	bne.n	800b228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b200:	f003 0320 	and.w	r3, r3, #32
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00f      	beq.n	800b228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d009      	beq.n	800b228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 828f 	beq.w	800b73c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
      }
      return;
 800b226:	e289      	b.n	800b73c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 8117 	beq.w	800b460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b23e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b242:	4b85      	ldr	r3, [pc, #532]	; (800b458 <HAL_UART_IRQHandler+0x298>)
 800b244:	4013      	ands	r3, r2
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 810a 	beq.w	800b460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d011      	beq.n	800b27c <HAL_UART_IRQHandler+0xbc>
 800b258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2201      	movs	r2, #1
 800b26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b272:	f043 0201 	orr.w	r2, r3, #1
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d011      	beq.n	800b2ac <HAL_UART_IRQHandler+0xec>
 800b288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00b      	beq.n	800b2ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2202      	movs	r2, #2
 800b29a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2a2:	f043 0204 	orr.w	r2, r3, #4
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d011      	beq.n	800b2dc <HAL_UART_IRQHandler+0x11c>
 800b2b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00b      	beq.n	800b2dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2204      	movs	r2, #4
 800b2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2d2:	f043 0202 	orr.w	r2, r3, #2
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e0:	f003 0308 	and.w	r3, r3, #8
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d017      	beq.n	800b318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d105      	bne.n	800b300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2208      	movs	r2, #8
 800b306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b30e:	f043 0208 	orr.w	r2, r3, #8
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b31c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b320:	2b00      	cmp	r3, #0
 800b322:	d012      	beq.n	800b34a <HAL_UART_IRQHandler+0x18a>
 800b324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00c      	beq.n	800b34a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b340:	f043 0220 	orr.w	r2, r3, #32
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 81f5 	beq.w	800b740 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00d      	beq.n	800b37e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b392:	2b40      	cmp	r3, #64	; 0x40
 800b394:	d005      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b39a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d04f      	beq.n	800b442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 febe 	bl	800c124 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b40      	cmp	r3, #64	; 0x40
 800b3b4:	d141      	bne.n	800b43a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3c4:	e853 3f00 	ldrex	r3, [r3]
 800b3c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1d9      	bne.n	800b3b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	2b00      	cmp	r3, #0
 800b408:	d013      	beq.n	800b432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40e:	4a13      	ldr	r2, [pc, #76]	; (800b45c <HAL_UART_IRQHandler+0x29c>)
 800b410:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b416:	4618      	mov	r0, r3
 800b418:	f7fb fa42 	bl	80068a0 <HAL_DMA_Abort_IT>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d017      	beq.n	800b452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b430:	e00f      	b.n	800b452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f998 	bl	800b768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b438:	e00b      	b.n	800b452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f994 	bl	800b768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b440:	e007      	b.n	800b452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f990 	bl	800b768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b450:	e176      	b.n	800b740 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b452:	bf00      	nop
    return;
 800b454:	e174      	b.n	800b740 <HAL_UART_IRQHandler+0x580>
 800b456:	bf00      	nop
 800b458:	04000120 	.word	0x04000120
 800b45c:	0800c1eb 	.word	0x0800c1eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b464:	2b01      	cmp	r3, #1
 800b466:	f040 8144 	bne.w	800b6f2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46e:	f003 0310 	and.w	r3, r3, #16
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 813d 	beq.w	800b6f2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b47c:	f003 0310 	and.w	r3, r3, #16
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8136 	beq.w	800b6f2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2210      	movs	r2, #16
 800b48c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b498:	2b40      	cmp	r3, #64	; 0x40
 800b49a:	f040 80b2 	bne.w	800b602 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 8148 	beq.w	800b744 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	f080 8140 	bcs.w	800b744 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4d8:	f000 8085 	beq.w	800b5e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b50a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b512:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1da      	bne.n	800b4dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b538:	f023 0301 	bic.w	r3, r3, #1
 800b53c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3308      	adds	r3, #8
 800b546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b54a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b54e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b552:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e1      	bne.n	800b526 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3308      	adds	r3, #8
 800b568:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b586:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b58c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e3      	bne.n	800b562 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e4      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fb f8ed 	bl	80067c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f8be 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b600:	e0a0      	b.n	800b744 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b60e:	b29b      	uxth	r3, r3
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8092 	beq.w	800b748 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800b624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 808d 	beq.w	800b748 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b650:	647b      	str	r3, [r7, #68]	; 0x44
 800b652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b658:	e841 2300 	strex	r3, r2, [r1]
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e4      	bne.n	800b62e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3308      	adds	r3, #8
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	623b      	str	r3, [r7, #32]
   return(result);
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3308      	adds	r3, #8
 800b684:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b688:	633a      	str	r2, [r7, #48]	; 0x30
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e3      	bne.n	800b664 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0310 	bic.w	r3, r3, #16
 800b6c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	69b9      	ldr	r1, [r7, #24]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e4      	bne.n	800b6ae <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f846 	bl	800b77c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6f0:	e02a      	b.n	800b748 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b706:	2b00      	cmp	r3, #0
 800b708:	d008      	beq.n	800b71c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01c      	beq.n	800b74c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	4798      	blx	r3
    }
    return;
 800b71a:	e017      	b.n	800b74c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d012      	beq.n	800b74e <HAL_UART_IRQHandler+0x58e>
 800b728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00c      	beq.n	800b74e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fd6e 	bl	800c216 <UART_EndTransmit_IT>
    return;
 800b73a:	e008      	b.n	800b74e <HAL_UART_IRQHandler+0x58e>
      return;
 800b73c:	bf00      	nop
 800b73e:	e006      	b.n	800b74e <HAL_UART_IRQHandler+0x58e>
    return;
 800b740:	bf00      	nop
 800b742:	e004      	b.n	800b74e <HAL_UART_IRQHandler+0x58e>
      return;
 800b744:	bf00      	nop
 800b746:	e002      	b.n	800b74e <HAL_UART_IRQHandler+0x58e>
      return;
 800b748:	bf00      	nop
 800b74a:	e000      	b.n	800b74e <HAL_UART_IRQHandler+0x58e>
    return;
 800b74c:	bf00      	nop
  }

}
 800b74e:	37e8      	adds	r7, #232	; 0xe8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4ba6      	ldr	r3, [pc, #664]	; (800ba58 <UART_SetConfig+0x2c4>)
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	6979      	ldr	r1, [r7, #20]
 800b7c8:	430b      	orrs	r3, r1
 800b7ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68da      	ldr	r2, [r3, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	430a      	orrs	r2, r1
 800b804:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a94      	ldr	r2, [pc, #592]	; (800ba5c <UART_SetConfig+0x2c8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d120      	bne.n	800b852 <UART_SetConfig+0xbe>
 800b810:	4b93      	ldr	r3, [pc, #588]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d816      	bhi.n	800b84c <UART_SetConfig+0xb8>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <UART_SetConfig+0x90>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b835 	.word	0x0800b835
 800b828:	0800b841 	.word	0x0800b841
 800b82c:	0800b83b 	.word	0x0800b83b
 800b830:	0800b847 	.word	0x0800b847
 800b834:	2301      	movs	r3, #1
 800b836:	77fb      	strb	r3, [r7, #31]
 800b838:	e150      	b.n	800badc <UART_SetConfig+0x348>
 800b83a:	2302      	movs	r3, #2
 800b83c:	77fb      	strb	r3, [r7, #31]
 800b83e:	e14d      	b.n	800badc <UART_SetConfig+0x348>
 800b840:	2304      	movs	r3, #4
 800b842:	77fb      	strb	r3, [r7, #31]
 800b844:	e14a      	b.n	800badc <UART_SetConfig+0x348>
 800b846:	2308      	movs	r3, #8
 800b848:	77fb      	strb	r3, [r7, #31]
 800b84a:	e147      	b.n	800badc <UART_SetConfig+0x348>
 800b84c:	2310      	movs	r3, #16
 800b84e:	77fb      	strb	r3, [r7, #31]
 800b850:	e144      	b.n	800badc <UART_SetConfig+0x348>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a83      	ldr	r2, [pc, #524]	; (800ba64 <UART_SetConfig+0x2d0>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d132      	bne.n	800b8c2 <UART_SetConfig+0x12e>
 800b85c:	4b80      	ldr	r3, [pc, #512]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b862:	f003 030c 	and.w	r3, r3, #12
 800b866:	2b0c      	cmp	r3, #12
 800b868:	d828      	bhi.n	800b8bc <UART_SetConfig+0x128>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <UART_SetConfig+0xdc>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b8a5 	.word	0x0800b8a5
 800b874:	0800b8bd 	.word	0x0800b8bd
 800b878:	0800b8bd 	.word	0x0800b8bd
 800b87c:	0800b8bd 	.word	0x0800b8bd
 800b880:	0800b8b1 	.word	0x0800b8b1
 800b884:	0800b8bd 	.word	0x0800b8bd
 800b888:	0800b8bd 	.word	0x0800b8bd
 800b88c:	0800b8bd 	.word	0x0800b8bd
 800b890:	0800b8ab 	.word	0x0800b8ab
 800b894:	0800b8bd 	.word	0x0800b8bd
 800b898:	0800b8bd 	.word	0x0800b8bd
 800b89c:	0800b8bd 	.word	0x0800b8bd
 800b8a0:	0800b8b7 	.word	0x0800b8b7
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	77fb      	strb	r3, [r7, #31]
 800b8a8:	e118      	b.n	800badc <UART_SetConfig+0x348>
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	77fb      	strb	r3, [r7, #31]
 800b8ae:	e115      	b.n	800badc <UART_SetConfig+0x348>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	77fb      	strb	r3, [r7, #31]
 800b8b4:	e112      	b.n	800badc <UART_SetConfig+0x348>
 800b8b6:	2308      	movs	r3, #8
 800b8b8:	77fb      	strb	r3, [r7, #31]
 800b8ba:	e10f      	b.n	800badc <UART_SetConfig+0x348>
 800b8bc:	2310      	movs	r3, #16
 800b8be:	77fb      	strb	r3, [r7, #31]
 800b8c0:	e10c      	b.n	800badc <UART_SetConfig+0x348>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a68      	ldr	r2, [pc, #416]	; (800ba68 <UART_SetConfig+0x2d4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d120      	bne.n	800b90e <UART_SetConfig+0x17a>
 800b8cc:	4b64      	ldr	r3, [pc, #400]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b8d6:	2b30      	cmp	r3, #48	; 0x30
 800b8d8:	d013      	beq.n	800b902 <UART_SetConfig+0x16e>
 800b8da:	2b30      	cmp	r3, #48	; 0x30
 800b8dc:	d814      	bhi.n	800b908 <UART_SetConfig+0x174>
 800b8de:	2b20      	cmp	r3, #32
 800b8e0:	d009      	beq.n	800b8f6 <UART_SetConfig+0x162>
 800b8e2:	2b20      	cmp	r3, #32
 800b8e4:	d810      	bhi.n	800b908 <UART_SetConfig+0x174>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <UART_SetConfig+0x15c>
 800b8ea:	2b10      	cmp	r3, #16
 800b8ec:	d006      	beq.n	800b8fc <UART_SetConfig+0x168>
 800b8ee:	e00b      	b.n	800b908 <UART_SetConfig+0x174>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	77fb      	strb	r3, [r7, #31]
 800b8f4:	e0f2      	b.n	800badc <UART_SetConfig+0x348>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	77fb      	strb	r3, [r7, #31]
 800b8fa:	e0ef      	b.n	800badc <UART_SetConfig+0x348>
 800b8fc:	2304      	movs	r3, #4
 800b8fe:	77fb      	strb	r3, [r7, #31]
 800b900:	e0ec      	b.n	800badc <UART_SetConfig+0x348>
 800b902:	2308      	movs	r3, #8
 800b904:	77fb      	strb	r3, [r7, #31]
 800b906:	e0e9      	b.n	800badc <UART_SetConfig+0x348>
 800b908:	2310      	movs	r3, #16
 800b90a:	77fb      	strb	r3, [r7, #31]
 800b90c:	e0e6      	b.n	800badc <UART_SetConfig+0x348>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a56      	ldr	r2, [pc, #344]	; (800ba6c <UART_SetConfig+0x2d8>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d120      	bne.n	800b95a <UART_SetConfig+0x1c6>
 800b918:	4b51      	ldr	r3, [pc, #324]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b91e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b922:	2bc0      	cmp	r3, #192	; 0xc0
 800b924:	d013      	beq.n	800b94e <UART_SetConfig+0x1ba>
 800b926:	2bc0      	cmp	r3, #192	; 0xc0
 800b928:	d814      	bhi.n	800b954 <UART_SetConfig+0x1c0>
 800b92a:	2b80      	cmp	r3, #128	; 0x80
 800b92c:	d009      	beq.n	800b942 <UART_SetConfig+0x1ae>
 800b92e:	2b80      	cmp	r3, #128	; 0x80
 800b930:	d810      	bhi.n	800b954 <UART_SetConfig+0x1c0>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <UART_SetConfig+0x1a8>
 800b936:	2b40      	cmp	r3, #64	; 0x40
 800b938:	d006      	beq.n	800b948 <UART_SetConfig+0x1b4>
 800b93a:	e00b      	b.n	800b954 <UART_SetConfig+0x1c0>
 800b93c:	2300      	movs	r3, #0
 800b93e:	77fb      	strb	r3, [r7, #31]
 800b940:	e0cc      	b.n	800badc <UART_SetConfig+0x348>
 800b942:	2302      	movs	r3, #2
 800b944:	77fb      	strb	r3, [r7, #31]
 800b946:	e0c9      	b.n	800badc <UART_SetConfig+0x348>
 800b948:	2304      	movs	r3, #4
 800b94a:	77fb      	strb	r3, [r7, #31]
 800b94c:	e0c6      	b.n	800badc <UART_SetConfig+0x348>
 800b94e:	2308      	movs	r3, #8
 800b950:	77fb      	strb	r3, [r7, #31]
 800b952:	e0c3      	b.n	800badc <UART_SetConfig+0x348>
 800b954:	2310      	movs	r3, #16
 800b956:	77fb      	strb	r3, [r7, #31]
 800b958:	e0c0      	b.n	800badc <UART_SetConfig+0x348>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a44      	ldr	r2, [pc, #272]	; (800ba70 <UART_SetConfig+0x2dc>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d125      	bne.n	800b9b0 <UART_SetConfig+0x21c>
 800b964:	4b3e      	ldr	r3, [pc, #248]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b972:	d017      	beq.n	800b9a4 <UART_SetConfig+0x210>
 800b974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b978:	d817      	bhi.n	800b9aa <UART_SetConfig+0x216>
 800b97a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b97e:	d00b      	beq.n	800b998 <UART_SetConfig+0x204>
 800b980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b984:	d811      	bhi.n	800b9aa <UART_SetConfig+0x216>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <UART_SetConfig+0x1fe>
 800b98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98e:	d006      	beq.n	800b99e <UART_SetConfig+0x20a>
 800b990:	e00b      	b.n	800b9aa <UART_SetConfig+0x216>
 800b992:	2300      	movs	r3, #0
 800b994:	77fb      	strb	r3, [r7, #31]
 800b996:	e0a1      	b.n	800badc <UART_SetConfig+0x348>
 800b998:	2302      	movs	r3, #2
 800b99a:	77fb      	strb	r3, [r7, #31]
 800b99c:	e09e      	b.n	800badc <UART_SetConfig+0x348>
 800b99e:	2304      	movs	r3, #4
 800b9a0:	77fb      	strb	r3, [r7, #31]
 800b9a2:	e09b      	b.n	800badc <UART_SetConfig+0x348>
 800b9a4:	2308      	movs	r3, #8
 800b9a6:	77fb      	strb	r3, [r7, #31]
 800b9a8:	e098      	b.n	800badc <UART_SetConfig+0x348>
 800b9aa:	2310      	movs	r3, #16
 800b9ac:	77fb      	strb	r3, [r7, #31]
 800b9ae:	e095      	b.n	800badc <UART_SetConfig+0x348>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ba74 <UART_SetConfig+0x2e0>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d125      	bne.n	800ba06 <UART_SetConfig+0x272>
 800b9ba:	4b29      	ldr	r3, [pc, #164]	; (800ba60 <UART_SetConfig+0x2cc>)
 800b9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b9c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9c8:	d017      	beq.n	800b9fa <UART_SetConfig+0x266>
 800b9ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9ce:	d817      	bhi.n	800ba00 <UART_SetConfig+0x26c>
 800b9d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d4:	d00b      	beq.n	800b9ee <UART_SetConfig+0x25a>
 800b9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9da:	d811      	bhi.n	800ba00 <UART_SetConfig+0x26c>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <UART_SetConfig+0x254>
 800b9e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9e4:	d006      	beq.n	800b9f4 <UART_SetConfig+0x260>
 800b9e6:	e00b      	b.n	800ba00 <UART_SetConfig+0x26c>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	77fb      	strb	r3, [r7, #31]
 800b9ec:	e076      	b.n	800badc <UART_SetConfig+0x348>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	77fb      	strb	r3, [r7, #31]
 800b9f2:	e073      	b.n	800badc <UART_SetConfig+0x348>
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	77fb      	strb	r3, [r7, #31]
 800b9f8:	e070      	b.n	800badc <UART_SetConfig+0x348>
 800b9fa:	2308      	movs	r3, #8
 800b9fc:	77fb      	strb	r3, [r7, #31]
 800b9fe:	e06d      	b.n	800badc <UART_SetConfig+0x348>
 800ba00:	2310      	movs	r3, #16
 800ba02:	77fb      	strb	r3, [r7, #31]
 800ba04:	e06a      	b.n	800badc <UART_SetConfig+0x348>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a1b      	ldr	r2, [pc, #108]	; (800ba78 <UART_SetConfig+0x2e4>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d138      	bne.n	800ba82 <UART_SetConfig+0x2ee>
 800ba10:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <UART_SetConfig+0x2cc>)
 800ba12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba1e:	d017      	beq.n	800ba50 <UART_SetConfig+0x2bc>
 800ba20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba24:	d82a      	bhi.n	800ba7c <UART_SetConfig+0x2e8>
 800ba26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba2a:	d00b      	beq.n	800ba44 <UART_SetConfig+0x2b0>
 800ba2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba30:	d824      	bhi.n	800ba7c <UART_SetConfig+0x2e8>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <UART_SetConfig+0x2aa>
 800ba36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3a:	d006      	beq.n	800ba4a <UART_SetConfig+0x2b6>
 800ba3c:	e01e      	b.n	800ba7c <UART_SetConfig+0x2e8>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	77fb      	strb	r3, [r7, #31]
 800ba42:	e04b      	b.n	800badc <UART_SetConfig+0x348>
 800ba44:	2302      	movs	r3, #2
 800ba46:	77fb      	strb	r3, [r7, #31]
 800ba48:	e048      	b.n	800badc <UART_SetConfig+0x348>
 800ba4a:	2304      	movs	r3, #4
 800ba4c:	77fb      	strb	r3, [r7, #31]
 800ba4e:	e045      	b.n	800badc <UART_SetConfig+0x348>
 800ba50:	2308      	movs	r3, #8
 800ba52:	77fb      	strb	r3, [r7, #31]
 800ba54:	e042      	b.n	800badc <UART_SetConfig+0x348>
 800ba56:	bf00      	nop
 800ba58:	efff69f3 	.word	0xefff69f3
 800ba5c:	40011000 	.word	0x40011000
 800ba60:	40023800 	.word	0x40023800
 800ba64:	40004400 	.word	0x40004400
 800ba68:	40004800 	.word	0x40004800
 800ba6c:	40004c00 	.word	0x40004c00
 800ba70:	40005000 	.word	0x40005000
 800ba74:	40011400 	.word	0x40011400
 800ba78:	40007800 	.word	0x40007800
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	77fb      	strb	r3, [r7, #31]
 800ba80:	e02c      	b.n	800badc <UART_SetConfig+0x348>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a72      	ldr	r2, [pc, #456]	; (800bc50 <UART_SetConfig+0x4bc>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d125      	bne.n	800bad8 <UART_SetConfig+0x344>
 800ba8c:	4b71      	ldr	r3, [pc, #452]	; (800bc54 <UART_SetConfig+0x4c0>)
 800ba8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba9a:	d017      	beq.n	800bacc <UART_SetConfig+0x338>
 800ba9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800baa0:	d817      	bhi.n	800bad2 <UART_SetConfig+0x33e>
 800baa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa6:	d00b      	beq.n	800bac0 <UART_SetConfig+0x32c>
 800baa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baac:	d811      	bhi.n	800bad2 <UART_SetConfig+0x33e>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <UART_SetConfig+0x326>
 800bab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bab6:	d006      	beq.n	800bac6 <UART_SetConfig+0x332>
 800bab8:	e00b      	b.n	800bad2 <UART_SetConfig+0x33e>
 800baba:	2300      	movs	r3, #0
 800babc:	77fb      	strb	r3, [r7, #31]
 800babe:	e00d      	b.n	800badc <UART_SetConfig+0x348>
 800bac0:	2302      	movs	r3, #2
 800bac2:	77fb      	strb	r3, [r7, #31]
 800bac4:	e00a      	b.n	800badc <UART_SetConfig+0x348>
 800bac6:	2304      	movs	r3, #4
 800bac8:	77fb      	strb	r3, [r7, #31]
 800baca:	e007      	b.n	800badc <UART_SetConfig+0x348>
 800bacc:	2308      	movs	r3, #8
 800bace:	77fb      	strb	r3, [r7, #31]
 800bad0:	e004      	b.n	800badc <UART_SetConfig+0x348>
 800bad2:	2310      	movs	r3, #16
 800bad4:	77fb      	strb	r3, [r7, #31]
 800bad6:	e001      	b.n	800badc <UART_SetConfig+0x348>
 800bad8:	2310      	movs	r3, #16
 800bada:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bae4:	d15b      	bne.n	800bb9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bae6:	7ffb      	ldrb	r3, [r7, #31]
 800bae8:	2b08      	cmp	r3, #8
 800baea:	d828      	bhi.n	800bb3e <UART_SetConfig+0x3aa>
 800baec:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <UART_SetConfig+0x360>)
 800baee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf2:	bf00      	nop
 800baf4:	0800bb19 	.word	0x0800bb19
 800baf8:	0800bb21 	.word	0x0800bb21
 800bafc:	0800bb29 	.word	0x0800bb29
 800bb00:	0800bb3f 	.word	0x0800bb3f
 800bb04:	0800bb2f 	.word	0x0800bb2f
 800bb08:	0800bb3f 	.word	0x0800bb3f
 800bb0c:	0800bb3f 	.word	0x0800bb3f
 800bb10:	0800bb3f 	.word	0x0800bb3f
 800bb14:	0800bb37 	.word	0x0800bb37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb18:	f7fd fc90 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800bb1c:	61b8      	str	r0, [r7, #24]
        break;
 800bb1e:	e013      	b.n	800bb48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb20:	f7fd fca0 	bl	8009464 <HAL_RCC_GetPCLK2Freq>
 800bb24:	61b8      	str	r0, [r7, #24]
        break;
 800bb26:	e00f      	b.n	800bb48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb28:	4b4b      	ldr	r3, [pc, #300]	; (800bc58 <UART_SetConfig+0x4c4>)
 800bb2a:	61bb      	str	r3, [r7, #24]
        break;
 800bb2c:	e00c      	b.n	800bb48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb2e:	f7fd fbb3 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 800bb32:	61b8      	str	r0, [r7, #24]
        break;
 800bb34:	e008      	b.n	800bb48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb3a:	61bb      	str	r3, [r7, #24]
        break;
 800bb3c:	e004      	b.n	800bb48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	77bb      	strb	r3, [r7, #30]
        break;
 800bb46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d074      	beq.n	800bc38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	005a      	lsls	r2, r3, #1
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	085b      	lsrs	r3, r3, #1
 800bb58:	441a      	add	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b0f      	cmp	r3, #15
 800bb68:	d916      	bls.n	800bb98 <UART_SetConfig+0x404>
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb70:	d212      	bcs.n	800bb98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	f023 030f 	bic.w	r3, r3, #15
 800bb7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	085b      	lsrs	r3, r3, #1
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	89fb      	ldrh	r3, [r7, #14]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	89fa      	ldrh	r2, [r7, #14]
 800bb94:	60da      	str	r2, [r3, #12]
 800bb96:	e04f      	b.n	800bc38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	77bb      	strb	r3, [r7, #30]
 800bb9c:	e04c      	b.n	800bc38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb9e:	7ffb      	ldrb	r3, [r7, #31]
 800bba0:	2b08      	cmp	r3, #8
 800bba2:	d828      	bhi.n	800bbf6 <UART_SetConfig+0x462>
 800bba4:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <UART_SetConfig+0x418>)
 800bba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbaa:	bf00      	nop
 800bbac:	0800bbd1 	.word	0x0800bbd1
 800bbb0:	0800bbd9 	.word	0x0800bbd9
 800bbb4:	0800bbe1 	.word	0x0800bbe1
 800bbb8:	0800bbf7 	.word	0x0800bbf7
 800bbbc:	0800bbe7 	.word	0x0800bbe7
 800bbc0:	0800bbf7 	.word	0x0800bbf7
 800bbc4:	0800bbf7 	.word	0x0800bbf7
 800bbc8:	0800bbf7 	.word	0x0800bbf7
 800bbcc:	0800bbef 	.word	0x0800bbef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbd0:	f7fd fc34 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800bbd4:	61b8      	str	r0, [r7, #24]
        break;
 800bbd6:	e013      	b.n	800bc00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbd8:	f7fd fc44 	bl	8009464 <HAL_RCC_GetPCLK2Freq>
 800bbdc:	61b8      	str	r0, [r7, #24]
        break;
 800bbde:	e00f      	b.n	800bc00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbe0:	4b1d      	ldr	r3, [pc, #116]	; (800bc58 <UART_SetConfig+0x4c4>)
 800bbe2:	61bb      	str	r3, [r7, #24]
        break;
 800bbe4:	e00c      	b.n	800bc00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbe6:	f7fd fb57 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 800bbea:	61b8      	str	r0, [r7, #24]
        break;
 800bbec:	e008      	b.n	800bc00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbf2:	61bb      	str	r3, [r7, #24]
        break;
 800bbf4:	e004      	b.n	800bc00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	77bb      	strb	r3, [r7, #30]
        break;
 800bbfe:	bf00      	nop
    }

    if (pclk != 0U)
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d018      	beq.n	800bc38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	085a      	lsrs	r2, r3, #1
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	441a      	add	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b0f      	cmp	r3, #15
 800bc1e:	d909      	bls.n	800bc34 <UART_SetConfig+0x4a0>
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc26:	d205      	bcs.n	800bc34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	60da      	str	r2, [r3, #12]
 800bc32:	e001      	b.n	800bc38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bc44:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	40007c00 	.word	0x40007c00
 800bc54:	40023800 	.word	0x40023800
 800bc58:	00f42400 	.word	0x00f42400

0800bc5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	f003 0308 	and.w	r3, r3, #8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	f003 0310 	and.w	r3, r3, #16
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00a      	beq.n	800bd0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01a      	beq.n	800bd72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd5a:	d10a      	bne.n	800bd72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	605a      	str	r2, [r3, #4]
  }
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdb0:	f7f9 fcd6 	bl	8005760 <HAL_GetTick>
 800bdb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	2b08      	cmp	r3, #8
 800bdc2:	d10e      	bne.n	800bde2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f817 	bl	800be06 <UART_WaitOnFlagUntilTimeout>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e00d      	b.n	800bdfe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2220      	movs	r2, #32
 800bdec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b09c      	sub	sp, #112	; 0x70
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	4613      	mov	r3, r2
 800be14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be16:	e0a5      	b.n	800bf64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	f000 80a1 	beq.w	800bf64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be22:	f7f9 fc9d 	bl	8005760 <HAL_GetTick>
 800be26:	4602      	mov	r2, r0
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be2e:	429a      	cmp	r2, r3
 800be30:	d302      	bcc.n	800be38 <UART_WaitOnFlagUntilTimeout+0x32>
 800be32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be34:	2b00      	cmp	r3, #0
 800be36:	d13e      	bne.n	800beb6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	e853 3f00 	ldrex	r3, [r3]
 800be44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be4c:	667b      	str	r3, [r7, #100]	; 0x64
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e6      	bne.n	800be38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7c:	f023 0301 	bic.w	r3, r3, #1
 800be80:	663b      	str	r3, [r7, #96]	; 0x60
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3308      	adds	r3, #8
 800be88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800be8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e5      	bne.n	800be6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2220      	movs	r2, #32
 800bea2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2220      	movs	r2, #32
 800bea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e067      	b.n	800bf86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0304 	and.w	r3, r3, #4
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d04f      	beq.n	800bf64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bed2:	d147      	bne.n	800bf64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bedc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	461a      	mov	r2, r3
 800befa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800befc:	637b      	str	r3, [r7, #52]	; 0x34
 800befe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf04:	e841 2300 	strex	r3, r2, [r1]
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e6      	bne.n	800bede <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3308      	adds	r3, #8
 800bf16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f023 0301 	bic.w	r3, r3, #1
 800bf26:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf30:	623a      	str	r2, [r7, #32]
 800bf32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	69f9      	ldr	r1, [r7, #28]
 800bf36:	6a3a      	ldr	r2, [r7, #32]
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e5      	bne.n	800bf10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2220      	movs	r2, #32
 800bf48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e010      	b.n	800bf86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	69da      	ldr	r2, [r3, #28]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	bf0c      	ite	eq
 800bf74:	2301      	moveq	r3, #1
 800bf76:	2300      	movne	r3, #0
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	f43f af4a 	beq.w	800be18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3770      	adds	r7, #112	; 0x70
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b097      	sub	sp, #92	; 0x5c
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	88fa      	ldrh	r2, [r7, #6]
 800bfa8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	88fa      	ldrh	r2, [r7, #6]
 800bfb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc2:	d10e      	bne.n	800bfe2 <UART_Start_Receive_IT+0x52>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d105      	bne.n	800bfd8 <UART_Start_Receive_IT+0x48>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bfd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bfd6:	e02d      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	22ff      	movs	r2, #255	; 0xff
 800bfdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bfe0:	e028      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10d      	bne.n	800c006 <UART_Start_Receive_IT+0x76>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d104      	bne.n	800bffc <UART_Start_Receive_IT+0x6c>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	22ff      	movs	r2, #255	; 0xff
 800bff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bffa:	e01b      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	227f      	movs	r2, #127	; 0x7f
 800c000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c004:	e016      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c00e:	d10d      	bne.n	800c02c <UART_Start_Receive_IT+0x9c>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <UART_Start_Receive_IT+0x92>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	227f      	movs	r2, #127	; 0x7f
 800c01c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c020:	e008      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	223f      	movs	r2, #63	; 0x3f
 800c026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c02a:	e003      	b.n	800c034 <UART_Start_Receive_IT+0xa4>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2222      	movs	r2, #34	; 0x22
 800c040:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	f043 0301 	orr.w	r3, r3, #1
 800c058:	657b      	str	r3, [r7, #84]	; 0x54
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c062:	64ba      	str	r2, [r7, #72]	; 0x48
 800c064:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e5      	bne.n	800c042 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c07e:	d107      	bne.n	800c090 <UART_Start_Receive_IT+0x100>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d103      	bne.n	800c090 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	4a24      	ldr	r2, [pc, #144]	; (800c11c <UART_Start_Receive_IT+0x18c>)
 800c08c:	665a      	str	r2, [r3, #100]	; 0x64
 800c08e:	e002      	b.n	800c096 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4a23      	ldr	r2, [pc, #140]	; (800c120 <UART_Start_Receive_IT+0x190>)
 800c094:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d019      	beq.n	800c0da <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0cc:	e841 2300 	strex	r3, r2, [r1]
 800c0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e6      	bne.n	800c0a6 <UART_Start_Receive_IT+0x116>
 800c0d8:	e018      	b.n	800c10c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f043 0320 	orr.w	r3, r3, #32
 800c0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0f8:	623b      	str	r3, [r7, #32]
 800c0fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	69f9      	ldr	r1, [r7, #28]
 800c0fe:	6a3a      	ldr	r2, [r7, #32]
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	61bb      	str	r3, [r7, #24]
   return(result);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e6      	bne.n	800c0da <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	375c      	adds	r7, #92	; 0x5c
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	0800c3c7 	.word	0x0800c3c7
 800c120:	0800c26b 	.word	0x0800c26b

0800c124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c124:	b480      	push	{r7}
 800c126:	b095      	sub	sp, #84	; 0x54
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	e853 3f00 	ldrex	r3, [r3]
 800c138:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c140:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c14a:	643b      	str	r3, [r7, #64]	; 0x40
 800c14c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e6      	bne.n	800c12c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	64bb      	str	r3, [r7, #72]	; 0x48
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c17e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1e5      	bne.n	800c15e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c196:	2b01      	cmp	r3, #1
 800c198:	d118      	bne.n	800c1cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	e853 3f00 	ldrex	r3, [r3]
 800c1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f023 0310 	bic.w	r3, r3, #16
 800c1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1b8:	61bb      	str	r3, [r7, #24]
 800c1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1bc:	6979      	ldr	r1, [r7, #20]
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	e841 2300 	strex	r3, r2, [r1]
 800c1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e6      	bne.n	800c19a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c1de:	bf00      	nop
 800c1e0:	3754      	adds	r7, #84	; 0x54
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff faad 	bl	800b768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b088      	sub	sp, #32
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	61bb      	str	r3, [r7, #24]
 800c23e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6979      	ldr	r1, [r7, #20]
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	613b      	str	r3, [r7, #16]
   return(result);
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e6      	bne.n	800c21e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff fa79 	bl	800b754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c262:	bf00      	nop
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b096      	sub	sp, #88	; 0x58
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c278:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c280:	2b22      	cmp	r3, #34	; 0x22
 800c282:	f040 8094 	bne.w	800c3ae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c290:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c294:	b2d9      	uxtb	r1, r3
 800c296:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a0:	400a      	ands	r2, r1
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d177      	bne.n	800c3be <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2e2:	653b      	str	r3, [r7, #80]	; 0x50
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e6      	bne.n	800c2ce <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3308      	adds	r3, #8
 800c306:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	e853 3f00 	ldrex	r3, [r3]
 800c30e:	623b      	str	r3, [r7, #32]
   return(result);
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	f023 0301 	bic.w	r3, r3, #1
 800c316:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c320:	633a      	str	r2, [r7, #48]	; 0x30
 800c322:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c328:	e841 2300 	strex	r3, r2, [r1]
 800c32c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1e5      	bne.n	800c300 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2220      	movs	r2, #32
 800c338:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c344:	2b01      	cmp	r3, #1
 800c346:	d12e      	bne.n	800c3a6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f023 0310 	bic.w	r3, r3, #16
 800c362:	64bb      	str	r3, [r7, #72]	; 0x48
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	69b9      	ldr	r1, [r7, #24]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	617b      	str	r3, [r7, #20]
   return(result);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e6      	bne.n	800c34e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	f003 0310 	and.w	r3, r3, #16
 800c38a:	2b10      	cmp	r3, #16
 800c38c:	d103      	bne.n	800c396 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2210      	movs	r2, #16
 800c394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff f9ec 	bl	800b77c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3a4:	e00b      	b.n	800c3be <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7f5 fe20 	bl	8001fec <HAL_UART_RxCpltCallback>
}
 800c3ac:	e007      	b.n	800c3be <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	699a      	ldr	r2, [r3, #24]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f042 0208 	orr.w	r2, r2, #8
 800c3bc:	619a      	str	r2, [r3, #24]
}
 800c3be:	bf00      	nop
 800c3c0:	3758      	adds	r7, #88	; 0x58
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b096      	sub	sp, #88	; 0x58
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3dc:	2b22      	cmp	r3, #34	; 0x22
 800c3de:	f040 8094 	bne.w	800c50a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c3f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c400:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	1c9a      	adds	r2, r3, #2
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c412:	b29b      	uxth	r3, r3
 800c414:	3b01      	subs	r3, #1
 800c416:	b29a      	uxth	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c424:	b29b      	uxth	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d177      	bne.n	800c51a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	e853 3f00 	ldrex	r3, [r3]
 800c436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c43e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	461a      	mov	r2, r3
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	643b      	str	r3, [r7, #64]	; 0x40
 800c44a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c44e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c450:	e841 2300 	strex	r3, r2, [r1]
 800c454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e6      	bne.n	800c42a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3308      	adds	r3, #8
 800c462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	f023 0301 	bic.w	r3, r3, #1
 800c472:	64bb      	str	r3, [r7, #72]	; 0x48
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3308      	adds	r3, #8
 800c47a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c47c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c47e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e5      	bne.n	800c45c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2220      	movs	r2, #32
 800c494:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d12e      	bne.n	800c502 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f023 0310 	bic.w	r3, r3, #16
 800c4be:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c8:	61bb      	str	r3, [r7, #24]
 800c4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4cc:	6979      	ldr	r1, [r7, #20]
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	e841 2300 	strex	r3, r2, [r1]
 800c4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e6      	bne.n	800c4aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	f003 0310 	and.w	r3, r3, #16
 800c4e6:	2b10      	cmp	r3, #16
 800c4e8:	d103      	bne.n	800c4f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2210      	movs	r2, #16
 800c4f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff f93e 	bl	800b77c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c500:	e00b      	b.n	800c51a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7f5 fd72 	bl	8001fec <HAL_UART_RxCpltCallback>
}
 800c508:	e007      	b.n	800c51a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	699a      	ldr	r2, [r3, #24]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f042 0208 	orr.w	r2, r2, #8
 800c518:	619a      	str	r2, [r3, #24]
}
 800c51a:	bf00      	nop
 800c51c:	3758      	adds	r7, #88	; 0x58
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d121      	bne.n	800c57a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b27      	ldr	r3, [pc, #156]	; (800c5d8 <FMC_SDRAM_Init+0xb4>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	6851      	ldr	r1, [r2, #4]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	6892      	ldr	r2, [r2, #8]
 800c546:	4311      	orrs	r1, r2
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	68d2      	ldr	r2, [r2, #12]
 800c54c:	4311      	orrs	r1, r2
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	6912      	ldr	r2, [r2, #16]
 800c552:	4311      	orrs	r1, r2
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	6952      	ldr	r2, [r2, #20]
 800c558:	4311      	orrs	r1, r2
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	6992      	ldr	r2, [r2, #24]
 800c55e:	4311      	orrs	r1, r2
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	69d2      	ldr	r2, [r2, #28]
 800c564:	4311      	orrs	r1, r2
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	6a12      	ldr	r2, [r2, #32]
 800c56a:	4311      	orrs	r1, r2
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c570:	430a      	orrs	r2, r1
 800c572:	431a      	orrs	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	e026      	b.n	800c5c8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	69d9      	ldr	r1, [r3, #28]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	4319      	orrs	r1, r3
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c590:	430b      	orrs	r3, r1
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <FMC_SDRAM_Init+0xb4>)
 800c59e:	4013      	ands	r3, r2
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	6851      	ldr	r1, [r2, #4]
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	6892      	ldr	r2, [r2, #8]
 800c5a8:	4311      	orrs	r1, r2
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	68d2      	ldr	r2, [r2, #12]
 800c5ae:	4311      	orrs	r1, r2
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	6912      	ldr	r2, [r2, #16]
 800c5b4:	4311      	orrs	r1, r2
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	6952      	ldr	r2, [r2, #20]
 800c5ba:	4311      	orrs	r1, r2
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	6992      	ldr	r2, [r2, #24]
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	ffff8000 	.word	0xffff8000

0800c5dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d128      	bne.n	800c640 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	1e59      	subs	r1, r3, #1
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	3b01      	subs	r3, #1
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	4319      	orrs	r1, r3
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	021b      	lsls	r3, r3, #8
 800c60e:	4319      	orrs	r1, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	3b01      	subs	r3, #1
 800c616:	031b      	lsls	r3, r3, #12
 800c618:	4319      	orrs	r1, r3
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	3b01      	subs	r3, #1
 800c620:	041b      	lsls	r3, r3, #16
 800c622:	4319      	orrs	r1, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	3b01      	subs	r3, #1
 800c62a:	051b      	lsls	r3, r3, #20
 800c62c:	4319      	orrs	r1, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	3b01      	subs	r3, #1
 800c634:	061b      	lsls	r3, r3, #24
 800c636:	430b      	orrs	r3, r1
 800c638:	431a      	orrs	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	609a      	str	r2, [r3, #8]
 800c63e:	e02d      	b.n	800c69c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	4b19      	ldr	r3, [pc, #100]	; (800c6ac <FMC_SDRAM_Timing_Init+0xd0>)
 800c646:	4013      	ands	r3, r2
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	68d2      	ldr	r2, [r2, #12]
 800c64c:	3a01      	subs	r2, #1
 800c64e:	0311      	lsls	r1, r2, #12
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	6952      	ldr	r2, [r2, #20]
 800c654:	3a01      	subs	r2, #1
 800c656:	0512      	lsls	r2, r2, #20
 800c658:	430a      	orrs	r2, r1
 800c65a:	431a      	orrs	r2, r3
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	1e59      	subs	r1, r3, #1
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	3b01      	subs	r3, #1
 800c674:	011b      	lsls	r3, r3, #4
 800c676:	4319      	orrs	r1, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	021b      	lsls	r3, r3, #8
 800c680:	4319      	orrs	r1, r3
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	3b01      	subs	r3, #1
 800c688:	041b      	lsls	r3, r3, #16
 800c68a:	4319      	orrs	r1, r3
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	699b      	ldr	r3, [r3, #24]
 800c690:	3b01      	subs	r3, #1
 800c692:	061b      	lsls	r3, r3, #24
 800c694:	430b      	orrs	r3, r1
 800c696:	431a      	orrs	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	ff0f0fff 	.word	0xff0f0fff

0800c6b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	691a      	ldr	r2, [r3, #16]
 800c6c0:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <FMC_SDRAM_SendCommand+0x44>)
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	6811      	ldr	r1, [r2, #0]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	6852      	ldr	r2, [r2, #4]
 800c6cc:	4311      	orrs	r1, r2
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	6892      	ldr	r2, [r2, #8]
 800c6d2:	3a01      	subs	r2, #1
 800c6d4:	0152      	lsls	r2, r2, #5
 800c6d6:	4311      	orrs	r1, r2
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	68d2      	ldr	r2, [r2, #12]
 800c6dc:	0252      	lsls	r2, r2, #9
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	ffc00000 	.word	0xffc00000

0800c6f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695a      	ldr	r2, [r3, #20]
 800c706:	4b07      	ldr	r3, [pc, #28]	; (800c724 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c708:	4013      	ands	r3, r2
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	0052      	lsls	r2, r2, #1
 800c70e:	431a      	orrs	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	ffffc001 	.word	0xffffc001

0800c728 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73a:	2b84      	cmp	r3, #132	; 0x84
 800c73c:	d005      	beq.n	800c74a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c73e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	3303      	adds	r3, #3
 800c748:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	607b      	str	r3, [r7, #4]
  return(result);
 800c764:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c766:	2b00      	cmp	r3, #0
 800c768:	bf14      	ite	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	2300      	moveq	r3, #0
 800c76e:	b2db      	uxtb	r3, r3
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c780:	f001 fc58 	bl	800e034 <vTaskStartScheduler>
  
  return osOK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	bd80      	pop	{r7, pc}

0800c78a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78c:	b089      	sub	sp, #36	; 0x24
 800c78e:	af04      	add	r7, sp, #16
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d020      	beq.n	800c7de <osThreadCreate+0x54>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01c      	beq.n	800c7de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685c      	ldr	r4, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681d      	ldr	r5, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691e      	ldr	r6, [r3, #16]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff ffb6 	bl	800c728 <makeFreeRtosPriority>
 800c7bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7c6:	9202      	str	r2, [sp, #8]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	9100      	str	r1, [sp, #0]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f001 f930 	bl	800da38 <xTaskCreateStatic>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e01c      	b.n	800c818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685c      	ldr	r4, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7ea:	b29e      	uxth	r6, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ff98 	bl	800c728 <makeFreeRtosPriority>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f107 030c 	add.w	r3, r7, #12
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	9200      	str	r2, [sp, #0]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	4632      	mov	r2, r6
 800c806:	4629      	mov	r1, r5
 800c808:	4620      	mov	r0, r4
 800c80a:	f001 f978 	bl	800dafe <xTaskCreate>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b01      	cmp	r3, #1
 800c812:	d001      	beq.n	800c818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <osDelay+0x16>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	e000      	b.n	800c83a <osDelay+0x18>
 800c838:	2301      	movs	r3, #1
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 fbc4 	bl	800dfc8 <vTaskDelay>
  
  return osOK;
 800c840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b082      	sub	sp, #8
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d007      	beq.n	800c86a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	4619      	mov	r1, r3
 800c860:	2001      	movs	r0, #1
 800c862:	f000 faea 	bl	800ce3a <xQueueCreateMutexStatic>
 800c866:	4603      	mov	r3, r0
 800c868:	e003      	b.n	800c872 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c86a:	2001      	movs	r0, #1
 800c86c:	f000 facd 	bl	800ce0a <xQueueCreateMutex>
 800c870:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c886:	2300      	movs	r3, #0
 800c888:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <osMutexWait+0x18>
    return osErrorParameter;
 800c890:	2380      	movs	r3, #128	; 0x80
 800c892:	e03a      	b.n	800c90a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c89e:	d103      	bne.n	800c8a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a4:	60fb      	str	r3, [r7, #12]
 800c8a6:	e009      	b.n	800c8bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d006      	beq.n	800c8bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <osMutexWait+0x40>
      ticks = 1;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c8bc:	f7ff ff4c 	bl	800c758 <inHandlerMode>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d017      	beq.n	800c8f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c8c6:	f107 0308 	add.w	r3, r7, #8
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 ff04 	bl	800d6dc <xQueueReceiveFromISR>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d001      	beq.n	800c8de <osMutexWait+0x62>
      return osErrorOS;
 800c8da:	23ff      	movs	r3, #255	; 0xff
 800c8dc:	e015      	b.n	800c90a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d011      	beq.n	800c908 <osMutexWait+0x8c>
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <osMutexWait+0x98>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	e008      	b.n	800c908 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c8f6:	68f9      	ldr	r1, [r7, #12]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fddb 	bl	800d4b4 <xQueueSemaphoreTake>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b01      	cmp	r3, #1
 800c902:	d001      	beq.n	800c908 <osMutexWait+0x8c>
    return osErrorOS;
 800c904:	23ff      	movs	r3, #255	; 0xff
 800c906:	e000      	b.n	800c90a <osMutexWait+0x8e>
  }
  
  return osOK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c920:	2300      	movs	r3, #0
 800c922:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c924:	2300      	movs	r3, #0
 800c926:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c928:	f7ff ff16 	bl	800c758 <inHandlerMode>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d016      	beq.n	800c960 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c932:	f107 0308 	add.w	r3, r7, #8
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fc3f 	bl	800d1bc <xQueueGiveFromISR>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b01      	cmp	r3, #1
 800c942:	d001      	beq.n	800c948 <osMutexRelease+0x30>
      return osErrorOS;
 800c944:	23ff      	movs	r3, #255	; 0xff
 800c946:	e017      	b.n	800c978 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d013      	beq.n	800c976 <osMutexRelease+0x5e>
 800c94e:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <osMutexRelease+0x68>)
 800c950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	e00a      	b.n	800c976 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c960:	2300      	movs	r3, #0
 800c962:	2200      	movs	r2, #0
 800c964:	2100      	movs	r1, #0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fa82 	bl	800ce70 <xQueueGenericSend>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d001      	beq.n	800c976 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c972:	23ff      	movs	r3, #255	; 0xff
 800c974:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c976:	68fb      	ldr	r3, [r7, #12]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c984:	b590      	push	{r4, r7, lr}
 800c986:	b085      	sub	sp, #20
 800c988:	af02      	add	r7, sp, #8
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d011      	beq.n	800c9ba <osMessageCreate+0x36>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00d      	beq.n	800c9ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6859      	ldr	r1, [r3, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	689a      	ldr	r2, [r3, #8]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2400      	movs	r4, #0
 800c9b0:	9400      	str	r4, [sp, #0]
 800c9b2:	f000 f92d 	bl	800cc10 <xQueueGenericCreateStatic>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	e008      	b.n	800c9cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f000 f9a5 	bl	800cd14 <xQueueGenericCreate>
 800c9ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd90      	pop	{r4, r7, pc}

0800c9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f103 0208 	add.w	r2, r3, #8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f103 0208 	add.w	r2, r3, #8
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f103 0208 	add.w	r2, r3, #8
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca2e:	b480      	push	{r7}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	689a      	ldr	r2, [r3, #8]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
}
 800ca6a:	bf00      	nop
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d103      	bne.n	800ca96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e00c      	b.n	800cab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e002      	b.n	800caa4 <vListInsert+0x2e>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	d2f6      	bcs.n	800ca9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
}
 800cadc:	bf00      	nop
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6892      	ldr	r2, [r2, #8]
 800cafe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6852      	ldr	r2, [r2, #4]
 800cb08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d103      	bne.n	800cb1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	1e5a      	subs	r2, r3, #1
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10c      	bne.n	800cb6a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cb6a:	f002 f9e7 	bl	800ef3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb7a:	fb01 f303 	mul.w	r3, r1, r3
 800cb7e:	441a      	add	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	68f9      	ldr	r1, [r7, #12]
 800cb9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cba0:	fb01 f303 	mul.w	r3, r1, r3
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	22ff      	movs	r2, #255	; 0xff
 800cbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d114      	bne.n	800cbea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01a      	beq.n	800cbfe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3310      	adds	r3, #16
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f001 fc9f 	bl	800e510 <xTaskRemoveFromEventList>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d012      	beq.n	800cbfe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbd8:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <xQueueGenericReset+0xd0>)
 800cbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	e009      	b.n	800cbfe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3310      	adds	r3, #16
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fef0 	bl	800c9d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3324      	adds	r3, #36	; 0x24
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff feeb 	bl	800c9d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbfe:	f002 f9d1 	bl	800efa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc02:	2301      	movs	r3, #1
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	e000ed04 	.word	0xe000ed04

0800cc10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10c      	bne.n	800cc3e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10c      	bne.n	800cc5e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	b672      	cpsid	i
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	b662      	cpsie	i
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <xQueueGenericCreateStatic+0x5a>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <xQueueGenericCreateStatic+0x5e>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <xQueueGenericCreateStatic+0x60>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10c      	bne.n	800cc8e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	b672      	cpsid	i
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	b662      	cpsie	i
 800cc88:	623b      	str	r3, [r7, #32]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d102      	bne.n	800cc9a <xQueueGenericCreateStatic+0x8a>
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <xQueueGenericCreateStatic+0x8e>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <xQueueGenericCreateStatic+0x90>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10c      	bne.n	800ccbe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca8:	b672      	cpsid	i
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	b662      	cpsie	i
 800ccb8:	61fb      	str	r3, [r7, #28]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccbe:	2348      	movs	r3, #72	; 0x48
 800ccc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b48      	cmp	r3, #72	; 0x48
 800ccc6:	d00c      	beq.n	800cce2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cccc:	b672      	cpsid	i
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	b662      	cpsie	i
 800ccdc:	61bb      	str	r3, [r7, #24]
}
 800ccde:	bf00      	nop
 800cce0:	e7fe      	b.n	800cce0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cce2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00d      	beq.n	800cd0a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f000 f847 	bl	800cd98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3730      	adds	r7, #48	; 0x30
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	; 0x28
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	b672      	cpsid	i
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	b662      	cpsie	i
 800cd3c:	613b      	str	r3, [r7, #16]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61fb      	str	r3, [r7, #28]
 800cd4c:	e004      	b.n	800cd58 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	fb02 f303 	mul.w	r3, r2, r3
 800cd56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	3348      	adds	r3, #72	; 0x48
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f002 fa19 	bl	800f194 <pvPortMalloc>
 800cd62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d011      	beq.n	800cd8e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	3348      	adds	r3, #72	; 0x48
 800cd72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd7c:	79fa      	ldrb	r2, [r7, #7]
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4613      	mov	r3, r2
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f805 	bl	800cd98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
	}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3720      	adds	r7, #32
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d103      	bne.n	800cdb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	69ba      	ldr	r2, [r7, #24]
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	e002      	b.n	800cdba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	69b8      	ldr	r0, [r7, #24]
 800cdca:	f7ff feb7 	bl	800cb3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00e      	beq.n	800ce02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f837 	bl	800ce70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b086      	sub	sp, #24
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	4603      	mov	r3, r0
 800ce12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce14:	2301      	movs	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce1c:	79fb      	ldrb	r3, [r7, #7]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6939      	ldr	r1, [r7, #16]
 800ce22:	6978      	ldr	r0, [r7, #20]
 800ce24:	f7ff ff76 	bl	800cd14 <xQueueGenericCreate>
 800ce28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff ffd3 	bl	800cdd6 <prvInitialiseMutex>

		return xNewQueue;
 800ce30:	68fb      	ldr	r3, [r7, #12]
	}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b088      	sub	sp, #32
 800ce3e:	af02      	add	r7, sp, #8
 800ce40:	4603      	mov	r3, r0
 800ce42:	6039      	str	r1, [r7, #0]
 800ce44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce46:	2301      	movs	r3, #1
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2200      	movs	r2, #0
 800ce56:	6939      	ldr	r1, [r7, #16]
 800ce58:	6978      	ldr	r0, [r7, #20]
 800ce5a:	f7ff fed9 	bl	800cc10 <xQueueGenericCreateStatic>
 800ce5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff ffb8 	bl	800cdd6 <prvInitialiseMutex>

		return xNewQueue;
 800ce66:	68fb      	ldr	r3, [r7, #12]
	}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08e      	sub	sp, #56	; 0x38
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10c      	bne.n	800cea6 <xQueueGenericSend+0x36>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	b672      	cpsid	i
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	b662      	cpsie	i
 800cea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <xQueueGenericSend+0x44>
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <xQueueGenericSend+0x48>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e000      	b.n	800ceba <xQueueGenericSend+0x4a>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10c      	bne.n	800ced8 <xQueueGenericSend+0x68>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	b672      	cpsid	i
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	b662      	cpsie	i
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ced4:	bf00      	nop
 800ced6:	e7fe      	b.n	800ced6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d103      	bne.n	800cee6 <xQueueGenericSend+0x76>
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d101      	bne.n	800ceea <xQueueGenericSend+0x7a>
 800cee6:	2301      	movs	r3, #1
 800cee8:	e000      	b.n	800ceec <xQueueGenericSend+0x7c>
 800ceea:	2300      	movs	r3, #0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10c      	bne.n	800cf0a <xQueueGenericSend+0x9a>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	b672      	cpsid	i
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	b662      	cpsie	i
 800cf04:	623b      	str	r3, [r7, #32]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf0a:	f001 fcc9 	bl	800e8a0 <xTaskGetSchedulerState>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <xQueueGenericSend+0xaa>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <xQueueGenericSend+0xae>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <xQueueGenericSend+0xb0>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10c      	bne.n	800cf3e <xQueueGenericSend+0xce>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	b672      	cpsid	i
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	b662      	cpsie	i
 800cf38:	61fb      	str	r3, [r7, #28]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf3e:	f001 fffd 	bl	800ef3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d302      	bcc.n	800cf54 <xQueueGenericSend+0xe4>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d129      	bne.n	800cfa8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf5a:	f000 fc5d 	bl	800d818 <prvCopyDataToQueue>
 800cf5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d010      	beq.n	800cf8a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	3324      	adds	r3, #36	; 0x24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f001 facf 	bl	800e510 <xTaskRemoveFromEventList>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d013      	beq.n	800cfa0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf78:	4b3f      	ldr	r3, [pc, #252]	; (800d078 <xQueueGenericSend+0x208>)
 800cf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	e00a      	b.n	800cfa0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf90:	4b39      	ldr	r3, [pc, #228]	; (800d078 <xQueueGenericSend+0x208>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfa0:	f002 f800 	bl	800efa4 <vPortExitCritical>
				return pdPASS;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e063      	b.n	800d070 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d103      	bne.n	800cfb6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfae:	f001 fff9 	bl	800efa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e05c      	b.n	800d070 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfbc:	f107 0314 	add.w	r3, r7, #20
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f001 fb09 	bl	800e5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfca:	f001 ffeb 	bl	800efa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfce:	f001 f89f 	bl	800e110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfd2:	f001 ffb3 	bl	800ef3c <vPortEnterCritical>
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfdc:	b25b      	sxtb	r3, r3
 800cfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe2:	d103      	bne.n	800cfec <xQueueGenericSend+0x17c>
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff2:	b25b      	sxtb	r3, r3
 800cff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff8:	d103      	bne.n	800d002 <xQueueGenericSend+0x192>
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d002:	f001 ffcf 	bl	800efa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d006:	1d3a      	adds	r2, r7, #4
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f001 faf8 	bl	800e604 <xTaskCheckForTimeOut>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d124      	bne.n	800d064 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d01c:	f000 fcf4 	bl	800da08 <prvIsQueueFull>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d018      	beq.n	800d058 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	3310      	adds	r3, #16
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f001 fa48 	bl	800e4c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d036:	f000 fc7f 	bl	800d938 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d03a:	f001 f877 	bl	800e12c <xTaskResumeAll>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	f47f af7c 	bne.w	800cf3e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d046:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <xQueueGenericSend+0x208>)
 800d048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	e772      	b.n	800cf3e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d05a:	f000 fc6d 	bl	800d938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d05e:	f001 f865 	bl	800e12c <xTaskResumeAll>
 800d062:	e76c      	b.n	800cf3e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d066:	f000 fc67 	bl	800d938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d06a:	f001 f85f 	bl	800e12c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d070:	4618      	mov	r0, r3
 800d072:	3738      	adds	r7, #56	; 0x38
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed04 	.word	0xe000ed04

0800d07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08e      	sub	sp, #56	; 0x38
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10c      	bne.n	800d0ae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d098:	b672      	cpsid	i
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	b662      	cpsie	i
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0aa:	bf00      	nop
 800d0ac:	e7fe      	b.n	800d0ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d103      	bne.n	800d0bc <xQueueGenericSendFromISR+0x40>
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <xQueueGenericSendFromISR+0x44>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e000      	b.n	800d0c2 <xQueueGenericSendFromISR+0x46>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d10c      	bne.n	800d0e0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ca:	b672      	cpsid	i
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	b662      	cpsie	i
 800d0da:	623b      	str	r3, [r7, #32]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d103      	bne.n	800d0ee <xQueueGenericSendFromISR+0x72>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d101      	bne.n	800d0f2 <xQueueGenericSendFromISR+0x76>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <xQueueGenericSendFromISR+0x78>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10c      	bne.n	800d112 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	b672      	cpsid	i
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	b662      	cpsie	i
 800d10c:	61fb      	str	r3, [r7, #28]
}
 800d10e:	bf00      	nop
 800d110:	e7fe      	b.n	800d110 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d112:	f001 fffb 	bl	800f10c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d116:	f3ef 8211 	mrs	r2, BASEPRI
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	b672      	cpsid	i
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	b662      	cpsie	i
 800d12e:	61ba      	str	r2, [r7, #24]
 800d130:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d132:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13e:	429a      	cmp	r2, r3
 800d140:	d302      	bcc.n	800d148 <xQueueGenericSendFromISR+0xcc>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d12c      	bne.n	800d1a2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d14e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	68b9      	ldr	r1, [r7, #8]
 800d156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d158:	f000 fb5e 	bl	800d818 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d15c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d164:	d112      	bne.n	800d18c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d016      	beq.n	800d19c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	3324      	adds	r3, #36	; 0x24
 800d172:	4618      	mov	r0, r3
 800d174:	f001 f9cc 	bl	800e510 <xTaskRemoveFromEventList>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00e      	beq.n	800d19c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00b      	beq.n	800d19c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	e007      	b.n	800d19c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d18c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d190:	3301      	adds	r3, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	b25a      	sxtb	r2, r3
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d19c:	2301      	movs	r3, #1
 800d19e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d1a0:	e001      	b.n	800d1a6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d1b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3738      	adds	r7, #56	; 0x38
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08e      	sub	sp, #56	; 0x38
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10c      	bne.n	800d1ea <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	b672      	cpsid	i
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	b662      	cpsie	i
 800d1e4:	623b      	str	r3, [r7, #32]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00c      	beq.n	800d20c <xQueueGiveFromISR+0x50>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	b672      	cpsid	i
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	b662      	cpsie	i
 800d206:	61fb      	str	r3, [r7, #28]
}
 800d208:	bf00      	nop
 800d20a:	e7fe      	b.n	800d20a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d103      	bne.n	800d21c <xQueueGiveFromISR+0x60>
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <xQueueGiveFromISR+0x64>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e000      	b.n	800d222 <xQueueGiveFromISR+0x66>
 800d220:	2300      	movs	r3, #0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10c      	bne.n	800d240 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	b672      	cpsid	i
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	b662      	cpsie	i
 800d23a:	61bb      	str	r3, [r7, #24]
}
 800d23c:	bf00      	nop
 800d23e:	e7fe      	b.n	800d23e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d240:	f001 ff64 	bl	800f10c <vPortValidateInterruptPriority>
	__asm volatile
 800d244:	f3ef 8211 	mrs	r2, BASEPRI
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	b672      	cpsid	i
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	b662      	cpsie	i
 800d25c:	617a      	str	r2, [r7, #20]
 800d25e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d260:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d262:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d270:	429a      	cmp	r2, r3
 800d272:	d22b      	bcs.n	800d2cc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d112      	bne.n	800d2b6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d016      	beq.n	800d2c6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	3324      	adds	r3, #36	; 0x24
 800d29c:	4618      	mov	r0, r3
 800d29e:	f001 f937 	bl	800e510 <xTaskRemoveFromEventList>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00e      	beq.n	800d2c6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00b      	beq.n	800d2c6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	e007      	b.n	800d2c6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	b25a      	sxtb	r2, r3
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ca:	e001      	b.n	800d2d0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f383 8811 	msr	BASEPRI, r3
}
 800d2da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3738      	adds	r7, #56	; 0x38
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08c      	sub	sp, #48	; 0x30
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10c      	bne.n	800d31c <xQueueReceive+0x34>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	b672      	cpsid	i
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	b662      	cpsie	i
 800d316:	623b      	str	r3, [r7, #32]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d103      	bne.n	800d32a <xQueueReceive+0x42>
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <xQueueReceive+0x46>
 800d32a:	2301      	movs	r3, #1
 800d32c:	e000      	b.n	800d330 <xQueueReceive+0x48>
 800d32e:	2300      	movs	r3, #0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10c      	bne.n	800d34e <xQueueReceive+0x66>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	b672      	cpsid	i
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	b662      	cpsie	i
 800d348:	61fb      	str	r3, [r7, #28]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d34e:	f001 faa7 	bl	800e8a0 <xTaskGetSchedulerState>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <xQueueReceive+0x76>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <xQueueReceive+0x7a>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <xQueueReceive+0x7c>
 800d362:	2300      	movs	r3, #0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10c      	bne.n	800d382 <xQueueReceive+0x9a>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	b672      	cpsid	i
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	b662      	cpsie	i
 800d37c:	61bb      	str	r3, [r7, #24]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d382:	f001 fddb 	bl	800ef3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d01f      	beq.n	800d3d2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d396:	f000 faa9 	bl	800d8ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39c:	1e5a      	subs	r2, r3, #1
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00f      	beq.n	800d3ca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 f8ae 	bl	800e510 <xTaskRemoveFromEventList>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d007      	beq.n	800d3ca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3ba:	4b3d      	ldr	r3, [pc, #244]	; (800d4b0 <xQueueReceive+0x1c8>)
 800d3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3ca:	f001 fdeb 	bl	800efa4 <vPortExitCritical>
				return pdPASS;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e069      	b.n	800d4a6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d103      	bne.n	800d3e0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3d8:	f001 fde4 	bl	800efa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e062      	b.n	800d4a6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3e6:	f107 0310 	add.w	r3, r7, #16
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f001 f8f4 	bl	800e5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3f4:	f001 fdd6 	bl	800efa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3f8:	f000 fe8a 	bl	800e110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3fc:	f001 fd9e 	bl	800ef3c <vPortEnterCritical>
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d406:	b25b      	sxtb	r3, r3
 800d408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40c:	d103      	bne.n	800d416 <xQueueReceive+0x12e>
 800d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d41c:	b25b      	sxtb	r3, r3
 800d41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d422:	d103      	bne.n	800d42c <xQueueReceive+0x144>
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d42c:	f001 fdba 	bl	800efa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d430:	1d3a      	adds	r2, r7, #4
 800d432:	f107 0310 	add.w	r3, r7, #16
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 f8e3 	bl	800e604 <xTaskCheckForTimeOut>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d123      	bne.n	800d48c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d446:	f000 fac9 	bl	800d9dc <prvIsQueueEmpty>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d017      	beq.n	800d480 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	3324      	adds	r3, #36	; 0x24
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f001 f833 	bl	800e4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d460:	f000 fa6a 	bl	800d938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d464:	f000 fe62 	bl	800e12c <xTaskResumeAll>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d189      	bne.n	800d382 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d46e:	4b10      	ldr	r3, [pc, #64]	; (800d4b0 <xQueueReceive+0x1c8>)
 800d470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	e780      	b.n	800d382 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d482:	f000 fa59 	bl	800d938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d486:	f000 fe51 	bl	800e12c <xTaskResumeAll>
 800d48a:	e77a      	b.n	800d382 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d48e:	f000 fa53 	bl	800d938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d492:	f000 fe4b 	bl	800e12c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d498:	f000 faa0 	bl	800d9dc <prvIsQueueEmpty>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f43f af6f 	beq.w	800d382 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3730      	adds	r7, #48	; 0x30
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08e      	sub	sp, #56	; 0x38
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10c      	bne.n	800d4ea <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d4:	b672      	cpsid	i
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	b662      	cpsie	i
 800d4e4:	623b      	str	r3, [r7, #32]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00c      	beq.n	800d50c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	b672      	cpsid	i
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	b662      	cpsie	i
 800d506:	61fb      	str	r3, [r7, #28]
}
 800d508:	bf00      	nop
 800d50a:	e7fe      	b.n	800d50a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d50c:	f001 f9c8 	bl	800e8a0 <xTaskGetSchedulerState>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <xQueueSemaphoreTake+0x68>
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d101      	bne.n	800d520 <xQueueSemaphoreTake+0x6c>
 800d51c:	2301      	movs	r3, #1
 800d51e:	e000      	b.n	800d522 <xQueueSemaphoreTake+0x6e>
 800d520:	2300      	movs	r3, #0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10c      	bne.n	800d540 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52a:	b672      	cpsid	i
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	b662      	cpsie	i
 800d53a:	61bb      	str	r3, [r7, #24]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d540:	f001 fcfc 	bl	800ef3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d024      	beq.n	800d59a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	1e5a      	subs	r2, r3, #1
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d104      	bne.n	800d56a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d560:	f001 fb64 	bl	800ec2c <pvTaskIncrementMutexHeldCount>
 800d564:	4602      	mov	r2, r0
 800d566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d568:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00f      	beq.n	800d592 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	3310      	adds	r3, #16
 800d576:	4618      	mov	r0, r3
 800d578:	f000 ffca 	bl	800e510 <xTaskRemoveFromEventList>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d582:	4b55      	ldr	r3, [pc, #340]	; (800d6d8 <xQueueSemaphoreTake+0x224>)
 800d584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d592:	f001 fd07 	bl	800efa4 <vPortExitCritical>
				return pdPASS;
 800d596:	2301      	movs	r3, #1
 800d598:	e099      	b.n	800d6ce <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d113      	bne.n	800d5c8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00c      	beq.n	800d5c0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	b672      	cpsid	i
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	b662      	cpsie	i
 800d5ba:	617b      	str	r3, [r7, #20]
}
 800d5bc:	bf00      	nop
 800d5be:	e7fe      	b.n	800d5be <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d5c0:	f001 fcf0 	bl	800efa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e082      	b.n	800d6ce <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d106      	bne.n	800d5dc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5ce:	f107 030c 	add.w	r3, r7, #12
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f001 f800 	bl	800e5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5dc:	f001 fce2 	bl	800efa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5e0:	f000 fd96 	bl	800e110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5e4:	f001 fcaa 	bl	800ef3c <vPortEnterCritical>
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ee:	b25b      	sxtb	r3, r3
 800d5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f4:	d103      	bne.n	800d5fe <xQueueSemaphoreTake+0x14a>
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d604:	b25b      	sxtb	r3, r3
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60a:	d103      	bne.n	800d614 <xQueueSemaphoreTake+0x160>
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d614:	f001 fcc6 	bl	800efa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d618:	463a      	mov	r2, r7
 800d61a:	f107 030c 	add.w	r3, r7, #12
 800d61e:	4611      	mov	r1, r2
 800d620:	4618      	mov	r0, r3
 800d622:	f000 ffef 	bl	800e604 <xTaskCheckForTimeOut>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d132      	bne.n	800d692 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d62c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d62e:	f000 f9d5 	bl	800d9dc <prvIsQueueEmpty>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d026      	beq.n	800d686 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d109      	bne.n	800d654 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d640:	f001 fc7c 	bl	800ef3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	4618      	mov	r0, r3
 800d64a:	f001 f947 	bl	800e8dc <xTaskPriorityInherit>
 800d64e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d650:	f001 fca8 	bl	800efa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	3324      	adds	r3, #36	; 0x24
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 ff31 	bl	800e4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d664:	f000 f968 	bl	800d938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d668:	f000 fd60 	bl	800e12c <xTaskResumeAll>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f47f af66 	bne.w	800d540 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d674:	4b18      	ldr	r3, [pc, #96]	; (800d6d8 <xQueueSemaphoreTake+0x224>)
 800d676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	e75c      	b.n	800d540 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d688:	f000 f956 	bl	800d938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d68c:	f000 fd4e 	bl	800e12c <xTaskResumeAll>
 800d690:	e756      	b.n	800d540 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d694:	f000 f950 	bl	800d938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d698:	f000 fd48 	bl	800e12c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d69e:	f000 f99d 	bl	800d9dc <prvIsQueueEmpty>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f43f af4b 	beq.w	800d540 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00d      	beq.n	800d6cc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d6b0:	f001 fc44 	bl	800ef3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d6b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6b6:	f000 f897 	bl	800d7e8 <prvGetDisinheritPriorityAfterTimeout>
 800d6ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f001 fa14 	bl	800eaf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d6c8:	f001 fc6c 	bl	800efa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3738      	adds	r7, #56	; 0x38
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b08e      	sub	sp, #56	; 0x38
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10c      	bne.n	800d70c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	b672      	cpsid	i
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	b662      	cpsie	i
 800d706:	623b      	str	r3, [r7, #32]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d103      	bne.n	800d71a <xQueueReceiveFromISR+0x3e>
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <xQueueReceiveFromISR+0x42>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e000      	b.n	800d720 <xQueueReceiveFromISR+0x44>
 800d71e:	2300      	movs	r3, #0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10c      	bne.n	800d73e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	b672      	cpsid	i
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	b662      	cpsie	i
 800d738:	61fb      	str	r3, [r7, #28]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d73e:	f001 fce5 	bl	800f10c <vPortValidateInterruptPriority>
	__asm volatile
 800d742:	f3ef 8211 	mrs	r2, BASEPRI
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	b672      	cpsid	i
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	b662      	cpsie	i
 800d75a:	61ba      	str	r2, [r7, #24]
 800d75c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d75e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d02f      	beq.n	800d7ce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d778:	68b9      	ldr	r1, [r7, #8]
 800d77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d77c:	f000 f8b6 	bl	800d8ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	1e5a      	subs	r2, r3, #1
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d788:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d790:	d112      	bne.n	800d7b8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d016      	beq.n	800d7c8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	3310      	adds	r3, #16
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 feb6 	bl	800e510 <xTaskRemoveFromEventList>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00e      	beq.n	800d7c8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	e007      	b.n	800d7c8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7bc:	3301      	adds	r3, #1
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	b25a      	sxtb	r2, r3
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d7cc:	e001      	b.n	800d7d2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	f383 8811 	msr	BASEPRI, r3
}
 800d7dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3738      	adds	r7, #56	; 0x38
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f1c3 0307 	rsb	r3, r3, #7
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	e001      	b.n	800d80a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d80a:	68fb      	ldr	r3, [r7, #12]
	}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10d      	bne.n	800d852 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d14d      	bne.n	800d8da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4618      	mov	r0, r3
 800d844:	f001 f8ca 	bl	800e9dc <xTaskPriorityDisinherit>
 800d848:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	609a      	str	r2, [r3, #8]
 800d850:	e043      	b.n	800d8da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d119      	bne.n	800d88c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6858      	ldr	r0, [r3, #4]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d860:	461a      	mov	r2, r3
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	f001 fea6 	bl	800f5b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d870:	441a      	add	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d32b      	bcc.n	800d8da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	605a      	str	r2, [r3, #4]
 800d88a:	e026      	b.n	800d8da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	68d8      	ldr	r0, [r3, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d894:	461a      	mov	r2, r3
 800d896:	68b9      	ldr	r1, [r7, #8]
 800d898:	f001 fe8c 	bl	800f5b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a4:	425b      	negs	r3, r3
 800d8a6:	441a      	add	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d207      	bcs.n	800d8c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	425b      	negs	r3, r3
 800d8c2:	441a      	add	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d105      	bne.n	800d8da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8e2:	697b      	ldr	r3, [r7, #20]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d018      	beq.n	800d930 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	441a      	add	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	429a      	cmp	r2, r3
 800d916:	d303      	bcc.n	800d920 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68d9      	ldr	r1, [r3, #12]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d928:	461a      	mov	r2, r3
 800d92a:	6838      	ldr	r0, [r7, #0]
 800d92c:	f001 fe42 	bl	800f5b4 <memcpy>
	}
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d940:	f001 fafc 	bl	800ef3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d94a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d94c:	e011      	b.n	800d972 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	2b00      	cmp	r3, #0
 800d954:	d012      	beq.n	800d97c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3324      	adds	r3, #36	; 0x24
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 fdd8 	bl	800e510 <xTaskRemoveFromEventList>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d966:	f000 feb3 	bl	800e6d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d976:	2b00      	cmp	r3, #0
 800d978:	dce9      	bgt.n	800d94e <prvUnlockQueue+0x16>
 800d97a:	e000      	b.n	800d97e <prvUnlockQueue+0x46>
					break;
 800d97c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	22ff      	movs	r2, #255	; 0xff
 800d982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d986:	f001 fb0d 	bl	800efa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d98a:	f001 fad7 	bl	800ef3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d994:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d996:	e011      	b.n	800d9bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d012      	beq.n	800d9c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3310      	adds	r3, #16
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 fdb3 	bl	800e510 <xTaskRemoveFromEventList>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9b0:	f000 fe8e 	bl	800e6d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	dce9      	bgt.n	800d998 <prvUnlockQueue+0x60>
 800d9c4:	e000      	b.n	800d9c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	22ff      	movs	r2, #255	; 0xff
 800d9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9d0:	f001 fae8 	bl	800efa4 <vPortExitCritical>
}
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9e4:	f001 faaa 	bl	800ef3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e001      	b.n	800d9fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9fa:	f001 fad3 	bl	800efa4 <vPortExitCritical>

	return xReturn;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da10:	f001 fa94 	bl	800ef3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d102      	bne.n	800da26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da20:	2301      	movs	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e001      	b.n	800da2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da26:	2300      	movs	r3, #0
 800da28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da2a:	f001 fabb 	bl	800efa4 <vPortExitCritical>

	return xReturn;
 800da2e:	68fb      	ldr	r3, [r7, #12]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08e      	sub	sp, #56	; 0x38
 800da3c:	af04      	add	r7, sp, #16
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10c      	bne.n	800da66 <xTaskCreateStatic+0x2e>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	b672      	cpsid	i
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	b662      	cpsie	i
 800da60:	623b      	str	r3, [r7, #32]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800da66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10c      	bne.n	800da86 <xTaskCreateStatic+0x4e>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	b672      	cpsid	i
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	b662      	cpsie	i
 800da80:	61fb      	str	r3, [r7, #28]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da86:	23b4      	movs	r3, #180	; 0xb4
 800da88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	2bb4      	cmp	r3, #180	; 0xb4
 800da8e:	d00c      	beq.n	800daaa <xTaskCreateStatic+0x72>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da94:	b672      	cpsid	i
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	b662      	cpsie	i
 800daa4:	61bb      	str	r3, [r7, #24]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800daaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01e      	beq.n	800daf0 <xTaskCreateStatic+0xb8>
 800dab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01b      	beq.n	800daf0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	2202      	movs	r2, #2
 800dac6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800daca:	2300      	movs	r3, #0
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	9302      	str	r3, [sp, #8]
 800dad2:	f107 0314 	add.w	r3, r7, #20
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 f850 	bl	800db88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daea:	f000 f8ed 	bl	800dcc8 <prvAddNewTaskToReadyList>
 800daee:	e001      	b.n	800daf4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800daf0:	2300      	movs	r3, #0
 800daf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800daf4:	697b      	ldr	r3, [r7, #20]
	}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3728      	adds	r7, #40	; 0x28
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b08c      	sub	sp, #48	; 0x30
 800db02:	af04      	add	r7, sp, #16
 800db04:	60f8      	str	r0, [r7, #12]
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	603b      	str	r3, [r7, #0]
 800db0a:	4613      	mov	r3, r2
 800db0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4618      	mov	r0, r3
 800db14:	f001 fb3e 	bl	800f194 <pvPortMalloc>
 800db18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00e      	beq.n	800db3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db20:	20b4      	movs	r0, #180	; 0xb4
 800db22:	f001 fb37 	bl	800f194 <pvPortMalloc>
 800db26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	631a      	str	r2, [r3, #48]	; 0x30
 800db34:	e005      	b.n	800db42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db36:	6978      	ldr	r0, [r7, #20]
 800db38:	f001 fbf6 	bl	800f328 <vPortFree>
 800db3c:	e001      	b.n	800db42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d017      	beq.n	800db78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db50:	88fa      	ldrh	r2, [r7, #6]
 800db52:	2300      	movs	r3, #0
 800db54:	9303      	str	r3, [sp, #12]
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 f80e 	bl	800db88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db6c:	69f8      	ldr	r0, [r7, #28]
 800db6e:	f000 f8ab 	bl	800dcc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db72:	2301      	movs	r3, #1
 800db74:	61bb      	str	r3, [r7, #24]
 800db76:	e002      	b.n	800db7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db78:	f04f 33ff 	mov.w	r3, #4294967295
 800db7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db7e:	69bb      	ldr	r3, [r7, #24]
	}
 800db80:	4618      	mov	r0, r3
 800db82:	3720      	adds	r7, #32
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db9a:	6879      	ldr	r1, [r7, #4]
 800db9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dba0:	440b      	add	r3, r1
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f023 0307 	bic.w	r3, r3, #7
 800dbae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	f003 0307 	and.w	r3, r3, #7
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	b672      	cpsid	i
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	b662      	cpsie	i
 800dbce:	617b      	str	r3, [r7, #20]
}
 800dbd0:	bf00      	nop
 800dbd2:	e7fe      	b.n	800dbd2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d01f      	beq.n	800dc1a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbda:	2300      	movs	r3, #0
 800dbdc:	61fb      	str	r3, [r7, #28]
 800dbde:	e012      	b.n	800dc06 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	7819      	ldrb	r1, [r3, #0]
 800dbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	4413      	add	r3, r2
 800dbee:	3334      	adds	r3, #52	; 0x34
 800dbf0:	460a      	mov	r2, r1
 800dbf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	3301      	adds	r3, #1
 800dc04:	61fb      	str	r3, [r7, #28]
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	2b0f      	cmp	r3, #15
 800dc0a:	d9e9      	bls.n	800dbe0 <prvInitialiseNewTask+0x58>
 800dc0c:	e000      	b.n	800dc10 <prvInitialiseNewTask+0x88>
			{
				break;
 800dc0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc18:	e003      	b.n	800dc22 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	2b06      	cmp	r3, #6
 800dc26:	d901      	bls.n	800dc2c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc28:	2306      	movs	r3, #6
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc40:	3304      	adds	r3, #4
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fee6 	bl	800ca14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	3318      	adds	r3, #24
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe fee1 	bl	800ca14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	f1c3 0207 	rsb	r2, r3, #7
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	334c      	adds	r3, #76	; 0x4c
 800dc7c:	2260      	movs	r2, #96	; 0x60
 800dc7e:	2100      	movs	r1, #0
 800dc80:	4618      	mov	r0, r3
 800dc82:	f001 fca5 	bl	800f5d0 <memset>
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	4a0c      	ldr	r2, [pc, #48]	; (800dcbc <prvInitialiseNewTask+0x134>)
 800dc8a:	651a      	str	r2, [r3, #80]	; 0x50
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	4a0c      	ldr	r2, [pc, #48]	; (800dcc0 <prvInitialiseNewTask+0x138>)
 800dc90:	655a      	str	r2, [r3, #84]	; 0x54
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	4a0b      	ldr	r2, [pc, #44]	; (800dcc4 <prvInitialiseNewTask+0x13c>)
 800dc96:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	68f9      	ldr	r1, [r7, #12]
 800dc9c:	69b8      	ldr	r0, [r7, #24]
 800dc9e:	f001 f83f 	bl	800ed20 <pxPortInitialiseStack>
 800dca2:	4602      	mov	r2, r0
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcb4:	bf00      	nop
 800dcb6:	3720      	adds	r7, #32
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	08071a50 	.word	0x08071a50
 800dcc0:	08071a70 	.word	0x08071a70
 800dcc4:	08071a30 	.word	0x08071a30

0800dcc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcd0:	f001 f934 	bl	800ef3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcd4:	4b2a      	ldr	r3, [pc, #168]	; (800dd80 <prvAddNewTaskToReadyList+0xb8>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	4a29      	ldr	r2, [pc, #164]	; (800dd80 <prvAddNewTaskToReadyList+0xb8>)
 800dcdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcde:	4b29      	ldr	r3, [pc, #164]	; (800dd84 <prvAddNewTaskToReadyList+0xbc>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dce6:	4a27      	ldr	r2, [pc, #156]	; (800dd84 <prvAddNewTaskToReadyList+0xbc>)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcec:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <prvAddNewTaskToReadyList+0xb8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d110      	bne.n	800dd16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcf4:	f000 fd10 	bl	800e718 <prvInitialiseTaskLists>
 800dcf8:	e00d      	b.n	800dd16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcfa:	4b23      	ldr	r3, [pc, #140]	; (800dd88 <prvAddNewTaskToReadyList+0xc0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d109      	bne.n	800dd16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd02:	4b20      	ldr	r3, [pc, #128]	; (800dd84 <prvAddNewTaskToReadyList+0xbc>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d802      	bhi.n	800dd16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd10:	4a1c      	ldr	r2, [pc, #112]	; (800dd84 <prvAddNewTaskToReadyList+0xbc>)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd16:	4b1d      	ldr	r3, [pc, #116]	; (800dd8c <prvAddNewTaskToReadyList+0xc4>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	4a1b      	ldr	r2, [pc, #108]	; (800dd8c <prvAddNewTaskToReadyList+0xc4>)
 800dd1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd24:	2201      	movs	r2, #1
 800dd26:	409a      	lsls	r2, r3
 800dd28:	4b19      	ldr	r3, [pc, #100]	; (800dd90 <prvAddNewTaskToReadyList+0xc8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	4a18      	ldr	r2, [pc, #96]	; (800dd90 <prvAddNewTaskToReadyList+0xc8>)
 800dd30:	6013      	str	r3, [r2, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd36:	4613      	mov	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4a15      	ldr	r2, [pc, #84]	; (800dd94 <prvAddNewTaskToReadyList+0xcc>)
 800dd40:	441a      	add	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3304      	adds	r3, #4
 800dd46:	4619      	mov	r1, r3
 800dd48:	4610      	mov	r0, r2
 800dd4a:	f7fe fe70 	bl	800ca2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd4e:	f001 f929 	bl	800efa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd52:	4b0d      	ldr	r3, [pc, #52]	; (800dd88 <prvAddNewTaskToReadyList+0xc0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00e      	beq.n	800dd78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd5a:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <prvAddNewTaskToReadyList+0xbc>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d207      	bcs.n	800dd78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd68:	4b0b      	ldr	r3, [pc, #44]	; (800dd98 <prvAddNewTaskToReadyList+0xd0>)
 800dd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20000e74 	.word	0x20000e74
 800dd84:	20000d74 	.word	0x20000d74
 800dd88:	20000e80 	.word	0x20000e80
 800dd8c:	20000e90 	.word	0x20000e90
 800dd90:	20000e7c 	.word	0x20000e7c
 800dd94:	20000d78 	.word	0x20000d78
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dda4:	f001 f8ca 	bl	800ef3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <vTaskDelete+0x18>
 800ddae:	4b3a      	ldr	r3, [pc, #232]	; (800de98 <vTaskDelete+0xfc>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	e000      	b.n	800ddb6 <vTaskDelete+0x1a>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fe93 	bl	800cae8 <uxListRemove>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d115      	bne.n	800ddf4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddcc:	4933      	ldr	r1, [pc, #204]	; (800de9c <vTaskDelete+0x100>)
 800ddce:	4613      	mov	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	440b      	add	r3, r1
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10a      	bne.n	800ddf4 <vTaskDelete+0x58>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde2:	2201      	movs	r2, #1
 800dde4:	fa02 f303 	lsl.w	r3, r2, r3
 800dde8:	43da      	mvns	r2, r3
 800ddea:	4b2d      	ldr	r3, [pc, #180]	; (800dea0 <vTaskDelete+0x104>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4013      	ands	r3, r2
 800ddf0:	4a2b      	ldr	r2, [pc, #172]	; (800dea0 <vTaskDelete+0x104>)
 800ddf2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	3318      	adds	r3, #24
 800de00:	4618      	mov	r0, r3
 800de02:	f7fe fe71 	bl	800cae8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800de06:	4b27      	ldr	r3, [pc, #156]	; (800dea4 <vTaskDelete+0x108>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3301      	adds	r3, #1
 800de0c:	4a25      	ldr	r2, [pc, #148]	; (800dea4 <vTaskDelete+0x108>)
 800de0e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800de10:	4b21      	ldr	r3, [pc, #132]	; (800de98 <vTaskDelete+0xfc>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	429a      	cmp	r2, r3
 800de18:	d10b      	bne.n	800de32 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3304      	adds	r3, #4
 800de1e:	4619      	mov	r1, r3
 800de20:	4821      	ldr	r0, [pc, #132]	; (800dea8 <vTaskDelete+0x10c>)
 800de22:	f7fe fe04 	bl	800ca2e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800de26:	4b21      	ldr	r3, [pc, #132]	; (800deac <vTaskDelete+0x110>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	4a1f      	ldr	r2, [pc, #124]	; (800deac <vTaskDelete+0x110>)
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	e009      	b.n	800de46 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800de32:	4b1f      	ldr	r3, [pc, #124]	; (800deb0 <vTaskDelete+0x114>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	3b01      	subs	r3, #1
 800de38:	4a1d      	ldr	r2, [pc, #116]	; (800deb0 <vTaskDelete+0x114>)
 800de3a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 fcd9 	bl	800e7f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800de42:	f000 fd0d 	bl	800e860 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800de46:	f001 f8ad 	bl	800efa4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800de4a:	4b1a      	ldr	r3, [pc, #104]	; (800deb4 <vTaskDelete+0x118>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d01d      	beq.n	800de8e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800de52:	4b11      	ldr	r3, [pc, #68]	; (800de98 <vTaskDelete+0xfc>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d118      	bne.n	800de8e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800de5c:	4b16      	ldr	r3, [pc, #88]	; (800deb8 <vTaskDelete+0x11c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00c      	beq.n	800de7e <vTaskDelete+0xe2>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	b672      	cpsid	i
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	b662      	cpsie	i
 800de78:	60bb      	str	r3, [r7, #8]
}
 800de7a:	bf00      	nop
 800de7c:	e7fe      	b.n	800de7c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <vTaskDelete+0x120>)
 800de80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de8e:	bf00      	nop
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	20000d74 	.word	0x20000d74
 800de9c:	20000d78 	.word	0x20000d78
 800dea0:	20000e7c 	.word	0x20000e7c
 800dea4:	20000e90 	.word	0x20000e90
 800dea8:	20000e48 	.word	0x20000e48
 800deac:	20000e5c 	.word	0x20000e5c
 800deb0:	20000e74 	.word	0x20000e74
 800deb4:	20000e80 	.word	0x20000e80
 800deb8:	20000e9c 	.word	0x20000e9c
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800deca:	2300      	movs	r3, #0
 800decc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10c      	bne.n	800deee <vTaskDelayUntil+0x2e>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded8:	b672      	cpsid	i
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	b662      	cpsie	i
 800dee8:	617b      	str	r3, [r7, #20]
}
 800deea:	bf00      	nop
 800deec:	e7fe      	b.n	800deec <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10c      	bne.n	800df0e <vTaskDelayUntil+0x4e>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	b672      	cpsid	i
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	b662      	cpsie	i
 800df08:	613b      	str	r3, [r7, #16]
}
 800df0a:	bf00      	nop
 800df0c:	e7fe      	b.n	800df0c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800df0e:	4b2b      	ldr	r3, [pc, #172]	; (800dfbc <vTaskDelayUntil+0xfc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00c      	beq.n	800df30 <vTaskDelayUntil+0x70>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	b672      	cpsid	i
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	b662      	cpsie	i
 800df2a:	60fb      	str	r3, [r7, #12]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800df30:	f000 f8ee 	bl	800e110 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800df34:	4b22      	ldr	r3, [pc, #136]	; (800dfc0 <vTaskDelayUntil+0x100>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	4413      	add	r3, r2
 800df42:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6a3a      	ldr	r2, [r7, #32]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d20b      	bcs.n	800df66 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	429a      	cmp	r2, r3
 800df56:	d211      	bcs.n	800df7c <vTaskDelayUntil+0xbc>
 800df58:	69fa      	ldr	r2, [r7, #28]
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d90d      	bls.n	800df7c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800df60:	2301      	movs	r3, #1
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
 800df64:	e00a      	b.n	800df7c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	69fa      	ldr	r2, [r7, #28]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d303      	bcc.n	800df78 <vTaskDelayUntil+0xb8>
 800df70:	69fa      	ldr	r2, [r7, #28]
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	429a      	cmp	r2, r3
 800df76:	d901      	bls.n	800df7c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800df78:	2301      	movs	r3, #1
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	69fa      	ldr	r2, [r7, #28]
 800df80:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800df88:	69fa      	ldr	r2, [r7, #28]
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2100      	movs	r1, #0
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fe5f 	bl	800ec54 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800df96:	f000 f8c9 	bl	800e12c <xTaskResumeAll>
 800df9a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <vTaskDelayUntil+0x104>)
 800dfa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfb2:	bf00      	nop
 800dfb4:	3728      	adds	r7, #40	; 0x28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000e9c 	.word	0x20000e9c
 800dfc0:	20000e78 	.word	0x20000e78
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d019      	beq.n	800e00e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dfda:	4b14      	ldr	r3, [pc, #80]	; (800e02c <vTaskDelay+0x64>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00c      	beq.n	800dffc <vTaskDelay+0x34>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	b672      	cpsid	i
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	b662      	cpsie	i
 800dff6:	60bb      	str	r3, [r7, #8]
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dffc:	f000 f888 	bl	800e110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e000:	2100      	movs	r1, #0
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fe26 	bl	800ec54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e008:	f000 f890 	bl	800e12c <xTaskResumeAll>
 800e00c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d107      	bne.n	800e024 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e014:	4b06      	ldr	r3, [pc, #24]	; (800e030 <vTaskDelay+0x68>)
 800e016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	20000e9c 	.word	0x20000e9c
 800e030:	e000ed04 	.word	0xe000ed04

0800e034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08a      	sub	sp, #40	; 0x28
 800e038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e03e:	2300      	movs	r3, #0
 800e040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e042:	463a      	mov	r2, r7
 800e044:	1d39      	adds	r1, r7, #4
 800e046:	f107 0308 	add.w	r3, r7, #8
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f2 fab2 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	9202      	str	r2, [sp, #8]
 800e058:	9301      	str	r3, [sp, #4]
 800e05a:	2300      	movs	r3, #0
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	2300      	movs	r3, #0
 800e060:	460a      	mov	r2, r1
 800e062:	4923      	ldr	r1, [pc, #140]	; (800e0f0 <vTaskStartScheduler+0xbc>)
 800e064:	4823      	ldr	r0, [pc, #140]	; (800e0f4 <vTaskStartScheduler+0xc0>)
 800e066:	f7ff fce7 	bl	800da38 <xTaskCreateStatic>
 800e06a:	4603      	mov	r3, r0
 800e06c:	4a22      	ldr	r2, [pc, #136]	; (800e0f8 <vTaskStartScheduler+0xc4>)
 800e06e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e070:	4b21      	ldr	r3, [pc, #132]	; (800e0f8 <vTaskStartScheduler+0xc4>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e078:	2301      	movs	r3, #1
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	e001      	b.n	800e082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e07e:	2300      	movs	r3, #0
 800e080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d11d      	bne.n	800e0c4 <vTaskStartScheduler+0x90>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	b672      	cpsid	i
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	b662      	cpsie	i
 800e09c:	613b      	str	r3, [r7, #16]
}
 800e09e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0a0:	4b16      	ldr	r3, [pc, #88]	; (800e0fc <vTaskStartScheduler+0xc8>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	334c      	adds	r3, #76	; 0x4c
 800e0a6:	4a16      	ldr	r2, [pc, #88]	; (800e100 <vTaskStartScheduler+0xcc>)
 800e0a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0aa:	4b16      	ldr	r3, [pc, #88]	; (800e104 <vTaskStartScheduler+0xd0>)
 800e0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0b2:	4b15      	ldr	r3, [pc, #84]	; (800e108 <vTaskStartScheduler+0xd4>)
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0b8:	4b14      	ldr	r3, [pc, #80]	; (800e10c <vTaskStartScheduler+0xd8>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0be:	f000 febf 	bl	800ee40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0c2:	e010      	b.n	800e0e6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ca:	d10c      	bne.n	800e0e6 <vTaskStartScheduler+0xb2>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	b672      	cpsid	i
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	b662      	cpsie	i
 800e0e0:	60fb      	str	r3, [r7, #12]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <vTaskStartScheduler+0xb0>
}
 800e0e6:	bf00      	nop
 800e0e8:	3718      	adds	r7, #24
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	080100a4 	.word	0x080100a4
 800e0f4:	0800e6e9 	.word	0x0800e6e9
 800e0f8:	20000e98 	.word	0x20000e98
 800e0fc:	20000d74 	.word	0x20000d74
 800e100:	200000d8 	.word	0x200000d8
 800e104:	20000e94 	.word	0x20000e94
 800e108:	20000e80 	.word	0x20000e80
 800e10c:	20000e78 	.word	0x20000e78

0800e110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e114:	4b04      	ldr	r3, [pc, #16]	; (800e128 <vTaskSuspendAll+0x18>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3301      	adds	r3, #1
 800e11a:	4a03      	ldr	r2, [pc, #12]	; (800e128 <vTaskSuspendAll+0x18>)
 800e11c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e11e:	bf00      	nop
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr
 800e128:	20000e9c 	.word	0x20000e9c

0800e12c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e132:	2300      	movs	r3, #0
 800e134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e136:	2300      	movs	r3, #0
 800e138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e13a:	4b42      	ldr	r3, [pc, #264]	; (800e244 <xTaskResumeAll+0x118>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10c      	bne.n	800e15c <xTaskResumeAll+0x30>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	b672      	cpsid	i
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	b662      	cpsie	i
 800e156:	603b      	str	r3, [r7, #0]
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e15c:	f000 feee 	bl	800ef3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e160:	4b38      	ldr	r3, [pc, #224]	; (800e244 <xTaskResumeAll+0x118>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3b01      	subs	r3, #1
 800e166:	4a37      	ldr	r2, [pc, #220]	; (800e244 <xTaskResumeAll+0x118>)
 800e168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e16a:	4b36      	ldr	r3, [pc, #216]	; (800e244 <xTaskResumeAll+0x118>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d161      	bne.n	800e236 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e172:	4b35      	ldr	r3, [pc, #212]	; (800e248 <xTaskResumeAll+0x11c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d05d      	beq.n	800e236 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e17a:	e02e      	b.n	800e1da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e17c:	4b33      	ldr	r3, [pc, #204]	; (800e24c <xTaskResumeAll+0x120>)
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3318      	adds	r3, #24
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fe fcad 	bl	800cae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3304      	adds	r3, #4
 800e192:	4618      	mov	r0, r3
 800e194:	f7fe fca8 	bl	800cae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	2201      	movs	r2, #1
 800e19e:	409a      	lsls	r2, r3
 800e1a0:	4b2b      	ldr	r3, [pc, #172]	; (800e250 <xTaskResumeAll+0x124>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	4a2a      	ldr	r2, [pc, #168]	; (800e250 <xTaskResumeAll+0x124>)
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4a27      	ldr	r2, [pc, #156]	; (800e254 <xTaskResumeAll+0x128>)
 800e1b8:	441a      	add	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7fe fc34 	bl	800ca2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ca:	4b23      	ldr	r3, [pc, #140]	; (800e258 <xTaskResumeAll+0x12c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d302      	bcc.n	800e1da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e1d4:	4b21      	ldr	r3, [pc, #132]	; (800e25c <xTaskResumeAll+0x130>)
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1da:	4b1c      	ldr	r3, [pc, #112]	; (800e24c <xTaskResumeAll+0x120>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1cc      	bne.n	800e17c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1e8:	f000 fb3a 	bl	800e860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e1ec:	4b1c      	ldr	r3, [pc, #112]	; (800e260 <xTaskResumeAll+0x134>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d010      	beq.n	800e21a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1f8:	f000 f846 	bl	800e288 <xTaskIncrementTick>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e202:	4b16      	ldr	r3, [pc, #88]	; (800e25c <xTaskResumeAll+0x130>)
 800e204:	2201      	movs	r2, #1
 800e206:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1f1      	bne.n	800e1f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e214:	4b12      	ldr	r3, [pc, #72]	; (800e260 <xTaskResumeAll+0x134>)
 800e216:	2200      	movs	r2, #0
 800e218:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e21a:	4b10      	ldr	r3, [pc, #64]	; (800e25c <xTaskResumeAll+0x130>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e222:	2301      	movs	r3, #1
 800e224:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e226:	4b0f      	ldr	r3, [pc, #60]	; (800e264 <xTaskResumeAll+0x138>)
 800e228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e236:	f000 feb5 	bl	800efa4 <vPortExitCritical>

	return xAlreadyYielded;
 800e23a:	68bb      	ldr	r3, [r7, #8]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	20000e9c 	.word	0x20000e9c
 800e248:	20000e74 	.word	0x20000e74
 800e24c:	20000e34 	.word	0x20000e34
 800e250:	20000e7c 	.word	0x20000e7c
 800e254:	20000d78 	.word	0x20000d78
 800e258:	20000d74 	.word	0x20000d74
 800e25c:	20000e88 	.word	0x20000e88
 800e260:	20000e84 	.word	0x20000e84
 800e264:	e000ed04 	.word	0xe000ed04

0800e268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e26e:	4b05      	ldr	r3, [pc, #20]	; (800e284 <xTaskGetTickCount+0x1c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e274:	687b      	ldr	r3, [r7, #4]
}
 800e276:	4618      	mov	r0, r3
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	20000e78 	.word	0x20000e78

0800e288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e28e:	2300      	movs	r3, #0
 800e290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e292:	4b4f      	ldr	r3, [pc, #316]	; (800e3d0 <xTaskIncrementTick+0x148>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f040 808a 	bne.w	800e3b0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e29c:	4b4d      	ldr	r3, [pc, #308]	; (800e3d4 <xTaskIncrementTick+0x14c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2a4:	4a4b      	ldr	r2, [pc, #300]	; (800e3d4 <xTaskIncrementTick+0x14c>)
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d122      	bne.n	800e2f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2b0:	4b49      	ldr	r3, [pc, #292]	; (800e3d8 <xTaskIncrementTick+0x150>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00c      	beq.n	800e2d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	b672      	cpsid	i
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	b662      	cpsie	i
 800e2ce:	603b      	str	r3, [r7, #0]
}
 800e2d0:	bf00      	nop
 800e2d2:	e7fe      	b.n	800e2d2 <xTaskIncrementTick+0x4a>
 800e2d4:	4b40      	ldr	r3, [pc, #256]	; (800e3d8 <xTaskIncrementTick+0x150>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	4b40      	ldr	r3, [pc, #256]	; (800e3dc <xTaskIncrementTick+0x154>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a3e      	ldr	r2, [pc, #248]	; (800e3d8 <xTaskIncrementTick+0x150>)
 800e2e0:	6013      	str	r3, [r2, #0]
 800e2e2:	4a3e      	ldr	r2, [pc, #248]	; (800e3dc <xTaskIncrementTick+0x154>)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	4b3d      	ldr	r3, [pc, #244]	; (800e3e0 <xTaskIncrementTick+0x158>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	4a3c      	ldr	r2, [pc, #240]	; (800e3e0 <xTaskIncrementTick+0x158>)
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	f000 fab5 	bl	800e860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2f6:	4b3b      	ldr	r3, [pc, #236]	; (800e3e4 <xTaskIncrementTick+0x15c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d348      	bcc.n	800e392 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e300:	4b35      	ldr	r3, [pc, #212]	; (800e3d8 <xTaskIncrementTick+0x150>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d104      	bne.n	800e314 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e30a:	4b36      	ldr	r3, [pc, #216]	; (800e3e4 <xTaskIncrementTick+0x15c>)
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295
 800e310:	601a      	str	r2, [r3, #0]
					break;
 800e312:	e03e      	b.n	800e392 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e314:	4b30      	ldr	r3, [pc, #192]	; (800e3d8 <xTaskIncrementTick+0x150>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d203      	bcs.n	800e334 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e32c:	4a2d      	ldr	r2, [pc, #180]	; (800e3e4 <xTaskIncrementTick+0x15c>)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e332:	e02e      	b.n	800e392 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	3304      	adds	r3, #4
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fbd5 	bl	800cae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e342:	2b00      	cmp	r3, #0
 800e344:	d004      	beq.n	800e350 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	3318      	adds	r3, #24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fbcc 	bl	800cae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e354:	2201      	movs	r2, #1
 800e356:	409a      	lsls	r2, r3
 800e358:	4b23      	ldr	r3, [pc, #140]	; (800e3e8 <xTaskIncrementTick+0x160>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4313      	orrs	r3, r2
 800e35e:	4a22      	ldr	r2, [pc, #136]	; (800e3e8 <xTaskIncrementTick+0x160>)
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4a1f      	ldr	r2, [pc, #124]	; (800e3ec <xTaskIncrementTick+0x164>)
 800e370:	441a      	add	r2, r3
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	3304      	adds	r3, #4
 800e376:	4619      	mov	r1, r3
 800e378:	4610      	mov	r0, r2
 800e37a:	f7fe fb58 	bl	800ca2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e382:	4b1b      	ldr	r3, [pc, #108]	; (800e3f0 <xTaskIncrementTick+0x168>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e388:	429a      	cmp	r2, r3
 800e38a:	d3b9      	bcc.n	800e300 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e38c:	2301      	movs	r3, #1
 800e38e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e390:	e7b6      	b.n	800e300 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e392:	4b17      	ldr	r3, [pc, #92]	; (800e3f0 <xTaskIncrementTick+0x168>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e398:	4914      	ldr	r1, [pc, #80]	; (800e3ec <xTaskIncrementTick+0x164>)
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	440b      	add	r3, r1
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d907      	bls.n	800e3ba <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	617b      	str	r3, [r7, #20]
 800e3ae:	e004      	b.n	800e3ba <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e3b0:	4b10      	ldr	r3, [pc, #64]	; (800e3f4 <xTaskIncrementTick+0x16c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	4a0f      	ldr	r2, [pc, #60]	; (800e3f4 <xTaskIncrementTick+0x16c>)
 800e3b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	; (800e3f8 <xTaskIncrementTick+0x170>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e3c6:	697b      	ldr	r3, [r7, #20]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3718      	adds	r7, #24
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	20000e9c 	.word	0x20000e9c
 800e3d4:	20000e78 	.word	0x20000e78
 800e3d8:	20000e2c 	.word	0x20000e2c
 800e3dc:	20000e30 	.word	0x20000e30
 800e3e0:	20000e8c 	.word	0x20000e8c
 800e3e4:	20000e94 	.word	0x20000e94
 800e3e8:	20000e7c 	.word	0x20000e7c
 800e3ec:	20000d78 	.word	0x20000d78
 800e3f0:	20000d74 	.word	0x20000d74
 800e3f4:	20000e84 	.word	0x20000e84
 800e3f8:	20000e88 	.word	0x20000e88

0800e3fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e402:	4b2a      	ldr	r3, [pc, #168]	; (800e4ac <vTaskSwitchContext+0xb0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e40a:	4b29      	ldr	r3, [pc, #164]	; (800e4b0 <vTaskSwitchContext+0xb4>)
 800e40c:	2201      	movs	r2, #1
 800e40e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e410:	e046      	b.n	800e4a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e412:	4b27      	ldr	r3, [pc, #156]	; (800e4b0 <vTaskSwitchContext+0xb4>)
 800e414:	2200      	movs	r2, #0
 800e416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e418:	4b26      	ldr	r3, [pc, #152]	; (800e4b4 <vTaskSwitchContext+0xb8>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	fab3 f383 	clz	r3, r3
 800e424:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	f1c3 031f 	rsb	r3, r3, #31
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	4922      	ldr	r1, [pc, #136]	; (800e4b8 <vTaskSwitchContext+0xbc>)
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	4613      	mov	r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	440b      	add	r3, r1
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d10c      	bne.n	800e45c <vTaskSwitchContext+0x60>
	__asm volatile
 800e442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e446:	b672      	cpsid	i
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	b662      	cpsie	i
 800e456:	607b      	str	r3, [r7, #4]
}
 800e458:	bf00      	nop
 800e45a:	e7fe      	b.n	800e45a <vTaskSwitchContext+0x5e>
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	4613      	mov	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4a14      	ldr	r2, [pc, #80]	; (800e4b8 <vTaskSwitchContext+0xbc>)
 800e468:	4413      	add	r3, r2
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	605a      	str	r2, [r3, #4]
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	3308      	adds	r3, #8
 800e47e:	429a      	cmp	r2, r3
 800e480:	d104      	bne.n	800e48c <vTaskSwitchContext+0x90>
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	605a      	str	r2, [r3, #4]
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	4a0a      	ldr	r2, [pc, #40]	; (800e4bc <vTaskSwitchContext+0xc0>)
 800e494:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e496:	4b09      	ldr	r3, [pc, #36]	; (800e4bc <vTaskSwitchContext+0xc0>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	334c      	adds	r3, #76	; 0x4c
 800e49c:	4a08      	ldr	r2, [pc, #32]	; (800e4c0 <vTaskSwitchContext+0xc4>)
 800e49e:	6013      	str	r3, [r2, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	371c      	adds	r7, #28
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	20000e9c 	.word	0x20000e9c
 800e4b0:	20000e88 	.word	0x20000e88
 800e4b4:	20000e7c 	.word	0x20000e7c
 800e4b8:	20000d78 	.word	0x20000d78
 800e4bc:	20000d74 	.word	0x20000d74
 800e4c0:	200000d8 	.word	0x200000d8

0800e4c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10c      	bne.n	800e4ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	b672      	cpsid	i
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	b662      	cpsie	i
 800e4e8:	60fb      	str	r3, [r7, #12]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4ee:	4b07      	ldr	r3, [pc, #28]	; (800e50c <vTaskPlaceOnEventList+0x48>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3318      	adds	r3, #24
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7fe fabd 	bl	800ca76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	6838      	ldr	r0, [r7, #0]
 800e500:	f000 fba8 	bl	800ec54 <prvAddCurrentTaskToDelayedList>
}
 800e504:	bf00      	nop
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	20000d74 	.word	0x20000d74

0800e510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10c      	bne.n	800e540 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	b672      	cpsid	i
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	b662      	cpsie	i
 800e53a:	60fb      	str	r3, [r7, #12]
}
 800e53c:	bf00      	nop
 800e53e:	e7fe      	b.n	800e53e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	3318      	adds	r3, #24
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe facf 	bl	800cae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54a:	4b1d      	ldr	r3, [pc, #116]	; (800e5c0 <xTaskRemoveFromEventList+0xb0>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d11c      	bne.n	800e58c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	3304      	adds	r3, #4
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fac6 	bl	800cae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e560:	2201      	movs	r2, #1
 800e562:	409a      	lsls	r2, r3
 800e564:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <xTaskRemoveFromEventList+0xb4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4313      	orrs	r3, r2
 800e56a:	4a16      	ldr	r2, [pc, #88]	; (800e5c4 <xTaskRemoveFromEventList+0xb4>)
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4a13      	ldr	r2, [pc, #76]	; (800e5c8 <xTaskRemoveFromEventList+0xb8>)
 800e57c:	441a      	add	r2, r3
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	3304      	adds	r3, #4
 800e582:	4619      	mov	r1, r3
 800e584:	4610      	mov	r0, r2
 800e586:	f7fe fa52 	bl	800ca2e <vListInsertEnd>
 800e58a:	e005      	b.n	800e598 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	3318      	adds	r3, #24
 800e590:	4619      	mov	r1, r3
 800e592:	480e      	ldr	r0, [pc, #56]	; (800e5cc <xTaskRemoveFromEventList+0xbc>)
 800e594:	f7fe fa4b 	bl	800ca2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59c:	4b0c      	ldr	r3, [pc, #48]	; (800e5d0 <xTaskRemoveFromEventList+0xc0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d905      	bls.n	800e5b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5aa:	4b0a      	ldr	r3, [pc, #40]	; (800e5d4 <xTaskRemoveFromEventList+0xc4>)
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	e001      	b.n	800e5b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5b6:	697b      	ldr	r3, [r7, #20]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	20000e9c 	.word	0x20000e9c
 800e5c4:	20000e7c 	.word	0x20000e7c
 800e5c8:	20000d78 	.word	0x20000d78
 800e5cc:	20000e34 	.word	0x20000e34
 800e5d0:	20000d74 	.word	0x20000d74
 800e5d4:	20000e88 	.word	0x20000e88

0800e5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5e0:	4b06      	ldr	r3, [pc, #24]	; (800e5fc <vTaskInternalSetTimeOutState+0x24>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5e8:	4b05      	ldr	r3, [pc, #20]	; (800e600 <vTaskInternalSetTimeOutState+0x28>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	605a      	str	r2, [r3, #4]
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20000e8c 	.word	0x20000e8c
 800e600:	20000e78 	.word	0x20000e78

0800e604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10c      	bne.n	800e62e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	b672      	cpsid	i
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	b662      	cpsie	i
 800e628:	613b      	str	r3, [r7, #16]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10c      	bne.n	800e64e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	b672      	cpsid	i
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	b662      	cpsie	i
 800e648:	60fb      	str	r3, [r7, #12]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e64e:	f000 fc75 	bl	800ef3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e652:	4b1d      	ldr	r3, [pc, #116]	; (800e6c8 <xTaskCheckForTimeOut+0xc4>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	69ba      	ldr	r2, [r7, #24]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66a:	d102      	bne.n	800e672 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e66c:	2300      	movs	r3, #0
 800e66e:	61fb      	str	r3, [r7, #28]
 800e670:	e023      	b.n	800e6ba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	4b15      	ldr	r3, [pc, #84]	; (800e6cc <xTaskCheckForTimeOut+0xc8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d007      	beq.n	800e68e <xTaskCheckForTimeOut+0x8a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	69ba      	ldr	r2, [r7, #24]
 800e684:	429a      	cmp	r2, r3
 800e686:	d302      	bcc.n	800e68e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	61fb      	str	r3, [r7, #28]
 800e68c:	e015      	b.n	800e6ba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	697a      	ldr	r2, [r7, #20]
 800e694:	429a      	cmp	r2, r3
 800e696:	d20b      	bcs.n	800e6b0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	1ad2      	subs	r2, r2, r3
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff ff97 	bl	800e5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61fb      	str	r3, [r7, #28]
 800e6ae:	e004      	b.n	800e6ba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6ba:	f000 fc73 	bl	800efa4 <vPortExitCritical>

	return xReturn;
 800e6be:	69fb      	ldr	r3, [r7, #28]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3720      	adds	r7, #32
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	20000e78 	.word	0x20000e78
 800e6cc:	20000e8c 	.word	0x20000e8c

0800e6d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6d4:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <vTaskMissedYield+0x14>)
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	601a      	str	r2, [r3, #0]
}
 800e6da:	bf00      	nop
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	20000e88 	.word	0x20000e88

0800e6e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6f0:	f000 f852 	bl	800e798 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6f4:	4b06      	ldr	r3, [pc, #24]	; (800e710 <prvIdleTask+0x28>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d9f9      	bls.n	800e6f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6fc:	4b05      	ldr	r3, [pc, #20]	; (800e714 <prvIdleTask+0x2c>)
 800e6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e70c:	e7f0      	b.n	800e6f0 <prvIdleTask+0x8>
 800e70e:	bf00      	nop
 800e710:	20000d78 	.word	0x20000d78
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e71e:	2300      	movs	r3, #0
 800e720:	607b      	str	r3, [r7, #4]
 800e722:	e00c      	b.n	800e73e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	4613      	mov	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4a12      	ldr	r2, [pc, #72]	; (800e778 <prvInitialiseTaskLists+0x60>)
 800e730:	4413      	add	r3, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe f94e 	bl	800c9d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3301      	adds	r3, #1
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b06      	cmp	r3, #6
 800e742:	d9ef      	bls.n	800e724 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e744:	480d      	ldr	r0, [pc, #52]	; (800e77c <prvInitialiseTaskLists+0x64>)
 800e746:	f7fe f945 	bl	800c9d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e74a:	480d      	ldr	r0, [pc, #52]	; (800e780 <prvInitialiseTaskLists+0x68>)
 800e74c:	f7fe f942 	bl	800c9d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e750:	480c      	ldr	r0, [pc, #48]	; (800e784 <prvInitialiseTaskLists+0x6c>)
 800e752:	f7fe f93f 	bl	800c9d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e756:	480c      	ldr	r0, [pc, #48]	; (800e788 <prvInitialiseTaskLists+0x70>)
 800e758:	f7fe f93c 	bl	800c9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e75c:	480b      	ldr	r0, [pc, #44]	; (800e78c <prvInitialiseTaskLists+0x74>)
 800e75e:	f7fe f939 	bl	800c9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e762:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <prvInitialiseTaskLists+0x78>)
 800e764:	4a05      	ldr	r2, [pc, #20]	; (800e77c <prvInitialiseTaskLists+0x64>)
 800e766:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <prvInitialiseTaskLists+0x7c>)
 800e76a:	4a05      	ldr	r2, [pc, #20]	; (800e780 <prvInitialiseTaskLists+0x68>)
 800e76c:	601a      	str	r2, [r3, #0]
}
 800e76e:	bf00      	nop
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20000d78 	.word	0x20000d78
 800e77c:	20000e04 	.word	0x20000e04
 800e780:	20000e18 	.word	0x20000e18
 800e784:	20000e34 	.word	0x20000e34
 800e788:	20000e48 	.word	0x20000e48
 800e78c:	20000e60 	.word	0x20000e60
 800e790:	20000e2c 	.word	0x20000e2c
 800e794:	20000e30 	.word	0x20000e30

0800e798 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */

		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e79e:	e019      	b.n	800e7d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e7a0:	f000 fbcc 	bl	800ef3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7a4:	4b10      	ldr	r3, [pc, #64]	; (800e7e8 <prvCheckTasksWaitingTermination+0x50>)
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe f999 	bl	800cae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e7b6:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <prvCheckTasksWaitingTermination+0x54>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	4a0b      	ldr	r2, [pc, #44]	; (800e7ec <prvCheckTasksWaitingTermination+0x54>)
 800e7be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e7c0:	4b0b      	ldr	r3, [pc, #44]	; (800e7f0 <prvCheckTasksWaitingTermination+0x58>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	4a0a      	ldr	r2, [pc, #40]	; (800e7f0 <prvCheckTasksWaitingTermination+0x58>)
 800e7c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7ca:	f000 fbeb 	bl	800efa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f810 	bl	800e7f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7d4:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <prvCheckTasksWaitingTermination+0x58>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1e1      	bne.n	800e7a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7dc:	bf00      	nop
 800e7de:	bf00      	nop
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000e48 	.word	0x20000e48
 800e7ec:	20000e74 	.word	0x20000e74
 800e7f0:	20000e5c 	.word	0x20000e5c

0800e7f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	334c      	adds	r3, #76	; 0x4c
 800e800:	4618      	mov	r0, r3
 800e802:	f000 ff8f 	bl	800f724 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d108      	bne.n	800e822 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e814:	4618      	mov	r0, r3
 800e816:	f000 fd87 	bl	800f328 <vPortFree>
				vPortFree( pxTCB );
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fd84 	bl	800f328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e820:	e01a      	b.n	800e858 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d103      	bne.n	800e834 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fd7b 	bl	800f328 <vPortFree>
	}
 800e832:	e011      	b.n	800e858 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d00c      	beq.n	800e858 <prvDeleteTCB+0x64>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	b672      	cpsid	i
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	b662      	cpsie	i
 800e852:	60fb      	str	r3, [r7, #12]
}
 800e854:	bf00      	nop
 800e856:	e7fe      	b.n	800e856 <prvDeleteTCB+0x62>
	}
 800e858:	bf00      	nop
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e866:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <prvResetNextTaskUnblockTime+0x38>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d104      	bne.n	800e87a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e870:	4b0a      	ldr	r3, [pc, #40]	; (800e89c <prvResetNextTaskUnblockTime+0x3c>)
 800e872:	f04f 32ff 	mov.w	r2, #4294967295
 800e876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e878:	e008      	b.n	800e88c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e87a:	4b07      	ldr	r3, [pc, #28]	; (800e898 <prvResetNextTaskUnblockTime+0x38>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	4a04      	ldr	r2, [pc, #16]	; (800e89c <prvResetNextTaskUnblockTime+0x3c>)
 800e88a:	6013      	str	r3, [r2, #0]
}
 800e88c:	bf00      	nop
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	20000e2c 	.word	0x20000e2c
 800e89c:	20000e94 	.word	0x20000e94

0800e8a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <xTaskGetSchedulerState+0x34>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d102      	bne.n	800e8b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	607b      	str	r3, [r7, #4]
 800e8b2:	e008      	b.n	800e8c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8b4:	4b08      	ldr	r3, [pc, #32]	; (800e8d8 <xTaskGetSchedulerState+0x38>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d102      	bne.n	800e8c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8bc:	2302      	movs	r3, #2
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	e001      	b.n	800e8c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8c6:	687b      	ldr	r3, [r7, #4]
	}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr
 800e8d4:	20000e80 	.word	0x20000e80
 800e8d8:	20000e9c 	.word	0x20000e9c

0800e8dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d069      	beq.n	800e9c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f6:	4b36      	ldr	r3, [pc, #216]	; (800e9d0 <xTaskPriorityInherit+0xf4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d259      	bcs.n	800e9b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	2b00      	cmp	r3, #0
 800e906:	db06      	blt.n	800e916 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e908:	4b31      	ldr	r3, [pc, #196]	; (800e9d0 <xTaskPriorityInherit+0xf4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90e:	f1c3 0207 	rsb	r2, r3, #7
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	6959      	ldr	r1, [r3, #20]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91e:	4613      	mov	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4413      	add	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4a2b      	ldr	r2, [pc, #172]	; (800e9d4 <xTaskPriorityInherit+0xf8>)
 800e928:	4413      	add	r3, r2
 800e92a:	4299      	cmp	r1, r3
 800e92c:	d13a      	bne.n	800e9a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	3304      	adds	r3, #4
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe f8d8 	bl	800cae8 <uxListRemove>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d115      	bne.n	800e96a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4924      	ldr	r1, [pc, #144]	; (800e9d4 <xTaskPriorityInherit+0xf8>)
 800e944:	4613      	mov	r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	4413      	add	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	440b      	add	r3, r1
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10a      	bne.n	800e96a <xTaskPriorityInherit+0x8e>
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	2201      	movs	r2, #1
 800e95a:	fa02 f303 	lsl.w	r3, r2, r3
 800e95e:	43da      	mvns	r2, r3
 800e960:	4b1d      	ldr	r3, [pc, #116]	; (800e9d8 <xTaskPriorityInherit+0xfc>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4013      	ands	r3, r2
 800e966:	4a1c      	ldr	r2, [pc, #112]	; (800e9d8 <xTaskPriorityInherit+0xfc>)
 800e968:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e96a:	4b19      	ldr	r3, [pc, #100]	; (800e9d0 <xTaskPriorityInherit+0xf4>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e978:	2201      	movs	r2, #1
 800e97a:	409a      	lsls	r2, r3
 800e97c:	4b16      	ldr	r3, [pc, #88]	; (800e9d8 <xTaskPriorityInherit+0xfc>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4313      	orrs	r3, r2
 800e982:	4a15      	ldr	r2, [pc, #84]	; (800e9d8 <xTaskPriorityInherit+0xfc>)
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4a10      	ldr	r2, [pc, #64]	; (800e9d4 <xTaskPriorityInherit+0xf8>)
 800e994:	441a      	add	r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	3304      	adds	r3, #4
 800e99a:	4619      	mov	r1, r3
 800e99c:	4610      	mov	r0, r2
 800e99e:	f7fe f846 	bl	800ca2e <vListInsertEnd>
 800e9a2:	e004      	b.n	800e9ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e9a4:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <xTaskPriorityInherit+0xf4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	60fb      	str	r3, [r7, #12]
 800e9b2:	e008      	b.n	800e9c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9b8:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <xTaskPriorityInherit+0xf4>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d201      	bcs.n	800e9c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
	}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20000d74 	.word	0x20000d74
 800e9d4:	20000d78 	.word	0x20000d78
 800e9d8:	20000e7c 	.word	0x20000e7c

0800e9dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d072      	beq.n	800ead8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9f2:	4b3c      	ldr	r3, [pc, #240]	; (800eae4 <xTaskPriorityDisinherit+0x108>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d00c      	beq.n	800ea16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	b672      	cpsid	i
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	b662      	cpsie	i
 800ea10:	60fb      	str	r3, [r7, #12]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10c      	bne.n	800ea38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	b672      	cpsid	i
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	b662      	cpsie	i
 800ea32:	60bb      	str	r3, [r7, #8]
}
 800ea34:	bf00      	nop
 800ea36:	e7fe      	b.n	800ea36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea3c:	1e5a      	subs	r2, r3, #1
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d044      	beq.n	800ead8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d140      	bne.n	800ead8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe f844 	bl	800cae8 <uxListRemove>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d115      	bne.n	800ea92 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6a:	491f      	ldr	r1, [pc, #124]	; (800eae8 <xTaskPriorityDisinherit+0x10c>)
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	440b      	add	r3, r1
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xTaskPriorityDisinherit+0xb6>
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea80:	2201      	movs	r2, #1
 800ea82:	fa02 f303 	lsl.w	r3, r2, r3
 800ea86:	43da      	mvns	r2, r3
 800ea88:	4b18      	ldr	r3, [pc, #96]	; (800eaec <xTaskPriorityDisinherit+0x110>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	4a17      	ldr	r2, [pc, #92]	; (800eaec <xTaskPriorityDisinherit+0x110>)
 800ea90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9e:	f1c3 0207 	rsb	r2, r3, #7
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaaa:	2201      	movs	r2, #1
 800eaac:	409a      	lsls	r2, r3
 800eaae:	4b0f      	ldr	r3, [pc, #60]	; (800eaec <xTaskPriorityDisinherit+0x110>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4313      	orrs	r3, r2
 800eab4:	4a0d      	ldr	r2, [pc, #52]	; (800eaec <xTaskPriorityDisinherit+0x110>)
 800eab6:	6013      	str	r3, [r2, #0]
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabc:	4613      	mov	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4a08      	ldr	r2, [pc, #32]	; (800eae8 <xTaskPriorityDisinherit+0x10c>)
 800eac6:	441a      	add	r2, r3
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3304      	adds	r3, #4
 800eacc:	4619      	mov	r1, r3
 800eace:	4610      	mov	r0, r2
 800ead0:	f7fd ffad 	bl	800ca2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ead4:	2301      	movs	r3, #1
 800ead6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ead8:	697b      	ldr	r3, [r7, #20]
	}
 800eada:	4618      	mov	r0, r3
 800eadc:	3718      	adds	r7, #24
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20000d74 	.word	0x20000d74
 800eae8:	20000d78 	.word	0x20000d78
 800eaec:	20000e7c 	.word	0x20000e7c

0800eaf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eafe:	2301      	movs	r3, #1
 800eb00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 8087 	beq.w	800ec18 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10c      	bne.n	800eb2c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	b672      	cpsid	i
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	b662      	cpsie	i
 800eb26:	60fb      	str	r3, [r7, #12]
}
 800eb28:	bf00      	nop
 800eb2a:	e7fe      	b.n	800eb2a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d902      	bls.n	800eb3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	61fb      	str	r3, [r7, #28]
 800eb3a:	e002      	b.n	800eb42 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	69fa      	ldr	r2, [r7, #28]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d065      	beq.n	800ec18 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb50:	697a      	ldr	r2, [r7, #20]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d160      	bne.n	800ec18 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eb56:	4b32      	ldr	r3, [pc, #200]	; (800ec20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	69ba      	ldr	r2, [r7, #24]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d10c      	bne.n	800eb7a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800eb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb64:	b672      	cpsid	i
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	b662      	cpsie	i
 800eb74:	60bb      	str	r3, [r7, #8]
}
 800eb76:	bf00      	nop
 800eb78:	e7fe      	b.n	800eb78 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	db04      	blt.n	800eb98 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	f1c3 0207 	rsb	r2, r3, #7
 800eb94:	69bb      	ldr	r3, [r7, #24]
 800eb96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	6959      	ldr	r1, [r3, #20]
 800eb9c:	693a      	ldr	r2, [r7, #16]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	4413      	add	r3, r2
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4a1f      	ldr	r2, [pc, #124]	; (800ec24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eba8:	4413      	add	r3, r2
 800ebaa:	4299      	cmp	r1, r3
 800ebac:	d134      	bne.n	800ec18 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fd ff98 	bl	800cae8 <uxListRemove>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d115      	bne.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc2:	4918      	ldr	r1, [pc, #96]	; (800ec24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	4413      	add	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	440b      	add	r3, r1
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10a      	bne.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd8:	2201      	movs	r2, #1
 800ebda:	fa02 f303 	lsl.w	r3, r2, r3
 800ebde:	43da      	mvns	r2, r3
 800ebe0:	4b11      	ldr	r3, [pc, #68]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	4a10      	ldr	r2, [pc, #64]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ebe8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	2201      	movs	r2, #1
 800ebf0:	409a      	lsls	r2, r3
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	4a0b      	ldr	r2, [pc, #44]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec00:	4613      	mov	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4a06      	ldr	r2, [pc, #24]	; (800ec24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ec0a:	441a      	add	r2, r3
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4619      	mov	r1, r3
 800ec12:	4610      	mov	r0, r2
 800ec14:	f7fd ff0b 	bl	800ca2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec18:	bf00      	nop
 800ec1a:	3720      	adds	r7, #32
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000d74 	.word	0x20000d74
 800ec24:	20000d78 	.word	0x20000d78
 800ec28:	20000e7c 	.word	0x20000e7c

0800ec2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d004      	beq.n	800ec42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ec38:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec3e:	3201      	adds	r2, #1
 800ec40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ec42:	4b03      	ldr	r3, [pc, #12]	; (800ec50 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec44:	681b      	ldr	r3, [r3, #0]
	}
 800ec46:	4618      	mov	r0, r3
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	20000d74 	.word	0x20000d74

0800ec54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec5e:	4b29      	ldr	r3, [pc, #164]	; (800ed04 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec64:	4b28      	ldr	r3, [pc, #160]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fd ff3c 	bl	800cae8 <uxListRemove>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d10b      	bne.n	800ec8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ec76:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec82:	43da      	mvns	r2, r3
 800ec84:	4b21      	ldr	r3, [pc, #132]	; (800ed0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4013      	ands	r3, r2
 800ec8a:	4a20      	ldr	r2, [pc, #128]	; (800ed0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d10a      	bne.n	800ecac <prvAddCurrentTaskToDelayedList+0x58>
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d007      	beq.n	800ecac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec9c:	4b1a      	ldr	r3, [pc, #104]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4619      	mov	r1, r3
 800eca4:	481a      	ldr	r0, [pc, #104]	; (800ed10 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eca6:	f7fd fec2 	bl	800ca2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ecaa:	e026      	b.n	800ecfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ecb4:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d209      	bcs.n	800ecd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecc4:	4b13      	ldr	r3, [pc, #76]	; (800ed14 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	4b0f      	ldr	r3, [pc, #60]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7fd fed0 	bl	800ca76 <vListInsert>
}
 800ecd6:	e010      	b.n	800ecfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecd8:	4b0f      	ldr	r3, [pc, #60]	; (800ed18 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	4b0a      	ldr	r3, [pc, #40]	; (800ed08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3304      	adds	r3, #4
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fd fec6 	bl	800ca76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ecea:	4b0c      	ldr	r3, [pc, #48]	; (800ed1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d202      	bcs.n	800ecfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ecf4:	4a09      	ldr	r2, [pc, #36]	; (800ed1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	6013      	str	r3, [r2, #0]
}
 800ecfa:	bf00      	nop
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	20000e78 	.word	0x20000e78
 800ed08:	20000d74 	.word	0x20000d74
 800ed0c:	20000e7c 	.word	0x20000e7c
 800ed10:	20000e60 	.word	0x20000e60
 800ed14:	20000e30 	.word	0x20000e30
 800ed18:	20000e2c 	.word	0x20000e2c
 800ed1c:	20000e94 	.word	0x20000e94

0800ed20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3b04      	subs	r3, #4
 800ed30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ed38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3b04      	subs	r3, #4
 800ed3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	f023 0201 	bic.w	r2, r3, #1
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed50:	4a0c      	ldr	r2, [pc, #48]	; (800ed84 <pxPortInitialiseStack+0x64>)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3b14      	subs	r3, #20
 800ed5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3b04      	subs	r3, #4
 800ed66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f06f 0202 	mvn.w	r2, #2
 800ed6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3b20      	subs	r3, #32
 800ed74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed76:	68fb      	ldr	r3, [r7, #12]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3714      	adds	r7, #20
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	0800ed89 	.word	0x0800ed89

0800ed88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed92:	4b14      	ldr	r3, [pc, #80]	; (800ede4 <prvTaskExitError+0x5c>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9a:	d00c      	beq.n	800edb6 <prvTaskExitError+0x2e>
	__asm volatile
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	b672      	cpsid	i
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	b662      	cpsie	i
 800edb0:	60fb      	str	r3, [r7, #12]
}
 800edb2:	bf00      	nop
 800edb4:	e7fe      	b.n	800edb4 <prvTaskExitError+0x2c>
	__asm volatile
 800edb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edba:	b672      	cpsid	i
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	b662      	cpsie	i
 800edca:	60bb      	str	r3, [r7, #8]
}
 800edcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800edce:	bf00      	nop
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0fc      	beq.n	800edd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800edd6:	bf00      	nop
 800edd8:	bf00      	nop
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr
 800ede4:	200000d4 	.word	0x200000d4
	...

0800edf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800edf0:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <pxCurrentTCBConst2>)
 800edf2:	6819      	ldr	r1, [r3, #0]
 800edf4:	6808      	ldr	r0, [r1, #0]
 800edf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfa:	f380 8809 	msr	PSP, r0
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f04f 0000 	mov.w	r0, #0
 800ee06:	f380 8811 	msr	BASEPRI, r0
 800ee0a:	4770      	bx	lr
 800ee0c:	f3af 8000 	nop.w

0800ee10 <pxCurrentTCBConst2>:
 800ee10:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop

0800ee18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee18:	4808      	ldr	r0, [pc, #32]	; (800ee3c <prvPortStartFirstTask+0x24>)
 800ee1a:	6800      	ldr	r0, [r0, #0]
 800ee1c:	6800      	ldr	r0, [r0, #0]
 800ee1e:	f380 8808 	msr	MSP, r0
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	f380 8814 	msr	CONTROL, r0
 800ee2a:	b662      	cpsie	i
 800ee2c:	b661      	cpsie	f
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	df00      	svc	0
 800ee38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee3a:	bf00      	nop
 800ee3c:	e000ed08 	.word	0xe000ed08

0800ee40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee46:	4b37      	ldr	r3, [pc, #220]	; (800ef24 <xPortStartScheduler+0xe4>)
 800ee48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	22ff      	movs	r2, #255	; 0xff
 800ee56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ee68:	b2da      	uxtb	r2, r3
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <xPortStartScheduler+0xe8>)
 800ee6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee6e:	4b2f      	ldr	r3, [pc, #188]	; (800ef2c <xPortStartScheduler+0xec>)
 800ee70:	2207      	movs	r2, #7
 800ee72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee74:	e009      	b.n	800ee8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ee76:	4b2d      	ldr	r3, [pc, #180]	; (800ef2c <xPortStartScheduler+0xec>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	4a2b      	ldr	r2, [pc, #172]	; (800ef2c <xPortStartScheduler+0xec>)
 800ee7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee8a:	78fb      	ldrb	r3, [r7, #3]
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee92:	2b80      	cmp	r3, #128	; 0x80
 800ee94:	d0ef      	beq.n	800ee76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee96:	4b25      	ldr	r3, [pc, #148]	; (800ef2c <xPortStartScheduler+0xec>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f1c3 0307 	rsb	r3, r3, #7
 800ee9e:	2b04      	cmp	r3, #4
 800eea0:	d00c      	beq.n	800eebc <xPortStartScheduler+0x7c>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea6:	b672      	cpsid	i
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	b662      	cpsie	i
 800eeb6:	60bb      	str	r3, [r7, #8]
}
 800eeb8:	bf00      	nop
 800eeba:	e7fe      	b.n	800eeba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eebc:	4b1b      	ldr	r3, [pc, #108]	; (800ef2c <xPortStartScheduler+0xec>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	021b      	lsls	r3, r3, #8
 800eec2:	4a1a      	ldr	r2, [pc, #104]	; (800ef2c <xPortStartScheduler+0xec>)
 800eec4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eec6:	4b19      	ldr	r3, [pc, #100]	; (800ef2c <xPortStartScheduler+0xec>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eece:	4a17      	ldr	r2, [pc, #92]	; (800ef2c <xPortStartScheduler+0xec>)
 800eed0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eeda:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <xPortStartScheduler+0xf0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a14      	ldr	r2, [pc, #80]	; (800ef30 <xPortStartScheduler+0xf0>)
 800eee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eee4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <xPortStartScheduler+0xf0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a11      	ldr	r2, [pc, #68]	; (800ef30 <xPortStartScheduler+0xf0>)
 800eeec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eef0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eef2:	f000 f8dd 	bl	800f0b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eef6:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <xPortStartScheduler+0xf4>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eefc:	f000 f8fc 	bl	800f0f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef00:	4b0d      	ldr	r3, [pc, #52]	; (800ef38 <xPortStartScheduler+0xf8>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <xPortStartScheduler+0xf8>)
 800ef06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ef0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef0c:	f7ff ff84 	bl	800ee18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef10:	f7ff fa74 	bl	800e3fc <vTaskSwitchContext>
	prvTaskExitError();
 800ef14:	f7ff ff38 	bl	800ed88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3710      	adds	r7, #16
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	e000e400 	.word	0xe000e400
 800ef28:	20000ea0 	.word	0x20000ea0
 800ef2c:	20000ea4 	.word	0x20000ea4
 800ef30:	e000ed20 	.word	0xe000ed20
 800ef34:	200000d4 	.word	0x200000d4
 800ef38:	e000ef34 	.word	0xe000ef34

0800ef3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
	__asm volatile
 800ef42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef46:	b672      	cpsid	i
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	b662      	cpsie	i
 800ef56:	607b      	str	r3, [r7, #4]
}
 800ef58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef5a:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <vPortEnterCritical+0x60>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	4a0e      	ldr	r2, [pc, #56]	; (800ef9c <vPortEnterCritical+0x60>)
 800ef62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef64:	4b0d      	ldr	r3, [pc, #52]	; (800ef9c <vPortEnterCritical+0x60>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d111      	bne.n	800ef90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef6c:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <vPortEnterCritical+0x64>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <vPortEnterCritical+0x54>
	__asm volatile
 800ef76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7a:	b672      	cpsid	i
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	b662      	cpsie	i
 800ef8a:	603b      	str	r3, [r7, #0]
}
 800ef8c:	bf00      	nop
 800ef8e:	e7fe      	b.n	800ef8e <vPortEnterCritical+0x52>
	}
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	200000d4 	.word	0x200000d4
 800efa0:	e000ed04 	.word	0xe000ed04

0800efa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800efaa:	4b13      	ldr	r3, [pc, #76]	; (800eff8 <vPortExitCritical+0x54>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10c      	bne.n	800efcc <vPortExitCritical+0x28>
	__asm volatile
 800efb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb6:	b672      	cpsid	i
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	b662      	cpsie	i
 800efc6:	607b      	str	r3, [r7, #4]
}
 800efc8:	bf00      	nop
 800efca:	e7fe      	b.n	800efca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800efcc:	4b0a      	ldr	r3, [pc, #40]	; (800eff8 <vPortExitCritical+0x54>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	4a09      	ldr	r2, [pc, #36]	; (800eff8 <vPortExitCritical+0x54>)
 800efd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efd6:	4b08      	ldr	r3, [pc, #32]	; (800eff8 <vPortExitCritical+0x54>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d105      	bne.n	800efea <vPortExitCritical+0x46>
 800efde:	2300      	movs	r3, #0
 800efe0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	f383 8811 	msr	BASEPRI, r3
}
 800efe8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800efea:	bf00      	nop
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	200000d4 	.word	0x200000d4
 800effc:	00000000 	.word	0x00000000

0800f000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f000:	f3ef 8009 	mrs	r0, PSP
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <pxCurrentTCBConst>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	f01e 0f10 	tst.w	lr, #16
 800f010:	bf08      	it	eq
 800f012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01a:	6010      	str	r0, [r2, #0]
 800f01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f024:	b672      	cpsid	i
 800f026:	f380 8811 	msr	BASEPRI, r0
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	b662      	cpsie	i
 800f034:	f7ff f9e2 	bl	800e3fc <vTaskSwitchContext>
 800f038:	f04f 0000 	mov.w	r0, #0
 800f03c:	f380 8811 	msr	BASEPRI, r0
 800f040:	bc09      	pop	{r0, r3}
 800f042:	6819      	ldr	r1, [r3, #0]
 800f044:	6808      	ldr	r0, [r1, #0]
 800f046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04a:	f01e 0f10 	tst.w	lr, #16
 800f04e:	bf08      	it	eq
 800f050:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f054:	f380 8809 	msr	PSP, r0
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop

0800f060 <pxCurrentTCBConst>:
 800f060:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop

0800f068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	b672      	cpsid	i
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	b662      	cpsie	i
 800f082:	607b      	str	r3, [r7, #4]
}
 800f084:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f086:	f7ff f8ff 	bl	800e288 <xTaskIncrementTick>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f090:	4b06      	ldr	r3, [pc, #24]	; (800f0ac <SysTick_Handler+0x44>)
 800f092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	2300      	movs	r3, #0
 800f09a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	f383 8811 	msr	BASEPRI, r3
}
 800f0a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	e000ed04 	.word	0xe000ed04

0800f0b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f0b4:	4b0b      	ldr	r3, [pc, #44]	; (800f0e4 <vPortSetupTimerInterrupt+0x34>)
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f0ba:	4b0b      	ldr	r3, [pc, #44]	; (800f0e8 <vPortSetupTimerInterrupt+0x38>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	; (800f0ec <vPortSetupTimerInterrupt+0x3c>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a0a      	ldr	r2, [pc, #40]	; (800f0f0 <vPortSetupTimerInterrupt+0x40>)
 800f0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ca:	099b      	lsrs	r3, r3, #6
 800f0cc:	4a09      	ldr	r2, [pc, #36]	; (800f0f4 <vPortSetupTimerInterrupt+0x44>)
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f0d2:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <vPortSetupTimerInterrupt+0x34>)
 800f0d4:	2207      	movs	r2, #7
 800f0d6:	601a      	str	r2, [r3, #0]
}
 800f0d8:	bf00      	nop
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	e000e010 	.word	0xe000e010
 800f0e8:	e000e018 	.word	0xe000e018
 800f0ec:	200000c8 	.word	0x200000c8
 800f0f0:	10624dd3 	.word	0x10624dd3
 800f0f4:	e000e014 	.word	0xe000e014

0800f0f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f108 <vPortEnableVFP+0x10>
 800f0fc:	6801      	ldr	r1, [r0, #0]
 800f0fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f102:	6001      	str	r1, [r0, #0]
 800f104:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f106:	bf00      	nop
 800f108:	e000ed88 	.word	0xe000ed88

0800f10c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f112:	f3ef 8305 	mrs	r3, IPSR
 800f116:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b0f      	cmp	r3, #15
 800f11c:	d916      	bls.n	800f14c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f11e:	4a19      	ldr	r2, [pc, #100]	; (800f184 <vPortValidateInterruptPriority+0x78>)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4413      	add	r3, r2
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f128:	4b17      	ldr	r3, [pc, #92]	; (800f188 <vPortValidateInterruptPriority+0x7c>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	7afa      	ldrb	r2, [r7, #11]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d20c      	bcs.n	800f14c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	b672      	cpsid	i
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	b662      	cpsie	i
 800f146:	607b      	str	r3, [r7, #4]
}
 800f148:	bf00      	nop
 800f14a:	e7fe      	b.n	800f14a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f14c:	4b0f      	ldr	r3, [pc, #60]	; (800f18c <vPortValidateInterruptPriority+0x80>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f154:	4b0e      	ldr	r3, [pc, #56]	; (800f190 <vPortValidateInterruptPriority+0x84>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d90c      	bls.n	800f176 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f160:	b672      	cpsid	i
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	b662      	cpsie	i
 800f170:	603b      	str	r3, [r7, #0]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <vPortValidateInterruptPriority+0x68>
	}
 800f176:	bf00      	nop
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	e000e3f0 	.word	0xe000e3f0
 800f188:	20000ea0 	.word	0x20000ea0
 800f18c:	e000ed0c 	.word	0xe000ed0c
 800f190:	20000ea4 	.word	0x20000ea4

0800f194 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b08a      	sub	sp, #40	; 0x28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f19c:	2300      	movs	r3, #0
 800f19e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f1a0:	f7fe ffb6 	bl	800e110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f1a4:	4b5b      	ldr	r3, [pc, #364]	; (800f314 <pvPortMalloc+0x180>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d101      	bne.n	800f1b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f1ac:	f000 f91a 	bl	800f3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1b0:	4b59      	ldr	r3, [pc, #356]	; (800f318 <pvPortMalloc+0x184>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4013      	ands	r3, r2
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f040 8092 	bne.w	800f2e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d01f      	beq.n	800f204 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f1c4:	2208      	movs	r2, #8
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f003 0307 	and.w	r3, r3, #7
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d016      	beq.n	800f204 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f023 0307 	bic.w	r3, r3, #7
 800f1dc:	3308      	adds	r3, #8
 800f1de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f003 0307 	and.w	r3, r3, #7
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00c      	beq.n	800f204 <pvPortMalloc+0x70>
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	b672      	cpsid	i
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	b662      	cpsie	i
 800f1fe:	617b      	str	r3, [r7, #20]
}
 800f200:	bf00      	nop
 800f202:	e7fe      	b.n	800f202 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d06b      	beq.n	800f2e2 <pvPortMalloc+0x14e>
 800f20a:	4b44      	ldr	r3, [pc, #272]	; (800f31c <pvPortMalloc+0x188>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	429a      	cmp	r2, r3
 800f212:	d866      	bhi.n	800f2e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f214:	4b42      	ldr	r3, [pc, #264]	; (800f320 <pvPortMalloc+0x18c>)
 800f216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f218:	4b41      	ldr	r3, [pc, #260]	; (800f320 <pvPortMalloc+0x18c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f21e:	e004      	b.n	800f22a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	429a      	cmp	r2, r3
 800f232:	d903      	bls.n	800f23c <pvPortMalloc+0xa8>
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1f1      	bne.n	800f220 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f23c:	4b35      	ldr	r3, [pc, #212]	; (800f314 <pvPortMalloc+0x180>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f242:	429a      	cmp	r2, r3
 800f244:	d04d      	beq.n	800f2e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2208      	movs	r2, #8
 800f24c:	4413      	add	r3, r2
 800f24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	685a      	ldr	r2, [r3, #4]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	1ad2      	subs	r2, r2, r3
 800f260:	2308      	movs	r3, #8
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	429a      	cmp	r2, r3
 800f266:	d921      	bls.n	800f2ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4413      	add	r3, r2
 800f26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	f003 0307 	and.w	r3, r3, #7
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00c      	beq.n	800f294 <pvPortMalloc+0x100>
	__asm volatile
 800f27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27e:	b672      	cpsid	i
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	b662      	cpsie	i
 800f28e:	613b      	str	r3, [r7, #16]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	1ad2      	subs	r2, r2, r3
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2a6:	69b8      	ldr	r0, [r7, #24]
 800f2a8:	f000 f8fe 	bl	800f4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2ac:	4b1b      	ldr	r3, [pc, #108]	; (800f31c <pvPortMalloc+0x188>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	4a19      	ldr	r2, [pc, #100]	; (800f31c <pvPortMalloc+0x188>)
 800f2b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2ba:	4b18      	ldr	r3, [pc, #96]	; (800f31c <pvPortMalloc+0x188>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	4b19      	ldr	r3, [pc, #100]	; (800f324 <pvPortMalloc+0x190>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d203      	bcs.n	800f2ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2c6:	4b15      	ldr	r3, [pc, #84]	; (800f31c <pvPortMalloc+0x188>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a16      	ldr	r2, [pc, #88]	; (800f324 <pvPortMalloc+0x190>)
 800f2cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	4b11      	ldr	r3, [pc, #68]	; (800f318 <pvPortMalloc+0x184>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	2200      	movs	r2, #0
 800f2e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2e2:	f7fe ff23 	bl	800e12c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f003 0307 	and.w	r3, r3, #7
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00c      	beq.n	800f30a <pvPortMalloc+0x176>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	b672      	cpsid	i
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	b662      	cpsie	i
 800f304:	60fb      	str	r3, [r7, #12]
}
 800f306:	bf00      	nop
 800f308:	e7fe      	b.n	800f308 <pvPortMalloc+0x174>
	return pvReturn;
 800f30a:	69fb      	ldr	r3, [r7, #28]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3728      	adds	r7, #40	; 0x28
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	20004ab0 	.word	0x20004ab0
 800f318:	20004abc 	.word	0x20004abc
 800f31c:	20004ab4 	.word	0x20004ab4
 800f320:	20004aa8 	.word	0x20004aa8
 800f324:	20004ab8 	.word	0x20004ab8

0800f328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d04c      	beq.n	800f3d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f33a:	2308      	movs	r3, #8
 800f33c:	425b      	negs	r3, r3
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	4413      	add	r3, r2
 800f342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	685a      	ldr	r2, [r3, #4]
 800f34c:	4b23      	ldr	r3, [pc, #140]	; (800f3dc <vPortFree+0xb4>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4013      	ands	r3, r2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10c      	bne.n	800f370 <vPortFree+0x48>
	__asm volatile
 800f356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35a:	b672      	cpsid	i
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	b662      	cpsie	i
 800f36a:	60fb      	str	r3, [r7, #12]
}
 800f36c:	bf00      	nop
 800f36e:	e7fe      	b.n	800f36e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00c      	beq.n	800f392 <vPortFree+0x6a>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	b672      	cpsid	i
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	b662      	cpsie	i
 800f38c:	60bb      	str	r3, [r7, #8]
}
 800f38e:	bf00      	nop
 800f390:	e7fe      	b.n	800f390 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	4b11      	ldr	r3, [pc, #68]	; (800f3dc <vPortFree+0xb4>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4013      	ands	r3, r2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d019      	beq.n	800f3d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d115      	bne.n	800f3d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	4b0b      	ldr	r3, [pc, #44]	; (800f3dc <vPortFree+0xb4>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	43db      	mvns	r3, r3
 800f3b2:	401a      	ands	r2, r3
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3b8:	f7fe feaa 	bl	800e110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	685a      	ldr	r2, [r3, #4]
 800f3c0:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <vPortFree+0xb8>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	4a06      	ldr	r2, [pc, #24]	; (800f3e0 <vPortFree+0xb8>)
 800f3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3ca:	6938      	ldr	r0, [r7, #16]
 800f3cc:	f000 f86c 	bl	800f4a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f3d0:	f7fe feac 	bl	800e12c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3d4:	bf00      	nop
 800f3d6:	3718      	adds	r7, #24
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	20004abc 	.word	0x20004abc
 800f3e0:	20004ab4 	.word	0x20004ab4

0800f3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3f0:	4b27      	ldr	r3, [pc, #156]	; (800f490 <prvHeapInit+0xac>)
 800f3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f003 0307 	and.w	r3, r3, #7
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00c      	beq.n	800f418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	3307      	adds	r3, #7
 800f402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f023 0307 	bic.w	r3, r3, #7
 800f40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	4a1f      	ldr	r2, [pc, #124]	; (800f490 <prvHeapInit+0xac>)
 800f414:	4413      	add	r3, r2
 800f416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f41c:	4a1d      	ldr	r2, [pc, #116]	; (800f494 <prvHeapInit+0xb0>)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f422:	4b1c      	ldr	r3, [pc, #112]	; (800f494 <prvHeapInit+0xb0>)
 800f424:	2200      	movs	r2, #0
 800f426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	4413      	add	r3, r2
 800f42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f430:	2208      	movs	r2, #8
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f023 0307 	bic.w	r3, r3, #7
 800f43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	4a15      	ldr	r2, [pc, #84]	; (800f498 <prvHeapInit+0xb4>)
 800f444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f446:	4b14      	ldr	r3, [pc, #80]	; (800f498 <prvHeapInit+0xb4>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2200      	movs	r2, #0
 800f44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f44e:	4b12      	ldr	r3, [pc, #72]	; (800f498 <prvHeapInit+0xb4>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	1ad2      	subs	r2, r2, r3
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f464:	4b0c      	ldr	r3, [pc, #48]	; (800f498 <prvHeapInit+0xb4>)
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4a0a      	ldr	r2, [pc, #40]	; (800f49c <prvHeapInit+0xb8>)
 800f472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <prvHeapInit+0xbc>)
 800f47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f47c:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <prvHeapInit+0xc0>)
 800f47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f482:	601a      	str	r2, [r3, #0]
}
 800f484:	bf00      	nop
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	20000ea8 	.word	0x20000ea8
 800f494:	20004aa8 	.word	0x20004aa8
 800f498:	20004ab0 	.word	0x20004ab0
 800f49c:	20004ab8 	.word	0x20004ab8
 800f4a0:	20004ab4 	.word	0x20004ab4
 800f4a4:	20004abc 	.word	0x20004abc

0800f4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4b0:	4b28      	ldr	r3, [pc, #160]	; (800f554 <prvInsertBlockIntoFreeList+0xac>)
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	e002      	b.n	800f4bc <prvInsertBlockIntoFreeList+0x14>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d8f7      	bhi.n	800f4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	68ba      	ldr	r2, [r7, #8]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d108      	bne.n	800f4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	441a      	add	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	441a      	add	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d118      	bne.n	800f530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	4b15      	ldr	r3, [pc, #84]	; (800f558 <prvInsertBlockIntoFreeList+0xb0>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	429a      	cmp	r2, r3
 800f508:	d00d      	beq.n	800f526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	441a      	add	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	e008      	b.n	800f538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f526:	4b0c      	ldr	r3, [pc, #48]	; (800f558 <prvInsertBlockIntoFreeList+0xb0>)
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	e003      	b.n	800f538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d002      	beq.n	800f546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	20004aa8 	.word	0x20004aa8
 800f558:	20004ab0 	.word	0x20004ab0

0800f55c <__errno>:
 800f55c:	4b01      	ldr	r3, [pc, #4]	; (800f564 <__errno+0x8>)
 800f55e:	6818      	ldr	r0, [r3, #0]
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	200000d8 	.word	0x200000d8

0800f568 <__libc_init_array>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	4d0d      	ldr	r5, [pc, #52]	; (800f5a0 <__libc_init_array+0x38>)
 800f56c:	4c0d      	ldr	r4, [pc, #52]	; (800f5a4 <__libc_init_array+0x3c>)
 800f56e:	1b64      	subs	r4, r4, r5
 800f570:	10a4      	asrs	r4, r4, #2
 800f572:	2600      	movs	r6, #0
 800f574:	42a6      	cmp	r6, r4
 800f576:	d109      	bne.n	800f58c <__libc_init_array+0x24>
 800f578:	4d0b      	ldr	r5, [pc, #44]	; (800f5a8 <__libc_init_array+0x40>)
 800f57a:	4c0c      	ldr	r4, [pc, #48]	; (800f5ac <__libc_init_array+0x44>)
 800f57c:	f000 fcf8 	bl	800ff70 <_init>
 800f580:	1b64      	subs	r4, r4, r5
 800f582:	10a4      	asrs	r4, r4, #2
 800f584:	2600      	movs	r6, #0
 800f586:	42a6      	cmp	r6, r4
 800f588:	d105      	bne.n	800f596 <__libc_init_array+0x2e>
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f590:	4798      	blx	r3
 800f592:	3601      	adds	r6, #1
 800f594:	e7ee      	b.n	800f574 <__libc_init_array+0xc>
 800f596:	f855 3b04 	ldr.w	r3, [r5], #4
 800f59a:	4798      	blx	r3
 800f59c:	3601      	adds	r6, #1
 800f59e:	e7f2      	b.n	800f586 <__libc_init_array+0x1e>
 800f5a0:	08071acc 	.word	0x08071acc
 800f5a4:	08071acc 	.word	0x08071acc
 800f5a8:	08071acc 	.word	0x08071acc
 800f5ac:	08071ad0 	.word	0x08071ad0

0800f5b0 <__retarget_lock_acquire_recursive>:
 800f5b0:	4770      	bx	lr

0800f5b2 <__retarget_lock_release_recursive>:
 800f5b2:	4770      	bx	lr

0800f5b4 <memcpy>:
 800f5b4:	440a      	add	r2, r1
 800f5b6:	4291      	cmp	r1, r2
 800f5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5bc:	d100      	bne.n	800f5c0 <memcpy+0xc>
 800f5be:	4770      	bx	lr
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5ca:	4291      	cmp	r1, r2
 800f5cc:	d1f9      	bne.n	800f5c2 <memcpy+0xe>
 800f5ce:	bd10      	pop	{r4, pc}

0800f5d0 <memset>:
 800f5d0:	4402      	add	r2, r0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d100      	bne.n	800f5da <memset+0xa>
 800f5d8:	4770      	bx	lr
 800f5da:	f803 1b01 	strb.w	r1, [r3], #1
 800f5de:	e7f9      	b.n	800f5d4 <memset+0x4>

0800f5e0 <sbrk_aligned>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	4e0e      	ldr	r6, [pc, #56]	; (800f61c <sbrk_aligned+0x3c>)
 800f5e4:	460c      	mov	r4, r1
 800f5e6:	6831      	ldr	r1, [r6, #0]
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	b911      	cbnz	r1, 800f5f2 <sbrk_aligned+0x12>
 800f5ec:	f000 f8f6 	bl	800f7dc <_sbrk_r>
 800f5f0:	6030      	str	r0, [r6, #0]
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f000 f8f1 	bl	800f7dc <_sbrk_r>
 800f5fa:	1c43      	adds	r3, r0, #1
 800f5fc:	d00a      	beq.n	800f614 <sbrk_aligned+0x34>
 800f5fe:	1cc4      	adds	r4, r0, #3
 800f600:	f024 0403 	bic.w	r4, r4, #3
 800f604:	42a0      	cmp	r0, r4
 800f606:	d007      	beq.n	800f618 <sbrk_aligned+0x38>
 800f608:	1a21      	subs	r1, r4, r0
 800f60a:	4628      	mov	r0, r5
 800f60c:	f000 f8e6 	bl	800f7dc <_sbrk_r>
 800f610:	3001      	adds	r0, #1
 800f612:	d101      	bne.n	800f618 <sbrk_aligned+0x38>
 800f614:	f04f 34ff 	mov.w	r4, #4294967295
 800f618:	4620      	mov	r0, r4
 800f61a:	bd70      	pop	{r4, r5, r6, pc}
 800f61c:	20004ac8 	.word	0x20004ac8

0800f620 <_malloc_r>:
 800f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f624:	1ccd      	adds	r5, r1, #3
 800f626:	f025 0503 	bic.w	r5, r5, #3
 800f62a:	3508      	adds	r5, #8
 800f62c:	2d0c      	cmp	r5, #12
 800f62e:	bf38      	it	cc
 800f630:	250c      	movcc	r5, #12
 800f632:	2d00      	cmp	r5, #0
 800f634:	4607      	mov	r7, r0
 800f636:	db01      	blt.n	800f63c <_malloc_r+0x1c>
 800f638:	42a9      	cmp	r1, r5
 800f63a:	d905      	bls.n	800f648 <_malloc_r+0x28>
 800f63c:	230c      	movs	r3, #12
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	2600      	movs	r6, #0
 800f642:	4630      	mov	r0, r6
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f648:	4e2e      	ldr	r6, [pc, #184]	; (800f704 <_malloc_r+0xe4>)
 800f64a:	f000 f8f7 	bl	800f83c <__malloc_lock>
 800f64e:	6833      	ldr	r3, [r6, #0]
 800f650:	461c      	mov	r4, r3
 800f652:	bb34      	cbnz	r4, 800f6a2 <_malloc_r+0x82>
 800f654:	4629      	mov	r1, r5
 800f656:	4638      	mov	r0, r7
 800f658:	f7ff ffc2 	bl	800f5e0 <sbrk_aligned>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	4604      	mov	r4, r0
 800f660:	d14d      	bne.n	800f6fe <_malloc_r+0xde>
 800f662:	6834      	ldr	r4, [r6, #0]
 800f664:	4626      	mov	r6, r4
 800f666:	2e00      	cmp	r6, #0
 800f668:	d140      	bne.n	800f6ec <_malloc_r+0xcc>
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	4631      	mov	r1, r6
 800f66e:	4638      	mov	r0, r7
 800f670:	eb04 0803 	add.w	r8, r4, r3
 800f674:	f000 f8b2 	bl	800f7dc <_sbrk_r>
 800f678:	4580      	cmp	r8, r0
 800f67a:	d13a      	bne.n	800f6f2 <_malloc_r+0xd2>
 800f67c:	6821      	ldr	r1, [r4, #0]
 800f67e:	3503      	adds	r5, #3
 800f680:	1a6d      	subs	r5, r5, r1
 800f682:	f025 0503 	bic.w	r5, r5, #3
 800f686:	3508      	adds	r5, #8
 800f688:	2d0c      	cmp	r5, #12
 800f68a:	bf38      	it	cc
 800f68c:	250c      	movcc	r5, #12
 800f68e:	4629      	mov	r1, r5
 800f690:	4638      	mov	r0, r7
 800f692:	f7ff ffa5 	bl	800f5e0 <sbrk_aligned>
 800f696:	3001      	adds	r0, #1
 800f698:	d02b      	beq.n	800f6f2 <_malloc_r+0xd2>
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	442b      	add	r3, r5
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	e00e      	b.n	800f6c0 <_malloc_r+0xa0>
 800f6a2:	6822      	ldr	r2, [r4, #0]
 800f6a4:	1b52      	subs	r2, r2, r5
 800f6a6:	d41e      	bmi.n	800f6e6 <_malloc_r+0xc6>
 800f6a8:	2a0b      	cmp	r2, #11
 800f6aa:	d916      	bls.n	800f6da <_malloc_r+0xba>
 800f6ac:	1961      	adds	r1, r4, r5
 800f6ae:	42a3      	cmp	r3, r4
 800f6b0:	6025      	str	r5, [r4, #0]
 800f6b2:	bf18      	it	ne
 800f6b4:	6059      	strne	r1, [r3, #4]
 800f6b6:	6863      	ldr	r3, [r4, #4]
 800f6b8:	bf08      	it	eq
 800f6ba:	6031      	streq	r1, [r6, #0]
 800f6bc:	5162      	str	r2, [r4, r5]
 800f6be:	604b      	str	r3, [r1, #4]
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	f104 060b 	add.w	r6, r4, #11
 800f6c6:	f000 f8bf 	bl	800f848 <__malloc_unlock>
 800f6ca:	f026 0607 	bic.w	r6, r6, #7
 800f6ce:	1d23      	adds	r3, r4, #4
 800f6d0:	1af2      	subs	r2, r6, r3
 800f6d2:	d0b6      	beq.n	800f642 <_malloc_r+0x22>
 800f6d4:	1b9b      	subs	r3, r3, r6
 800f6d6:	50a3      	str	r3, [r4, r2]
 800f6d8:	e7b3      	b.n	800f642 <_malloc_r+0x22>
 800f6da:	6862      	ldr	r2, [r4, #4]
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	bf0c      	ite	eq
 800f6e0:	6032      	streq	r2, [r6, #0]
 800f6e2:	605a      	strne	r2, [r3, #4]
 800f6e4:	e7ec      	b.n	800f6c0 <_malloc_r+0xa0>
 800f6e6:	4623      	mov	r3, r4
 800f6e8:	6864      	ldr	r4, [r4, #4]
 800f6ea:	e7b2      	b.n	800f652 <_malloc_r+0x32>
 800f6ec:	4634      	mov	r4, r6
 800f6ee:	6876      	ldr	r6, [r6, #4]
 800f6f0:	e7b9      	b.n	800f666 <_malloc_r+0x46>
 800f6f2:	230c      	movs	r3, #12
 800f6f4:	603b      	str	r3, [r7, #0]
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f000 f8a6 	bl	800f848 <__malloc_unlock>
 800f6fc:	e7a1      	b.n	800f642 <_malloc_r+0x22>
 800f6fe:	6025      	str	r5, [r4, #0]
 800f700:	e7de      	b.n	800f6c0 <_malloc_r+0xa0>
 800f702:	bf00      	nop
 800f704:	20004ac4 	.word	0x20004ac4

0800f708 <cleanup_glue>:
 800f708:	b538      	push	{r3, r4, r5, lr}
 800f70a:	460c      	mov	r4, r1
 800f70c:	6809      	ldr	r1, [r1, #0]
 800f70e:	4605      	mov	r5, r0
 800f710:	b109      	cbz	r1, 800f716 <cleanup_glue+0xe>
 800f712:	f7ff fff9 	bl	800f708 <cleanup_glue>
 800f716:	4621      	mov	r1, r4
 800f718:	4628      	mov	r0, r5
 800f71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f71e:	f000 b899 	b.w	800f854 <_free_r>
	...

0800f724 <_reclaim_reent>:
 800f724:	4b2c      	ldr	r3, [pc, #176]	; (800f7d8 <_reclaim_reent+0xb4>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4283      	cmp	r3, r0
 800f72a:	b570      	push	{r4, r5, r6, lr}
 800f72c:	4604      	mov	r4, r0
 800f72e:	d051      	beq.n	800f7d4 <_reclaim_reent+0xb0>
 800f730:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f732:	b143      	cbz	r3, 800f746 <_reclaim_reent+0x22>
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d14a      	bne.n	800f7d0 <_reclaim_reent+0xac>
 800f73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f73c:	6819      	ldr	r1, [r3, #0]
 800f73e:	b111      	cbz	r1, 800f746 <_reclaim_reent+0x22>
 800f740:	4620      	mov	r0, r4
 800f742:	f000 f887 	bl	800f854 <_free_r>
 800f746:	6961      	ldr	r1, [r4, #20]
 800f748:	b111      	cbz	r1, 800f750 <_reclaim_reent+0x2c>
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 f882 	bl	800f854 <_free_r>
 800f750:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f752:	b111      	cbz	r1, 800f75a <_reclaim_reent+0x36>
 800f754:	4620      	mov	r0, r4
 800f756:	f000 f87d 	bl	800f854 <_free_r>
 800f75a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f75c:	b111      	cbz	r1, 800f764 <_reclaim_reent+0x40>
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 f878 	bl	800f854 <_free_r>
 800f764:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f766:	b111      	cbz	r1, 800f76e <_reclaim_reent+0x4a>
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 f873 	bl	800f854 <_free_r>
 800f76e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f770:	b111      	cbz	r1, 800f778 <_reclaim_reent+0x54>
 800f772:	4620      	mov	r0, r4
 800f774:	f000 f86e 	bl	800f854 <_free_r>
 800f778:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f77a:	b111      	cbz	r1, 800f782 <_reclaim_reent+0x5e>
 800f77c:	4620      	mov	r0, r4
 800f77e:	f000 f869 	bl	800f854 <_free_r>
 800f782:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f784:	b111      	cbz	r1, 800f78c <_reclaim_reent+0x68>
 800f786:	4620      	mov	r0, r4
 800f788:	f000 f864 	bl	800f854 <_free_r>
 800f78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f78e:	b111      	cbz	r1, 800f796 <_reclaim_reent+0x72>
 800f790:	4620      	mov	r0, r4
 800f792:	f000 f85f 	bl	800f854 <_free_r>
 800f796:	69a3      	ldr	r3, [r4, #24]
 800f798:	b1e3      	cbz	r3, 800f7d4 <_reclaim_reent+0xb0>
 800f79a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f79c:	4620      	mov	r0, r4
 800f79e:	4798      	blx	r3
 800f7a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f7a2:	b1b9      	cbz	r1, 800f7d4 <_reclaim_reent+0xb0>
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7aa:	f7ff bfad 	b.w	800f708 <cleanup_glue>
 800f7ae:	5949      	ldr	r1, [r1, r5]
 800f7b0:	b941      	cbnz	r1, 800f7c4 <_reclaim_reent+0xa0>
 800f7b2:	3504      	adds	r5, #4
 800f7b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7b6:	2d80      	cmp	r5, #128	; 0x80
 800f7b8:	68d9      	ldr	r1, [r3, #12]
 800f7ba:	d1f8      	bne.n	800f7ae <_reclaim_reent+0x8a>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 f849 	bl	800f854 <_free_r>
 800f7c2:	e7ba      	b.n	800f73a <_reclaim_reent+0x16>
 800f7c4:	680e      	ldr	r6, [r1, #0]
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f000 f844 	bl	800f854 <_free_r>
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	e7ef      	b.n	800f7b0 <_reclaim_reent+0x8c>
 800f7d0:	2500      	movs	r5, #0
 800f7d2:	e7ef      	b.n	800f7b4 <_reclaim_reent+0x90>
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
 800f7d6:	bf00      	nop
 800f7d8:	200000d8 	.word	0x200000d8

0800f7dc <_sbrk_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4d06      	ldr	r5, [pc, #24]	; (800f7f8 <_sbrk_r+0x1c>)
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	602b      	str	r3, [r5, #0]
 800f7e8:	f7f5 ff28 	bl	800563c <_sbrk>
 800f7ec:	1c43      	adds	r3, r0, #1
 800f7ee:	d102      	bne.n	800f7f6 <_sbrk_r+0x1a>
 800f7f0:	682b      	ldr	r3, [r5, #0]
 800f7f2:	b103      	cbz	r3, 800f7f6 <_sbrk_r+0x1a>
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	bd38      	pop	{r3, r4, r5, pc}
 800f7f8:	20004acc 	.word	0x20004acc

0800f7fc <siprintf>:
 800f7fc:	b40e      	push	{r1, r2, r3}
 800f7fe:	b500      	push	{lr}
 800f800:	b09c      	sub	sp, #112	; 0x70
 800f802:	ab1d      	add	r3, sp, #116	; 0x74
 800f804:	9002      	str	r0, [sp, #8]
 800f806:	9006      	str	r0, [sp, #24]
 800f808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f80c:	4809      	ldr	r0, [pc, #36]	; (800f834 <siprintf+0x38>)
 800f80e:	9107      	str	r1, [sp, #28]
 800f810:	9104      	str	r1, [sp, #16]
 800f812:	4909      	ldr	r1, [pc, #36]	; (800f838 <siprintf+0x3c>)
 800f814:	f853 2b04 	ldr.w	r2, [r3], #4
 800f818:	9105      	str	r1, [sp, #20]
 800f81a:	6800      	ldr	r0, [r0, #0]
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	a902      	add	r1, sp, #8
 800f820:	f000 f8c0 	bl	800f9a4 <_svfiprintf_r>
 800f824:	9b02      	ldr	r3, [sp, #8]
 800f826:	2200      	movs	r2, #0
 800f828:	701a      	strb	r2, [r3, #0]
 800f82a:	b01c      	add	sp, #112	; 0x70
 800f82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f830:	b003      	add	sp, #12
 800f832:	4770      	bx	lr
 800f834:	200000d8 	.word	0x200000d8
 800f838:	ffff0208 	.word	0xffff0208

0800f83c <__malloc_lock>:
 800f83c:	4801      	ldr	r0, [pc, #4]	; (800f844 <__malloc_lock+0x8>)
 800f83e:	f7ff beb7 	b.w	800f5b0 <__retarget_lock_acquire_recursive>
 800f842:	bf00      	nop
 800f844:	20004ac0 	.word	0x20004ac0

0800f848 <__malloc_unlock>:
 800f848:	4801      	ldr	r0, [pc, #4]	; (800f850 <__malloc_unlock+0x8>)
 800f84a:	f7ff beb2 	b.w	800f5b2 <__retarget_lock_release_recursive>
 800f84e:	bf00      	nop
 800f850:	20004ac0 	.word	0x20004ac0

0800f854 <_free_r>:
 800f854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f856:	2900      	cmp	r1, #0
 800f858:	d044      	beq.n	800f8e4 <_free_r+0x90>
 800f85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f85e:	9001      	str	r0, [sp, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	f1a1 0404 	sub.w	r4, r1, #4
 800f866:	bfb8      	it	lt
 800f868:	18e4      	addlt	r4, r4, r3
 800f86a:	f7ff ffe7 	bl	800f83c <__malloc_lock>
 800f86e:	4a1e      	ldr	r2, [pc, #120]	; (800f8e8 <_free_r+0x94>)
 800f870:	9801      	ldr	r0, [sp, #4]
 800f872:	6813      	ldr	r3, [r2, #0]
 800f874:	b933      	cbnz	r3, 800f884 <_free_r+0x30>
 800f876:	6063      	str	r3, [r4, #4]
 800f878:	6014      	str	r4, [r2, #0]
 800f87a:	b003      	add	sp, #12
 800f87c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f880:	f7ff bfe2 	b.w	800f848 <__malloc_unlock>
 800f884:	42a3      	cmp	r3, r4
 800f886:	d908      	bls.n	800f89a <_free_r+0x46>
 800f888:	6825      	ldr	r5, [r4, #0]
 800f88a:	1961      	adds	r1, r4, r5
 800f88c:	428b      	cmp	r3, r1
 800f88e:	bf01      	itttt	eq
 800f890:	6819      	ldreq	r1, [r3, #0]
 800f892:	685b      	ldreq	r3, [r3, #4]
 800f894:	1949      	addeq	r1, r1, r5
 800f896:	6021      	streq	r1, [r4, #0]
 800f898:	e7ed      	b.n	800f876 <_free_r+0x22>
 800f89a:	461a      	mov	r2, r3
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	b10b      	cbz	r3, 800f8a4 <_free_r+0x50>
 800f8a0:	42a3      	cmp	r3, r4
 800f8a2:	d9fa      	bls.n	800f89a <_free_r+0x46>
 800f8a4:	6811      	ldr	r1, [r2, #0]
 800f8a6:	1855      	adds	r5, r2, r1
 800f8a8:	42a5      	cmp	r5, r4
 800f8aa:	d10b      	bne.n	800f8c4 <_free_r+0x70>
 800f8ac:	6824      	ldr	r4, [r4, #0]
 800f8ae:	4421      	add	r1, r4
 800f8b0:	1854      	adds	r4, r2, r1
 800f8b2:	42a3      	cmp	r3, r4
 800f8b4:	6011      	str	r1, [r2, #0]
 800f8b6:	d1e0      	bne.n	800f87a <_free_r+0x26>
 800f8b8:	681c      	ldr	r4, [r3, #0]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	6053      	str	r3, [r2, #4]
 800f8be:	4421      	add	r1, r4
 800f8c0:	6011      	str	r1, [r2, #0]
 800f8c2:	e7da      	b.n	800f87a <_free_r+0x26>
 800f8c4:	d902      	bls.n	800f8cc <_free_r+0x78>
 800f8c6:	230c      	movs	r3, #12
 800f8c8:	6003      	str	r3, [r0, #0]
 800f8ca:	e7d6      	b.n	800f87a <_free_r+0x26>
 800f8cc:	6825      	ldr	r5, [r4, #0]
 800f8ce:	1961      	adds	r1, r4, r5
 800f8d0:	428b      	cmp	r3, r1
 800f8d2:	bf04      	itt	eq
 800f8d4:	6819      	ldreq	r1, [r3, #0]
 800f8d6:	685b      	ldreq	r3, [r3, #4]
 800f8d8:	6063      	str	r3, [r4, #4]
 800f8da:	bf04      	itt	eq
 800f8dc:	1949      	addeq	r1, r1, r5
 800f8de:	6021      	streq	r1, [r4, #0]
 800f8e0:	6054      	str	r4, [r2, #4]
 800f8e2:	e7ca      	b.n	800f87a <_free_r+0x26>
 800f8e4:	b003      	add	sp, #12
 800f8e6:	bd30      	pop	{r4, r5, pc}
 800f8e8:	20004ac4 	.word	0x20004ac4

0800f8ec <__ssputs_r>:
 800f8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f0:	688e      	ldr	r6, [r1, #8]
 800f8f2:	429e      	cmp	r6, r3
 800f8f4:	4682      	mov	sl, r0
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	4690      	mov	r8, r2
 800f8fa:	461f      	mov	r7, r3
 800f8fc:	d838      	bhi.n	800f970 <__ssputs_r+0x84>
 800f8fe:	898a      	ldrh	r2, [r1, #12]
 800f900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f904:	d032      	beq.n	800f96c <__ssputs_r+0x80>
 800f906:	6825      	ldr	r5, [r4, #0]
 800f908:	6909      	ldr	r1, [r1, #16]
 800f90a:	eba5 0901 	sub.w	r9, r5, r1
 800f90e:	6965      	ldr	r5, [r4, #20]
 800f910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f918:	3301      	adds	r3, #1
 800f91a:	444b      	add	r3, r9
 800f91c:	106d      	asrs	r5, r5, #1
 800f91e:	429d      	cmp	r5, r3
 800f920:	bf38      	it	cc
 800f922:	461d      	movcc	r5, r3
 800f924:	0553      	lsls	r3, r2, #21
 800f926:	d531      	bpl.n	800f98c <__ssputs_r+0xa0>
 800f928:	4629      	mov	r1, r5
 800f92a:	f7ff fe79 	bl	800f620 <_malloc_r>
 800f92e:	4606      	mov	r6, r0
 800f930:	b950      	cbnz	r0, 800f948 <__ssputs_r+0x5c>
 800f932:	230c      	movs	r3, #12
 800f934:	f8ca 3000 	str.w	r3, [sl]
 800f938:	89a3      	ldrh	r3, [r4, #12]
 800f93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f93e:	81a3      	strh	r3, [r4, #12]
 800f940:	f04f 30ff 	mov.w	r0, #4294967295
 800f944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f948:	6921      	ldr	r1, [r4, #16]
 800f94a:	464a      	mov	r2, r9
 800f94c:	f7ff fe32 	bl	800f5b4 <memcpy>
 800f950:	89a3      	ldrh	r3, [r4, #12]
 800f952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	6126      	str	r6, [r4, #16]
 800f95e:	6165      	str	r5, [r4, #20]
 800f960:	444e      	add	r6, r9
 800f962:	eba5 0509 	sub.w	r5, r5, r9
 800f966:	6026      	str	r6, [r4, #0]
 800f968:	60a5      	str	r5, [r4, #8]
 800f96a:	463e      	mov	r6, r7
 800f96c:	42be      	cmp	r6, r7
 800f96e:	d900      	bls.n	800f972 <__ssputs_r+0x86>
 800f970:	463e      	mov	r6, r7
 800f972:	6820      	ldr	r0, [r4, #0]
 800f974:	4632      	mov	r2, r6
 800f976:	4641      	mov	r1, r8
 800f978:	f000 faa8 	bl	800fecc <memmove>
 800f97c:	68a3      	ldr	r3, [r4, #8]
 800f97e:	1b9b      	subs	r3, r3, r6
 800f980:	60a3      	str	r3, [r4, #8]
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	4433      	add	r3, r6
 800f986:	6023      	str	r3, [r4, #0]
 800f988:	2000      	movs	r0, #0
 800f98a:	e7db      	b.n	800f944 <__ssputs_r+0x58>
 800f98c:	462a      	mov	r2, r5
 800f98e:	f000 fab7 	bl	800ff00 <_realloc_r>
 800f992:	4606      	mov	r6, r0
 800f994:	2800      	cmp	r0, #0
 800f996:	d1e1      	bne.n	800f95c <__ssputs_r+0x70>
 800f998:	6921      	ldr	r1, [r4, #16]
 800f99a:	4650      	mov	r0, sl
 800f99c:	f7ff ff5a 	bl	800f854 <_free_r>
 800f9a0:	e7c7      	b.n	800f932 <__ssputs_r+0x46>
	...

0800f9a4 <_svfiprintf_r>:
 800f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a8:	4698      	mov	r8, r3
 800f9aa:	898b      	ldrh	r3, [r1, #12]
 800f9ac:	061b      	lsls	r3, r3, #24
 800f9ae:	b09d      	sub	sp, #116	; 0x74
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	4614      	mov	r4, r2
 800f9b6:	d50e      	bpl.n	800f9d6 <_svfiprintf_r+0x32>
 800f9b8:	690b      	ldr	r3, [r1, #16]
 800f9ba:	b963      	cbnz	r3, 800f9d6 <_svfiprintf_r+0x32>
 800f9bc:	2140      	movs	r1, #64	; 0x40
 800f9be:	f7ff fe2f 	bl	800f620 <_malloc_r>
 800f9c2:	6028      	str	r0, [r5, #0]
 800f9c4:	6128      	str	r0, [r5, #16]
 800f9c6:	b920      	cbnz	r0, 800f9d2 <_svfiprintf_r+0x2e>
 800f9c8:	230c      	movs	r3, #12
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d0:	e0d1      	b.n	800fb76 <_svfiprintf_r+0x1d2>
 800f9d2:	2340      	movs	r3, #64	; 0x40
 800f9d4:	616b      	str	r3, [r5, #20]
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9da:	2320      	movs	r3, #32
 800f9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9e4:	2330      	movs	r3, #48	; 0x30
 800f9e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb90 <_svfiprintf_r+0x1ec>
 800f9ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9ee:	f04f 0901 	mov.w	r9, #1
 800f9f2:	4623      	mov	r3, r4
 800f9f4:	469a      	mov	sl, r3
 800f9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9fa:	b10a      	cbz	r2, 800fa00 <_svfiprintf_r+0x5c>
 800f9fc:	2a25      	cmp	r2, #37	; 0x25
 800f9fe:	d1f9      	bne.n	800f9f4 <_svfiprintf_r+0x50>
 800fa00:	ebba 0b04 	subs.w	fp, sl, r4
 800fa04:	d00b      	beq.n	800fa1e <_svfiprintf_r+0x7a>
 800fa06:	465b      	mov	r3, fp
 800fa08:	4622      	mov	r2, r4
 800fa0a:	4629      	mov	r1, r5
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f7ff ff6d 	bl	800f8ec <__ssputs_r>
 800fa12:	3001      	adds	r0, #1
 800fa14:	f000 80aa 	beq.w	800fb6c <_svfiprintf_r+0x1c8>
 800fa18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa1a:	445a      	add	r2, fp
 800fa1c:	9209      	str	r2, [sp, #36]	; 0x24
 800fa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f000 80a2 	beq.w	800fb6c <_svfiprintf_r+0x1c8>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa32:	f10a 0a01 	add.w	sl, sl, #1
 800fa36:	9304      	str	r3, [sp, #16]
 800fa38:	9307      	str	r3, [sp, #28]
 800fa3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa3e:	931a      	str	r3, [sp, #104]	; 0x68
 800fa40:	4654      	mov	r4, sl
 800fa42:	2205      	movs	r2, #5
 800fa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa48:	4851      	ldr	r0, [pc, #324]	; (800fb90 <_svfiprintf_r+0x1ec>)
 800fa4a:	f7f0 fbe1 	bl	8000210 <memchr>
 800fa4e:	9a04      	ldr	r2, [sp, #16]
 800fa50:	b9d8      	cbnz	r0, 800fa8a <_svfiprintf_r+0xe6>
 800fa52:	06d0      	lsls	r0, r2, #27
 800fa54:	bf44      	itt	mi
 800fa56:	2320      	movmi	r3, #32
 800fa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa5c:	0711      	lsls	r1, r2, #28
 800fa5e:	bf44      	itt	mi
 800fa60:	232b      	movmi	r3, #43	; 0x2b
 800fa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa66:	f89a 3000 	ldrb.w	r3, [sl]
 800fa6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa6c:	d015      	beq.n	800fa9a <_svfiprintf_r+0xf6>
 800fa6e:	9a07      	ldr	r2, [sp, #28]
 800fa70:	4654      	mov	r4, sl
 800fa72:	2000      	movs	r0, #0
 800fa74:	f04f 0c0a 	mov.w	ip, #10
 800fa78:	4621      	mov	r1, r4
 800fa7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa7e:	3b30      	subs	r3, #48	; 0x30
 800fa80:	2b09      	cmp	r3, #9
 800fa82:	d94e      	bls.n	800fb22 <_svfiprintf_r+0x17e>
 800fa84:	b1b0      	cbz	r0, 800fab4 <_svfiprintf_r+0x110>
 800fa86:	9207      	str	r2, [sp, #28]
 800fa88:	e014      	b.n	800fab4 <_svfiprintf_r+0x110>
 800fa8a:	eba0 0308 	sub.w	r3, r0, r8
 800fa8e:	fa09 f303 	lsl.w	r3, r9, r3
 800fa92:	4313      	orrs	r3, r2
 800fa94:	9304      	str	r3, [sp, #16]
 800fa96:	46a2      	mov	sl, r4
 800fa98:	e7d2      	b.n	800fa40 <_svfiprintf_r+0x9c>
 800fa9a:	9b03      	ldr	r3, [sp, #12]
 800fa9c:	1d19      	adds	r1, r3, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	9103      	str	r1, [sp, #12]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	bfbb      	ittet	lt
 800faa6:	425b      	neglt	r3, r3
 800faa8:	f042 0202 	orrlt.w	r2, r2, #2
 800faac:	9307      	strge	r3, [sp, #28]
 800faae:	9307      	strlt	r3, [sp, #28]
 800fab0:	bfb8      	it	lt
 800fab2:	9204      	strlt	r2, [sp, #16]
 800fab4:	7823      	ldrb	r3, [r4, #0]
 800fab6:	2b2e      	cmp	r3, #46	; 0x2e
 800fab8:	d10c      	bne.n	800fad4 <_svfiprintf_r+0x130>
 800faba:	7863      	ldrb	r3, [r4, #1]
 800fabc:	2b2a      	cmp	r3, #42	; 0x2a
 800fabe:	d135      	bne.n	800fb2c <_svfiprintf_r+0x188>
 800fac0:	9b03      	ldr	r3, [sp, #12]
 800fac2:	1d1a      	adds	r2, r3, #4
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	9203      	str	r2, [sp, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	bfb8      	it	lt
 800facc:	f04f 33ff 	movlt.w	r3, #4294967295
 800fad0:	3402      	adds	r4, #2
 800fad2:	9305      	str	r3, [sp, #20]
 800fad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fba0 <_svfiprintf_r+0x1fc>
 800fad8:	7821      	ldrb	r1, [r4, #0]
 800fada:	2203      	movs	r2, #3
 800fadc:	4650      	mov	r0, sl
 800fade:	f7f0 fb97 	bl	8000210 <memchr>
 800fae2:	b140      	cbz	r0, 800faf6 <_svfiprintf_r+0x152>
 800fae4:	2340      	movs	r3, #64	; 0x40
 800fae6:	eba0 000a 	sub.w	r0, r0, sl
 800faea:	fa03 f000 	lsl.w	r0, r3, r0
 800faee:	9b04      	ldr	r3, [sp, #16]
 800faf0:	4303      	orrs	r3, r0
 800faf2:	3401      	adds	r4, #1
 800faf4:	9304      	str	r3, [sp, #16]
 800faf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fafa:	4826      	ldr	r0, [pc, #152]	; (800fb94 <_svfiprintf_r+0x1f0>)
 800fafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb00:	2206      	movs	r2, #6
 800fb02:	f7f0 fb85 	bl	8000210 <memchr>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d038      	beq.n	800fb7c <_svfiprintf_r+0x1d8>
 800fb0a:	4b23      	ldr	r3, [pc, #140]	; (800fb98 <_svfiprintf_r+0x1f4>)
 800fb0c:	bb1b      	cbnz	r3, 800fb56 <_svfiprintf_r+0x1b2>
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	3307      	adds	r3, #7
 800fb12:	f023 0307 	bic.w	r3, r3, #7
 800fb16:	3308      	adds	r3, #8
 800fb18:	9303      	str	r3, [sp, #12]
 800fb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb1c:	4433      	add	r3, r6
 800fb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb20:	e767      	b.n	800f9f2 <_svfiprintf_r+0x4e>
 800fb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb26:	460c      	mov	r4, r1
 800fb28:	2001      	movs	r0, #1
 800fb2a:	e7a5      	b.n	800fa78 <_svfiprintf_r+0xd4>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	3401      	adds	r4, #1
 800fb30:	9305      	str	r3, [sp, #20]
 800fb32:	4619      	mov	r1, r3
 800fb34:	f04f 0c0a 	mov.w	ip, #10
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb3e:	3a30      	subs	r2, #48	; 0x30
 800fb40:	2a09      	cmp	r2, #9
 800fb42:	d903      	bls.n	800fb4c <_svfiprintf_r+0x1a8>
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d0c5      	beq.n	800fad4 <_svfiprintf_r+0x130>
 800fb48:	9105      	str	r1, [sp, #20]
 800fb4a:	e7c3      	b.n	800fad4 <_svfiprintf_r+0x130>
 800fb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb50:	4604      	mov	r4, r0
 800fb52:	2301      	movs	r3, #1
 800fb54:	e7f0      	b.n	800fb38 <_svfiprintf_r+0x194>
 800fb56:	ab03      	add	r3, sp, #12
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	462a      	mov	r2, r5
 800fb5c:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <_svfiprintf_r+0x1f8>)
 800fb5e:	a904      	add	r1, sp, #16
 800fb60:	4638      	mov	r0, r7
 800fb62:	f3af 8000 	nop.w
 800fb66:	1c42      	adds	r2, r0, #1
 800fb68:	4606      	mov	r6, r0
 800fb6a:	d1d6      	bne.n	800fb1a <_svfiprintf_r+0x176>
 800fb6c:	89ab      	ldrh	r3, [r5, #12]
 800fb6e:	065b      	lsls	r3, r3, #25
 800fb70:	f53f af2c 	bmi.w	800f9cc <_svfiprintf_r+0x28>
 800fb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb76:	b01d      	add	sp, #116	; 0x74
 800fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb7c:	ab03      	add	r3, sp, #12
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	462a      	mov	r2, r5
 800fb82:	4b06      	ldr	r3, [pc, #24]	; (800fb9c <_svfiprintf_r+0x1f8>)
 800fb84:	a904      	add	r1, sp, #16
 800fb86:	4638      	mov	r0, r7
 800fb88:	f000 f87a 	bl	800fc80 <_printf_i>
 800fb8c:	e7eb      	b.n	800fb66 <_svfiprintf_r+0x1c2>
 800fb8e:	bf00      	nop
 800fb90:	08071a90 	.word	0x08071a90
 800fb94:	08071a9a 	.word	0x08071a9a
 800fb98:	00000000 	.word	0x00000000
 800fb9c:	0800f8ed 	.word	0x0800f8ed
 800fba0:	08071a96 	.word	0x08071a96

0800fba4 <_printf_common>:
 800fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	4616      	mov	r6, r2
 800fbaa:	4699      	mov	r9, r3
 800fbac:	688a      	ldr	r2, [r1, #8]
 800fbae:	690b      	ldr	r3, [r1, #16]
 800fbb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	bfb8      	it	lt
 800fbb8:	4613      	movlt	r3, r2
 800fbba:	6033      	str	r3, [r6, #0]
 800fbbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbc0:	4607      	mov	r7, r0
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	b10a      	cbz	r2, 800fbca <_printf_common+0x26>
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	6033      	str	r3, [r6, #0]
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	0699      	lsls	r1, r3, #26
 800fbce:	bf42      	ittt	mi
 800fbd0:	6833      	ldrmi	r3, [r6, #0]
 800fbd2:	3302      	addmi	r3, #2
 800fbd4:	6033      	strmi	r3, [r6, #0]
 800fbd6:	6825      	ldr	r5, [r4, #0]
 800fbd8:	f015 0506 	ands.w	r5, r5, #6
 800fbdc:	d106      	bne.n	800fbec <_printf_common+0x48>
 800fbde:	f104 0a19 	add.w	sl, r4, #25
 800fbe2:	68e3      	ldr	r3, [r4, #12]
 800fbe4:	6832      	ldr	r2, [r6, #0]
 800fbe6:	1a9b      	subs	r3, r3, r2
 800fbe8:	42ab      	cmp	r3, r5
 800fbea:	dc26      	bgt.n	800fc3a <_printf_common+0x96>
 800fbec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbf0:	1e13      	subs	r3, r2, #0
 800fbf2:	6822      	ldr	r2, [r4, #0]
 800fbf4:	bf18      	it	ne
 800fbf6:	2301      	movne	r3, #1
 800fbf8:	0692      	lsls	r2, r2, #26
 800fbfa:	d42b      	bmi.n	800fc54 <_printf_common+0xb0>
 800fbfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc00:	4649      	mov	r1, r9
 800fc02:	4638      	mov	r0, r7
 800fc04:	47c0      	blx	r8
 800fc06:	3001      	adds	r0, #1
 800fc08:	d01e      	beq.n	800fc48 <_printf_common+0xa4>
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	68e5      	ldr	r5, [r4, #12]
 800fc0e:	6832      	ldr	r2, [r6, #0]
 800fc10:	f003 0306 	and.w	r3, r3, #6
 800fc14:	2b04      	cmp	r3, #4
 800fc16:	bf08      	it	eq
 800fc18:	1aad      	subeq	r5, r5, r2
 800fc1a:	68a3      	ldr	r3, [r4, #8]
 800fc1c:	6922      	ldr	r2, [r4, #16]
 800fc1e:	bf0c      	ite	eq
 800fc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc24:	2500      	movne	r5, #0
 800fc26:	4293      	cmp	r3, r2
 800fc28:	bfc4      	itt	gt
 800fc2a:	1a9b      	subgt	r3, r3, r2
 800fc2c:	18ed      	addgt	r5, r5, r3
 800fc2e:	2600      	movs	r6, #0
 800fc30:	341a      	adds	r4, #26
 800fc32:	42b5      	cmp	r5, r6
 800fc34:	d11a      	bne.n	800fc6c <_printf_common+0xc8>
 800fc36:	2000      	movs	r0, #0
 800fc38:	e008      	b.n	800fc4c <_printf_common+0xa8>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4652      	mov	r2, sl
 800fc3e:	4649      	mov	r1, r9
 800fc40:	4638      	mov	r0, r7
 800fc42:	47c0      	blx	r8
 800fc44:	3001      	adds	r0, #1
 800fc46:	d103      	bne.n	800fc50 <_printf_common+0xac>
 800fc48:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc50:	3501      	adds	r5, #1
 800fc52:	e7c6      	b.n	800fbe2 <_printf_common+0x3e>
 800fc54:	18e1      	adds	r1, r4, r3
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	2030      	movs	r0, #48	; 0x30
 800fc5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc5e:	4422      	add	r2, r4
 800fc60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc68:	3302      	adds	r3, #2
 800fc6a:	e7c7      	b.n	800fbfc <_printf_common+0x58>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	4622      	mov	r2, r4
 800fc70:	4649      	mov	r1, r9
 800fc72:	4638      	mov	r0, r7
 800fc74:	47c0      	blx	r8
 800fc76:	3001      	adds	r0, #1
 800fc78:	d0e6      	beq.n	800fc48 <_printf_common+0xa4>
 800fc7a:	3601      	adds	r6, #1
 800fc7c:	e7d9      	b.n	800fc32 <_printf_common+0x8e>
	...

0800fc80 <_printf_i>:
 800fc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc84:	7e0f      	ldrb	r7, [r1, #24]
 800fc86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc88:	2f78      	cmp	r7, #120	; 0x78
 800fc8a:	4691      	mov	r9, r2
 800fc8c:	4680      	mov	r8, r0
 800fc8e:	460c      	mov	r4, r1
 800fc90:	469a      	mov	sl, r3
 800fc92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc96:	d807      	bhi.n	800fca8 <_printf_i+0x28>
 800fc98:	2f62      	cmp	r7, #98	; 0x62
 800fc9a:	d80a      	bhi.n	800fcb2 <_printf_i+0x32>
 800fc9c:	2f00      	cmp	r7, #0
 800fc9e:	f000 80d8 	beq.w	800fe52 <_printf_i+0x1d2>
 800fca2:	2f58      	cmp	r7, #88	; 0x58
 800fca4:	f000 80a3 	beq.w	800fdee <_printf_i+0x16e>
 800fca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcb0:	e03a      	b.n	800fd28 <_printf_i+0xa8>
 800fcb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcb6:	2b15      	cmp	r3, #21
 800fcb8:	d8f6      	bhi.n	800fca8 <_printf_i+0x28>
 800fcba:	a101      	add	r1, pc, #4	; (adr r1, 800fcc0 <_printf_i+0x40>)
 800fcbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc0:	0800fd19 	.word	0x0800fd19
 800fcc4:	0800fd2d 	.word	0x0800fd2d
 800fcc8:	0800fca9 	.word	0x0800fca9
 800fccc:	0800fca9 	.word	0x0800fca9
 800fcd0:	0800fca9 	.word	0x0800fca9
 800fcd4:	0800fca9 	.word	0x0800fca9
 800fcd8:	0800fd2d 	.word	0x0800fd2d
 800fcdc:	0800fca9 	.word	0x0800fca9
 800fce0:	0800fca9 	.word	0x0800fca9
 800fce4:	0800fca9 	.word	0x0800fca9
 800fce8:	0800fca9 	.word	0x0800fca9
 800fcec:	0800fe39 	.word	0x0800fe39
 800fcf0:	0800fd5d 	.word	0x0800fd5d
 800fcf4:	0800fe1b 	.word	0x0800fe1b
 800fcf8:	0800fca9 	.word	0x0800fca9
 800fcfc:	0800fca9 	.word	0x0800fca9
 800fd00:	0800fe5b 	.word	0x0800fe5b
 800fd04:	0800fca9 	.word	0x0800fca9
 800fd08:	0800fd5d 	.word	0x0800fd5d
 800fd0c:	0800fca9 	.word	0x0800fca9
 800fd10:	0800fca9 	.word	0x0800fca9
 800fd14:	0800fe23 	.word	0x0800fe23
 800fd18:	682b      	ldr	r3, [r5, #0]
 800fd1a:	1d1a      	adds	r2, r3, #4
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	602a      	str	r2, [r5, #0]
 800fd20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e0a3      	b.n	800fe74 <_printf_i+0x1f4>
 800fd2c:	6820      	ldr	r0, [r4, #0]
 800fd2e:	6829      	ldr	r1, [r5, #0]
 800fd30:	0606      	lsls	r6, r0, #24
 800fd32:	f101 0304 	add.w	r3, r1, #4
 800fd36:	d50a      	bpl.n	800fd4e <_printf_i+0xce>
 800fd38:	680e      	ldr	r6, [r1, #0]
 800fd3a:	602b      	str	r3, [r5, #0]
 800fd3c:	2e00      	cmp	r6, #0
 800fd3e:	da03      	bge.n	800fd48 <_printf_i+0xc8>
 800fd40:	232d      	movs	r3, #45	; 0x2d
 800fd42:	4276      	negs	r6, r6
 800fd44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd48:	485e      	ldr	r0, [pc, #376]	; (800fec4 <_printf_i+0x244>)
 800fd4a:	230a      	movs	r3, #10
 800fd4c:	e019      	b.n	800fd82 <_printf_i+0x102>
 800fd4e:	680e      	ldr	r6, [r1, #0]
 800fd50:	602b      	str	r3, [r5, #0]
 800fd52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd56:	bf18      	it	ne
 800fd58:	b236      	sxthne	r6, r6
 800fd5a:	e7ef      	b.n	800fd3c <_printf_i+0xbc>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	6820      	ldr	r0, [r4, #0]
 800fd60:	1d19      	adds	r1, r3, #4
 800fd62:	6029      	str	r1, [r5, #0]
 800fd64:	0601      	lsls	r1, r0, #24
 800fd66:	d501      	bpl.n	800fd6c <_printf_i+0xec>
 800fd68:	681e      	ldr	r6, [r3, #0]
 800fd6a:	e002      	b.n	800fd72 <_printf_i+0xf2>
 800fd6c:	0646      	lsls	r6, r0, #25
 800fd6e:	d5fb      	bpl.n	800fd68 <_printf_i+0xe8>
 800fd70:	881e      	ldrh	r6, [r3, #0]
 800fd72:	4854      	ldr	r0, [pc, #336]	; (800fec4 <_printf_i+0x244>)
 800fd74:	2f6f      	cmp	r7, #111	; 0x6f
 800fd76:	bf0c      	ite	eq
 800fd78:	2308      	moveq	r3, #8
 800fd7a:	230a      	movne	r3, #10
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd82:	6865      	ldr	r5, [r4, #4]
 800fd84:	60a5      	str	r5, [r4, #8]
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	bfa2      	ittt	ge
 800fd8a:	6821      	ldrge	r1, [r4, #0]
 800fd8c:	f021 0104 	bicge.w	r1, r1, #4
 800fd90:	6021      	strge	r1, [r4, #0]
 800fd92:	b90e      	cbnz	r6, 800fd98 <_printf_i+0x118>
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	d04d      	beq.n	800fe34 <_printf_i+0x1b4>
 800fd98:	4615      	mov	r5, r2
 800fd9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd9e:	fb03 6711 	mls	r7, r3, r1, r6
 800fda2:	5dc7      	ldrb	r7, [r0, r7]
 800fda4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fda8:	4637      	mov	r7, r6
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	460e      	mov	r6, r1
 800fdae:	d9f4      	bls.n	800fd9a <_printf_i+0x11a>
 800fdb0:	2b08      	cmp	r3, #8
 800fdb2:	d10b      	bne.n	800fdcc <_printf_i+0x14c>
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	07de      	lsls	r6, r3, #31
 800fdb8:	d508      	bpl.n	800fdcc <_printf_i+0x14c>
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	6861      	ldr	r1, [r4, #4]
 800fdbe:	4299      	cmp	r1, r3
 800fdc0:	bfde      	ittt	le
 800fdc2:	2330      	movle	r3, #48	; 0x30
 800fdc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fdc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fdcc:	1b52      	subs	r2, r2, r5
 800fdce:	6122      	str	r2, [r4, #16]
 800fdd0:	f8cd a000 	str.w	sl, [sp]
 800fdd4:	464b      	mov	r3, r9
 800fdd6:	aa03      	add	r2, sp, #12
 800fdd8:	4621      	mov	r1, r4
 800fdda:	4640      	mov	r0, r8
 800fddc:	f7ff fee2 	bl	800fba4 <_printf_common>
 800fde0:	3001      	adds	r0, #1
 800fde2:	d14c      	bne.n	800fe7e <_printf_i+0x1fe>
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	b004      	add	sp, #16
 800fdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdee:	4835      	ldr	r0, [pc, #212]	; (800fec4 <_printf_i+0x244>)
 800fdf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fdf4:	6829      	ldr	r1, [r5, #0]
 800fdf6:	6823      	ldr	r3, [r4, #0]
 800fdf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdfc:	6029      	str	r1, [r5, #0]
 800fdfe:	061d      	lsls	r5, r3, #24
 800fe00:	d514      	bpl.n	800fe2c <_printf_i+0x1ac>
 800fe02:	07df      	lsls	r7, r3, #31
 800fe04:	bf44      	itt	mi
 800fe06:	f043 0320 	orrmi.w	r3, r3, #32
 800fe0a:	6023      	strmi	r3, [r4, #0]
 800fe0c:	b91e      	cbnz	r6, 800fe16 <_printf_i+0x196>
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	f023 0320 	bic.w	r3, r3, #32
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	2310      	movs	r3, #16
 800fe18:	e7b0      	b.n	800fd7c <_printf_i+0xfc>
 800fe1a:	6823      	ldr	r3, [r4, #0]
 800fe1c:	f043 0320 	orr.w	r3, r3, #32
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	2378      	movs	r3, #120	; 0x78
 800fe24:	4828      	ldr	r0, [pc, #160]	; (800fec8 <_printf_i+0x248>)
 800fe26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe2a:	e7e3      	b.n	800fdf4 <_printf_i+0x174>
 800fe2c:	0659      	lsls	r1, r3, #25
 800fe2e:	bf48      	it	mi
 800fe30:	b2b6      	uxthmi	r6, r6
 800fe32:	e7e6      	b.n	800fe02 <_printf_i+0x182>
 800fe34:	4615      	mov	r5, r2
 800fe36:	e7bb      	b.n	800fdb0 <_printf_i+0x130>
 800fe38:	682b      	ldr	r3, [r5, #0]
 800fe3a:	6826      	ldr	r6, [r4, #0]
 800fe3c:	6961      	ldr	r1, [r4, #20]
 800fe3e:	1d18      	adds	r0, r3, #4
 800fe40:	6028      	str	r0, [r5, #0]
 800fe42:	0635      	lsls	r5, r6, #24
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	d501      	bpl.n	800fe4c <_printf_i+0x1cc>
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <_printf_i+0x1d2>
 800fe4c:	0670      	lsls	r0, r6, #25
 800fe4e:	d5fb      	bpl.n	800fe48 <_printf_i+0x1c8>
 800fe50:	8019      	strh	r1, [r3, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	4615      	mov	r5, r2
 800fe58:	e7ba      	b.n	800fdd0 <_printf_i+0x150>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	1d1a      	adds	r2, r3, #4
 800fe5e:	602a      	str	r2, [r5, #0]
 800fe60:	681d      	ldr	r5, [r3, #0]
 800fe62:	6862      	ldr	r2, [r4, #4]
 800fe64:	2100      	movs	r1, #0
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7f0 f9d2 	bl	8000210 <memchr>
 800fe6c:	b108      	cbz	r0, 800fe72 <_printf_i+0x1f2>
 800fe6e:	1b40      	subs	r0, r0, r5
 800fe70:	6060      	str	r0, [r4, #4]
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	2300      	movs	r3, #0
 800fe78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe7c:	e7a8      	b.n	800fdd0 <_printf_i+0x150>
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	462a      	mov	r2, r5
 800fe82:	4649      	mov	r1, r9
 800fe84:	4640      	mov	r0, r8
 800fe86:	47d0      	blx	sl
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d0ab      	beq.n	800fde4 <_printf_i+0x164>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	079b      	lsls	r3, r3, #30
 800fe90:	d413      	bmi.n	800feba <_printf_i+0x23a>
 800fe92:	68e0      	ldr	r0, [r4, #12]
 800fe94:	9b03      	ldr	r3, [sp, #12]
 800fe96:	4298      	cmp	r0, r3
 800fe98:	bfb8      	it	lt
 800fe9a:	4618      	movlt	r0, r3
 800fe9c:	e7a4      	b.n	800fde8 <_printf_i+0x168>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4632      	mov	r2, r6
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d09b      	beq.n	800fde4 <_printf_i+0x164>
 800feac:	3501      	adds	r5, #1
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	9903      	ldr	r1, [sp, #12]
 800feb2:	1a5b      	subs	r3, r3, r1
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dcf2      	bgt.n	800fe9e <_printf_i+0x21e>
 800feb8:	e7eb      	b.n	800fe92 <_printf_i+0x212>
 800feba:	2500      	movs	r5, #0
 800febc:	f104 0619 	add.w	r6, r4, #25
 800fec0:	e7f5      	b.n	800feae <_printf_i+0x22e>
 800fec2:	bf00      	nop
 800fec4:	08071aa1 	.word	0x08071aa1
 800fec8:	08071ab2 	.word	0x08071ab2

0800fecc <memmove>:
 800fecc:	4288      	cmp	r0, r1
 800fece:	b510      	push	{r4, lr}
 800fed0:	eb01 0402 	add.w	r4, r1, r2
 800fed4:	d902      	bls.n	800fedc <memmove+0x10>
 800fed6:	4284      	cmp	r4, r0
 800fed8:	4623      	mov	r3, r4
 800feda:	d807      	bhi.n	800feec <memmove+0x20>
 800fedc:	1e43      	subs	r3, r0, #1
 800fede:	42a1      	cmp	r1, r4
 800fee0:	d008      	beq.n	800fef4 <memmove+0x28>
 800fee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feea:	e7f8      	b.n	800fede <memmove+0x12>
 800feec:	4402      	add	r2, r0
 800feee:	4601      	mov	r1, r0
 800fef0:	428a      	cmp	r2, r1
 800fef2:	d100      	bne.n	800fef6 <memmove+0x2a>
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fefe:	e7f7      	b.n	800fef0 <memmove+0x24>

0800ff00 <_realloc_r>:
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	4680      	mov	r8, r0
 800ff06:	4614      	mov	r4, r2
 800ff08:	460e      	mov	r6, r1
 800ff0a:	b921      	cbnz	r1, 800ff16 <_realloc_r+0x16>
 800ff0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	4611      	mov	r1, r2
 800ff12:	f7ff bb85 	b.w	800f620 <_malloc_r>
 800ff16:	b92a      	cbnz	r2, 800ff24 <_realloc_r+0x24>
 800ff18:	f7ff fc9c 	bl	800f854 <_free_r>
 800ff1c:	4625      	mov	r5, r4
 800ff1e:	4628      	mov	r0, r5
 800ff20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff24:	f000 f81b 	bl	800ff5e <_malloc_usable_size_r>
 800ff28:	4284      	cmp	r4, r0
 800ff2a:	4607      	mov	r7, r0
 800ff2c:	d802      	bhi.n	800ff34 <_realloc_r+0x34>
 800ff2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff32:	d812      	bhi.n	800ff5a <_realloc_r+0x5a>
 800ff34:	4621      	mov	r1, r4
 800ff36:	4640      	mov	r0, r8
 800ff38:	f7ff fb72 	bl	800f620 <_malloc_r>
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d0ed      	beq.n	800ff1e <_realloc_r+0x1e>
 800ff42:	42bc      	cmp	r4, r7
 800ff44:	4622      	mov	r2, r4
 800ff46:	4631      	mov	r1, r6
 800ff48:	bf28      	it	cs
 800ff4a:	463a      	movcs	r2, r7
 800ff4c:	f7ff fb32 	bl	800f5b4 <memcpy>
 800ff50:	4631      	mov	r1, r6
 800ff52:	4640      	mov	r0, r8
 800ff54:	f7ff fc7e 	bl	800f854 <_free_r>
 800ff58:	e7e1      	b.n	800ff1e <_realloc_r+0x1e>
 800ff5a:	4635      	mov	r5, r6
 800ff5c:	e7df      	b.n	800ff1e <_realloc_r+0x1e>

0800ff5e <_malloc_usable_size_r>:
 800ff5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff62:	1f18      	subs	r0, r3, #4
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bfbc      	itt	lt
 800ff68:	580b      	ldrlt	r3, [r1, r0]
 800ff6a:	18c0      	addlt	r0, r0, r3
 800ff6c:	4770      	bx	lr
	...

0800ff70 <_init>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	bf00      	nop
 800ff74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff76:	bc08      	pop	{r3}
 800ff78:	469e      	mov	lr, r3
 800ff7a:	4770      	bx	lr

0800ff7c <_fini>:
 800ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7e:	bf00      	nop
 800ff80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff82:	bc08      	pop	{r3}
 800ff84:	469e      	mov	lr, r3
 800ff86:	4770      	bx	lr
