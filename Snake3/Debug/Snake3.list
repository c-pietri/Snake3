
Snake3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010138  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00061b14  08010308  08010308  00020308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08071e1c  08071e1c  0009013c  2**0
                  CONTENTS
  4 .ARM          00000008  08071e1c  08071e1c  00081e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08071e24  08071e24  0009013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08071e24  08071e24  00081e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08071e28  08071e28  00081e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08071e2c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049a4  2000013c  08071f68  0009013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ae0  08071f68  00094ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003229a  00000000  00000000  0009016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fec  00000000  00000000  000c2406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  000c83f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  000caba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f089  00000000  00000000  000cd0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fe3b  00000000  00000000  000fc149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117e05  00000000  00000000  0012bf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00243d89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad38  00000000  00000000  00243ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080102f0 	.word	0x080102f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000140 	.word	0x20000140
 800020c:	080102f0 	.word	0x080102f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000158 	.word	0x20000158
 80005e4:	2000020c 	.word	0x2000020c

080005e8 <ft5336_Init>:
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f002 fd82 	bl	80030fc <TS_IO_Delay>
 80005f8:	f000 fa7a 	bl	8000af0 <ft5336_I2C_InitializeIfRequired>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <ft5336_Reset>:
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <ft5336_ReadID>:
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
 8000624:	2300      	movs	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]
 8000630:	f000 fa5e 	bl	8000af0 <ft5336_I2C_InitializeIfRequired>
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e010      	b.n	800065c <ft5336_ReadID+0x42>
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	21a8      	movs	r1, #168	; 0xa8
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fd3d 	bl	80030c0 <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b51      	cmp	r3, #81	; 0x51
 8000650:	d101      	bne.n	8000656 <ft5336_ReadID+0x3c>
 8000652:	2301      	movs	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d802      	bhi.n	8000668 <ft5336_ReadID+0x4e>
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e8      	beq.n	800063a <ft5336_ReadID+0x20>
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b29b      	uxth	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <ft5336_TS_Start>:
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fa44 	bl	8000b10 <ft5336_TS_Configure>
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f932 	bl	80008f4 <ft5336_TS_DisableIT>
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ft5336_TS_DetectTouch>:
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fd07 	bl	80030c0 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d901      	bls.n	80006ce <ft5336_TS_DetectTouch+0x36>
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000040c 	.word	0x2000040c

080006ec <ft5336_TS_GetXY>:
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
 80006fa:	2300      	movs	r3, #0
 80006fc:	74fb      	strb	r3, [r7, #19]
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
 8000706:	2300      	movs	r3, #0
 8000708:	757b      	strb	r3, [r7, #21]
 800070a:	2300      	movs	r3, #0
 800070c:	753b      	strb	r3, [r7, #20]
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000710:	789a      	ldrb	r2, [r3, #2]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	429a      	cmp	r2, r3
 8000718:	f080 80cf 	bcs.w	80008ba <ft5336_TS_GetXY+0x1ce>
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d871      	bhi.n	8000808 <ft5336_TS_GetXY+0x11c>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <ft5336_TS_GetXY+0x40>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000755 	.word	0x08000755
 8000730:	08000767 	.word	0x08000767
 8000734:	08000779 	.word	0x08000779
 8000738:	0800078b 	.word	0x0800078b
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007af 	.word	0x080007af
 8000744:	080007c1 	.word	0x080007c1
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007e5 	.word	0x080007e5
 8000750:	080007f7 	.word	0x080007f7
 8000754:	2304      	movs	r3, #4
 8000756:	75fb      	strb	r3, [r7, #23]
 8000758:	2303      	movs	r3, #3
 800075a:	75bb      	strb	r3, [r7, #22]
 800075c:	2306      	movs	r3, #6
 800075e:	757b      	strb	r3, [r7, #21]
 8000760:	2305      	movs	r3, #5
 8000762:	753b      	strb	r3, [r7, #20]
 8000764:	e051      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000766:	230a      	movs	r3, #10
 8000768:	75fb      	strb	r3, [r7, #23]
 800076a:	2309      	movs	r3, #9
 800076c:	75bb      	strb	r3, [r7, #22]
 800076e:	230c      	movs	r3, #12
 8000770:	757b      	strb	r3, [r7, #21]
 8000772:	230b      	movs	r3, #11
 8000774:	753b      	strb	r3, [r7, #20]
 8000776:	e048      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000778:	2310      	movs	r3, #16
 800077a:	75fb      	strb	r3, [r7, #23]
 800077c:	230f      	movs	r3, #15
 800077e:	75bb      	strb	r3, [r7, #22]
 8000780:	2312      	movs	r3, #18
 8000782:	757b      	strb	r3, [r7, #21]
 8000784:	2311      	movs	r3, #17
 8000786:	753b      	strb	r3, [r7, #20]
 8000788:	e03f      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 800078a:	2316      	movs	r3, #22
 800078c:	75fb      	strb	r3, [r7, #23]
 800078e:	2315      	movs	r3, #21
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	2318      	movs	r3, #24
 8000794:	757b      	strb	r3, [r7, #21]
 8000796:	2317      	movs	r3, #23
 8000798:	753b      	strb	r3, [r7, #20]
 800079a:	e036      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 800079c:	231c      	movs	r3, #28
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	231b      	movs	r3, #27
 80007a2:	75bb      	strb	r3, [r7, #22]
 80007a4:	231e      	movs	r3, #30
 80007a6:	757b      	strb	r3, [r7, #21]
 80007a8:	231d      	movs	r3, #29
 80007aa:	753b      	strb	r3, [r7, #20]
 80007ac:	e02d      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	75fb      	strb	r3, [r7, #23]
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	75bb      	strb	r3, [r7, #22]
 80007b6:	2324      	movs	r3, #36	; 0x24
 80007b8:	757b      	strb	r3, [r7, #21]
 80007ba:	2323      	movs	r3, #35	; 0x23
 80007bc:	753b      	strb	r3, [r7, #20]
 80007be:	e024      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	75bb      	strb	r3, [r7, #22]
 80007c8:	232a      	movs	r3, #42	; 0x2a
 80007ca:	757b      	strb	r3, [r7, #21]
 80007cc:	2329      	movs	r3, #41	; 0x29
 80007ce:	753b      	strb	r3, [r7, #20]
 80007d0:	e01b      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007d2:	232e      	movs	r3, #46	; 0x2e
 80007d4:	75fb      	strb	r3, [r7, #23]
 80007d6:	232d      	movs	r3, #45	; 0x2d
 80007d8:	75bb      	strb	r3, [r7, #22]
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	757b      	strb	r3, [r7, #21]
 80007de:	232f      	movs	r3, #47	; 0x2f
 80007e0:	753b      	strb	r3, [r7, #20]
 80007e2:	e012      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	75fb      	strb	r3, [r7, #23]
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	75bb      	strb	r3, [r7, #22]
 80007ec:	2336      	movs	r3, #54	; 0x36
 80007ee:	757b      	strb	r3, [r7, #21]
 80007f0:	2335      	movs	r3, #53	; 0x35
 80007f2:	753b      	strb	r3, [r7, #20]
 80007f4:	e009      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	75fb      	strb	r3, [r7, #23]
 80007fa:	2339      	movs	r3, #57	; 0x39
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	233c      	movs	r3, #60	; 0x3c
 8000800:	757b      	strb	r3, [r7, #21]
 8000802:	233b      	movs	r3, #59	; 0x3b
 8000804:	753b      	strb	r3, [r7, #20]
 8000806:	e000      	b.n	800080a <ft5336_TS_GetXY+0x11e>
 8000808:	bf00      	nop
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7dfa      	ldrb	r2, [r7, #23]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fc54 	bl	80030c0 <TS_IO_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	74fb      	strb	r3, [r7, #19]
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7dba      	ldrb	r2, [r7, #22]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fc46 	bl	80030c0 <TS_IO_Read>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	7d7a      	ldrb	r2, [r7, #21]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fc2b 	bl	80030c0 <TS_IO_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	74fb      	strb	r3, [r7, #19]
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	801a      	strh	r2, [r3, #0]
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	7d3a      	ldrb	r2, [r7, #20]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fc1d 	bl	80030c0 <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	801a      	strh	r2, [r3, #0]
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b8:	709a      	strb	r2, [r3, #2]
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000040c 	.word	0x2000040c
 80008c8:	20000410 	.word	0x20000410

080008cc <ft5336_TS_EnableIT>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fbd0 	bl	800308c <TS_IO_Write>
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_DisableIT>:
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fbbc 	bl	800308c <TS_IO_Write>
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_ITStatus>:
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	2300      	movs	r3, #0
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <ft5336_TS_ClearIT>:
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <ft5336_TS_GetGestureID>:
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	6039      	str	r1, [r7, #0]
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fbad 	bl	80030c0 <TS_IO_Read>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <ft5336_TS_GetTouchInfo>:
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4603      	mov	r3, r0
 800098a:	81fb      	strh	r3, [r7, #14]
 800098c:	2300      	movs	r3, #0
 800098e:	753b      	strb	r3, [r7, #20]
 8000990:	2300      	movs	r3, #0
 8000992:	75fb      	strb	r3, [r7, #23]
 8000994:	2300      	movs	r3, #0
 8000996:	75bb      	strb	r3, [r7, #22]
 8000998:	2300      	movs	r3, #0
 800099a:	757b      	strb	r3, [r7, #21]
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <ft5336_TS_GetTouchInfo+0x158>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f080 8090 	bcs.w	8000aca <ft5336_TS_GetTouchInfo+0x14e>
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	d85d      	bhi.n	8000a6c <ft5336_TS_GetTouchInfo+0xf0>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	080009ef 	.word	0x080009ef
 80009c0:	080009fd 	.word	0x080009fd
 80009c4:	08000a0b 	.word	0x08000a0b
 80009c8:	08000a19 	.word	0x08000a19
 80009cc:	08000a27 	.word	0x08000a27
 80009d0:	08000a35 	.word	0x08000a35
 80009d4:	08000a43 	.word	0x08000a43
 80009d8:	08000a51 	.word	0x08000a51
 80009dc:	08000a5f 	.word	0x08000a5f
 80009e0:	2303      	movs	r3, #3
 80009e2:	75fb      	strb	r3, [r7, #23]
 80009e4:	2307      	movs	r3, #7
 80009e6:	75bb      	strb	r3, [r7, #22]
 80009e8:	2308      	movs	r3, #8
 80009ea:	757b      	strb	r3, [r7, #21]
 80009ec:	e03f      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 80009ee:	2309      	movs	r3, #9
 80009f0:	75fb      	strb	r3, [r7, #23]
 80009f2:	230d      	movs	r3, #13
 80009f4:	75bb      	strb	r3, [r7, #22]
 80009f6:	230e      	movs	r3, #14
 80009f8:	757b      	strb	r3, [r7, #21]
 80009fa:	e038      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 80009fc:	230f      	movs	r3, #15
 80009fe:	75fb      	strb	r3, [r7, #23]
 8000a00:	2313      	movs	r3, #19
 8000a02:	75bb      	strb	r3, [r7, #22]
 8000a04:	2314      	movs	r3, #20
 8000a06:	757b      	strb	r3, [r7, #21]
 8000a08:	e031      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a0a:	2315      	movs	r3, #21
 8000a0c:	75fb      	strb	r3, [r7, #23]
 8000a0e:	2319      	movs	r3, #25
 8000a10:	75bb      	strb	r3, [r7, #22]
 8000a12:	231a      	movs	r3, #26
 8000a14:	757b      	strb	r3, [r7, #21]
 8000a16:	e02a      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a18:	231b      	movs	r3, #27
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	231f      	movs	r3, #31
 8000a1e:	75bb      	strb	r3, [r7, #22]
 8000a20:	2320      	movs	r3, #32
 8000a22:	757b      	strb	r3, [r7, #21]
 8000a24:	e023      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a26:	2321      	movs	r3, #33	; 0x21
 8000a28:	75fb      	strb	r3, [r7, #23]
 8000a2a:	2325      	movs	r3, #37	; 0x25
 8000a2c:	75bb      	strb	r3, [r7, #22]
 8000a2e:	2326      	movs	r3, #38	; 0x26
 8000a30:	757b      	strb	r3, [r7, #21]
 8000a32:	e01c      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a34:	2327      	movs	r3, #39	; 0x27
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	232b      	movs	r3, #43	; 0x2b
 8000a3a:	75bb      	strb	r3, [r7, #22]
 8000a3c:	232c      	movs	r3, #44	; 0x2c
 8000a3e:	757b      	strb	r3, [r7, #21]
 8000a40:	e015      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a42:	232d      	movs	r3, #45	; 0x2d
 8000a44:	75fb      	strb	r3, [r7, #23]
 8000a46:	2331      	movs	r3, #49	; 0x31
 8000a48:	75bb      	strb	r3, [r7, #22]
 8000a4a:	2332      	movs	r3, #50	; 0x32
 8000a4c:	757b      	strb	r3, [r7, #21]
 8000a4e:	e00e      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a50:	2333      	movs	r3, #51	; 0x33
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	2337      	movs	r3, #55	; 0x37
 8000a56:	75bb      	strb	r3, [r7, #22]
 8000a58:	2338      	movs	r3, #56	; 0x38
 8000a5a:	757b      	strb	r3, [r7, #21]
 8000a5c:	e007      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a5e:	2339      	movs	r3, #57	; 0x39
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	233d      	movs	r3, #61	; 0x3d
 8000a64:	75bb      	strb	r3, [r7, #22]
 8000a66:	233e      	movs	r3, #62	; 0x3e
 8000a68:	757b      	strb	r3, [r7, #21]
 8000a6a:	e000      	b.n	8000a6e <ft5336_TS_GetTouchInfo+0xf2>
 8000a6c:	bf00      	nop
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	7dfa      	ldrb	r2, [r7, #23]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fb22 	bl	80030c0 <TS_IO_Read>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	753b      	strb	r3, [r7, #20]
 8000a80:	7d3b      	ldrb	r3, [r7, #20]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	119b      	asrs	r3, r3, #6
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7dba      	ldrb	r2, [r7, #22]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fb12 	bl	80030c0 <TS_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	753b      	strb	r3, [r7, #20]
 8000aa0:	7d3b      	ldrb	r3, [r7, #20]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fb04 	bl	80030c0 <TS_IO_Read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	753b      	strb	r3, [r7, #20]
 8000abc:	7d3b      	ldrb	r3, [r7, #20]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	111b      	asrs	r3, r3, #4
 8000ac2:	f003 0204 	and.w	r2, r3, #4
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000040c 	.word	0x2000040c

08000ad8 <ft5336_Get_I2C_InitializedStatus>:
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000040c 	.word	0x2000040c

08000af0 <ft5336_I2C_InitializeIfRequired>:
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	f7ff fff0 	bl	8000ad8 <ft5336_Get_I2C_InitializedStatus>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d104      	bne.n	8000b08 <ft5336_I2C_InitializeIfRequired+0x18>
 8000afe:	f002 fabb 	bl	8003078 <TS_IO_Init>
 8000b02:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000040c 	.word	0x2000040c

08000b10 <ft5336_TS_Configure>:
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b0be      	sub	sp, #248	; 0xf8
 8000b30:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b3c:	222e      	movs	r2, #46	; 0x2e
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00e ff05 	bl	800f950 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f004 feb1 	bl	80058c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f9bc 	bl	8000ee0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b68:	f000 fa2c 	bl	8000fc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 ffc2 	bl	8001af4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b70:	f000 faa6 	bl	80010c0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000b74:	f000 fb20 	bl	80011b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000b78:	f000 ff6c 	bl	8001a54 <MX_FMC_Init>
  MX_I2C1_Init();
 8000b7c:	f000 fb4e 	bl	800121c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b80:	f000 fb8c 	bl	800129c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b84:	f000 fbca 	bl	800131c <MX_LTDC_Init>
  MX_RTC_Init();
 8000b88:	f000 fc5e 	bl	8001448 <MX_RTC_Init>
  MX_SPI2_Init();
 8000b8c:	f000 fd02 	bl	8001594 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b90:	f000 fd3e 	bl	8001610 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b94:	f000 fd90 	bl	80016b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b98:	f000 fddc 	bl	8001754 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b9c:	f000 fe28 	bl	80017f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ba0:	f000 fe74 	bl	800188c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000ba4:	f000 fef6 	bl	8001994 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ba8:	f000 ff24 	bl	80019f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bac:	f000 fa36 	bl	800101c <MX_ADC1_Init>
  MX_DAC_Init();
 8000bb0:	f000 fad8 	bl	8001164 <MX_DAC_Init>
  MX_UART7_Init();
 8000bb4:	f000 febe 	bl	8001934 <MX_UART7_Init>
  MX_RNG_Init();
 8000bb8:	f000 fc32 	bl	8001420 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000bbc:	f002 faaa 	bl	8003114 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bc0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f002 fb3d 	bl	8003244 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bca:	f002 fb13 	bl	80031f4 <BSP_LCD_GetXSize>
 8000bce:	4604      	mov	r4, r0
 8000bd0:	f002 fb24 	bl	800321c <BSP_LCD_GetYSize>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	fb04 f303 	mul.w	r3, r4, r3
 8000bda:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4619      	mov	r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	f002 fb2e 	bl	8003244 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000be8:	f003 f8e4 	bl	8003db4 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f002 fb89 	bl	8003304 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf6:	f002 fc35 	bl	8003464 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f002 fb82 	bl	8003304 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f002 fc2f 	bl	8003464 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000c06:	489e      	ldr	r0, [pc, #632]	; (8000e80 <main+0x354>)
 8000c08:	f002 fbfc 	bl	8003404 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000c0c:	489d      	ldr	r0, [pc, #628]	; (8000e84 <main+0x358>)
 8000c0e:	f002 fbc7 	bl	80033a0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f002 fbdc 	bl	80033d0 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c18:	f002 faec 	bl	80031f4 <BSP_LCD_GetXSize>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29c      	uxth	r4, r3
 8000c20:	f002 fafc 	bl	800321c <BSP_LCD_GetYSize>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f003 fcd4 	bl	80045d8 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	4995      	ldr	r1, [pc, #596]	; (8000e88 <main+0x35c>)
 8000c34:	4895      	ldr	r0, [pc, #596]	; (8000e8c <main+0x360>)
 8000c36:	f00a fc35 	bl	800b4a4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000c46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00b ffbd 	bl	800cbca <osMutexCreate>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a8f      	ldr	r2, [pc, #572]	; (8000e90 <main+0x364>)
 8000c54:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000c56:	4b8f      	ldr	r3, [pc, #572]	; (8000e94 <main+0x368>)
 8000c58:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000c62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00c f84b 	bl	800cd04 <osMessageCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a89      	ldr	r2, [pc, #548]	; (8000e98 <main+0x36c>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 16, uint16_t);
 8000c74:	4b87      	ldr	r3, [pc, #540]	; (8000e94 <main+0x368>)
 8000c76:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8000c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00c f83c 	bl	800cd04 <osMessageCreate>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a83      	ldr	r2, [pc, #524]	; (8000e9c <main+0x370>)
 8000c90:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c92:	4b83      	ldr	r3, [pc, #524]	; (8000ea0 <main+0x374>)
 8000c94:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c98:	461d      	mov	r5, r3
 8000c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ca6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00b ff2c 	bl	800cb0a <osThreadCreate>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a7b      	ldr	r2, [pc, #492]	; (8000ea4 <main+0x378>)
 8000cb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Snake */
  osThreadDef(Snake, tache_snake, osPriorityAboveNormal, 0, 1024);
 8000cb8:	4b7b      	ldr	r3, [pc, #492]	; (8000ea8 <main+0x37c>)
 8000cba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SnakeHandle = osThreadCreate(osThread(Snake), NULL);
 8000ccc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00b ff19 	bl	800cb0a <osThreadCreate>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a74      	ldr	r2, [pc, #464]	; (8000eac <main+0x380>)
 8000cdc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Affichage */
  osThreadDef(Affichage, tache_affichage, osPriorityLow, 0, 1024);
 8000cde:	4b74      	ldr	r3, [pc, #464]	; (8000eb0 <main+0x384>)
 8000ce0:	f107 0420 	add.w	r4, r7, #32
 8000ce4:	461d      	mov	r5, r3
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00b ff06 	bl	800cb0a <osThreadCreate>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a6c      	ldr	r2, [pc, #432]	; (8000eb4 <main+0x388>)
 8000d02:	6013      	str	r3, [r2, #0]

  /* definition and creation of Game */
  osThreadDef(Game, tache_game, osPriorityHigh, 0, 256);
 8000d04:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <main+0x38c>)
 8000d06:	1d3c      	adds	r4, r7, #4
 8000d08:	461d      	mov	r5, r3
 8000d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GameHandle = osThreadCreate(osThread(Game), NULL);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b fef5 	bl	800cb0a <osThreadCreate>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a66      	ldr	r2, [pc, #408]	; (8000ebc <main+0x390>)
 8000d24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d26:	f00b fee9 	bl	800cafc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <main+0x394>)
 8000d30:	f006 fdb2 	bl	8007898 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	4861      	ldr	r0, [pc, #388]	; (8000ec4 <main+0x398>)
 8000d3e:	f006 fdc3 	bl	80078c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	485e      	ldr	r0, [pc, #376]	; (8000ec0 <main+0x394>)
 8000d48:	f006 fda6 	bl	8007898 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2120      	movs	r1, #32
 8000d52:	485d      	ldr	r0, [pc, #372]	; (8000ec8 <main+0x39c>)
 8000d54:	f006 fdb8 	bl	80078c8 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	4858      	ldr	r0, [pc, #352]	; (8000ec0 <main+0x394>)
 8000d5e:	f006 fd9b 	bl	8007898 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d6a:	4958      	ldr	r1, [pc, #352]	; (8000ecc <main+0x3a0>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00e ff05 	bl	800fb7c <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d76:	4619      	mov	r1, r3
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f002 fca7 	bl	80036cc <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4851      	ldr	r0, [pc, #324]	; (8000ed0 <main+0x3a4>)
 8000d8c:	f005 f8c4 	bl	8005f18 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000d90:	484f      	ldr	r0, [pc, #316]	; (8000ed0 <main+0x3a4>)
 8000d92:	f004 fe2d 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d96:	bf00      	nop
 8000d98:	2164      	movs	r1, #100	; 0x64
 8000d9a:	484d      	ldr	r0, [pc, #308]	; (8000ed0 <main+0x3a4>)
 8000d9c:	f004 fef6 	bl	8005b8c <HAL_ADC_PollForConversion>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f8      	bne.n	8000d98 <main+0x26c>
		potr = HAL_ADC_GetValue(&hadc3);
 8000da6:	484a      	ldr	r0, [pc, #296]	; (8000ed0 <main+0x3a4>)
 8000da8:	f005 f88b 	bl	8005ec2 <HAL_ADC_GetValue>
 8000dac:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

		sConfig.Channel = ADC_CHANNEL_7;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4844      	ldr	r0, [pc, #272]	; (8000ed0 <main+0x3a4>)
 8000dbe:	f005 f8ab 	bl	8005f18 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000dc2:	4843      	ldr	r0, [pc, #268]	; (8000ed0 <main+0x3a4>)
 8000dc4:	f004 fe14 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc8:	bf00      	nop
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	4840      	ldr	r0, [pc, #256]	; (8000ed0 <main+0x3a4>)
 8000dce:	f004 fedd 	bl	8005b8c <HAL_ADC_PollForConversion>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f8      	bne.n	8000dca <main+0x29e>
		potl = HAL_ADC_GetValue(&hadc3);
 8000dd8:	483d      	ldr	r0, [pc, #244]	; (8000ed0 <main+0x3a4>)
 8000dda:	f005 f872 	bl	8005ec2 <HAL_ADC_GetValue>
 8000dde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

		sConfig.Channel = ADC_CHANNEL_8;
 8000de2:	2308      	movs	r3, #8
 8000de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <main+0x3a4>)
 8000df0:	f005 f892 	bl	8005f18 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000df4:	4836      	ldr	r0, [pc, #216]	; (8000ed0 <main+0x3a4>)
 8000df6:	f004 fdfb 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dfa:	bf00      	nop
 8000dfc:	2164      	movs	r1, #100	; 0x64
 8000dfe:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <main+0x3a4>)
 8000e00:	f004 fec4 	bl	8005b8c <HAL_ADC_PollForConversion>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f8      	bne.n	8000dfc <main+0x2d0>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e0a:	4831      	ldr	r0, [pc, #196]	; (8000ed0 <main+0x3a4>)
 8000e0c:	f005 f859 	bl	8005ec2 <HAL_ADC_GetValue>
 8000e10:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

		HAL_ADC_Start(&hadc1);
 8000e14:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <main+0x3a8>)
 8000e16:	f004 fdeb 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e1a:	bf00      	nop
 8000e1c:	2164      	movs	r1, #100	; 0x64
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <main+0x3a8>)
 8000e20:	f004 feb4 	bl	8005b8c <HAL_ADC_PollForConversion>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f8      	bne.n	8000e1c <main+0x2f0>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e2a:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <main+0x3a8>)
 8000e2c:	f005 f849 	bl	8005ec2 <HAL_ADC_GetValue>
 8000e30:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e34:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8000e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e48:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e4c:	4922      	ldr	r1, [pc, #136]	; (8000ed8 <main+0x3ac>)
 8000e4e:	f00e fe95 	bl	800fb7c <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e56:	4619      	mov	r1, r3
 8000e58:	2009      	movs	r0, #9
 8000e5a:	f002 fc37 	bl	80036cc <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8000e5e:	481f      	ldr	r0, [pc, #124]	; (8000edc <main+0x3b0>)
 8000e60:	f003 fbfa 	bl	8004658 <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x3b0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f43f af5e 	beq.w	8000d2a <main+0x1fe>
			BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <main+0x3b0>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <main+0x3b0>)
 8000e74:	8991      	ldrh	r1, [r2, #12]
 8000e76:	2204      	movs	r2, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fefb 	bl	8003c74 <BSP_LCD_FillCircle>
		HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e7e:	e754      	b.n	8000d2a <main+0x1fe>
 8000e80:	200000bc 	.word	0x200000bc
 8000e84:	ff0000ff 	.word	0xff0000ff
 8000e88:	20000a24 	.word	0x20000a24
 8000e8c:	200008cc 	.word	0x200008cc
 8000e90:	20000a20 	.word	0x20000a20
 8000e94:	0801036c 	.word	0x0801036c
 8000e98:	20000a18 	.word	0x20000a18
 8000e9c:	20000a1c 	.word	0x20000a1c
 8000ea0:	0801037c 	.word	0x0801037c
 8000ea4:	20000a08 	.word	0x20000a08
 8000ea8:	08010398 	.word	0x08010398
 8000eac:	20000a0c 	.word	0x20000a0c
 8000eb0:	080103b4 	.word	0x080103b4
 8000eb4:	20000a10 	.word	0x20000a10
 8000eb8:	080103d0 	.word	0x080103d0
 8000ebc:	20000a14 	.word	0x20000a14
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40021c00 	.word	0x40021c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	08010330 	.word	0x08010330
 8000ed0:	2000045c 	.word	0x2000045c
 8000ed4:	20000414 	.word	0x20000414
 8000ed8:	0801033c 	.word	0x0801033c
 8000edc:	20000a38 	.word	0x20000a38

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00e fd2e 	bl	800f950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f04:	f007 feac 	bl	8008c60 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f38:	2309      	movs	r3, #9
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f50:	2319      	movs	r3, #25
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f5e:	2309      	movs	r3, #9
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 feda 	bl	8008d20 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f72:	f001 ff25 	bl	8002dc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f76:	f007 fe83 	bl	8008c80 <HAL_PWREx_EnableOverDrive>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f80:	f001 ff1e 	bl	8002dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2106      	movs	r1, #6
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f008 f960 	bl	8009268 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000fae:	f001 ff07 	bl	8002dc0 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	; 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a2      	sub	sp, #136	; 0x88
 8000fc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2284      	movs	r2, #132	; 0x84
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00e fcbd 	bl	800f950 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <PeriphCommonClock_Config+0x54>)
 8000fd8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fde:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f008 fb49 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 800100c:	f001 fed8 	bl	8002dc0 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3788      	adds	r7, #136	; 0x88
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	00200008 	.word	0x00200008

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x9c>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_ADC1_Init+0x98>)
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_ADC1_Init+0xa0>)
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_ADC1_Init+0x98>)
 800106a:	2201      	movs	r2, #1
 800106c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001078:	2201      	movs	r2, #1
 800107a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC1_Init+0x98>)
 800107e:	f004 fc73 	bl	8005968 <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001088:	f001 fe9a 	bl	8002dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC1_Init+0x98>)
 800109e:	f004 ff3b 	bl	8005f18 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a8:	f001 fe8a 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000414 	.word	0x20000414
 80010b8:	40012000 	.word	0x40012000
 80010bc:	0f000001 	.word	0x0f000001

080010c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC3_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_ADC3_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC3_Init+0x98>)
 80010da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC3_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC3_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_ADC3_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC3_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ADC3_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_ADC3_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_ADC3_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC3_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC3_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC3_Init+0x98>)
 8001122:	f004 fc21 	bl	8005968 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800112c:	f001 fe48 	bl	8002dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001130:	2306      	movs	r3, #6
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_ADC3_Init+0x98>)
 8001142:	f004 fee9 	bl	8005f18 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800114c:	f001 fe38 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000045c 	.word	0x2000045c
 800115c:	40012200 	.word	0x40012200
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DAC_Init+0x50>)
 8001176:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_DAC_Init+0x4c>)
 800117a:	f005 fa09 	bl	8006590 <HAL_DAC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001184:	f001 fe1c 	bl	8002dc0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001198:	f005 fa80 	bl	800669c <HAL_DAC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011a2:	f001 fe0d 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200004a4 	.word	0x200004a4
 80011b4:	40007400 	.word	0x40007400

080011b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <MX_DMA2D_Init+0x60>)
 80011c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ee:	f005 fcff 	bl	8006bf0 <HAL_DMA2D_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011f8:	f001 fde2 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011fc:	2101      	movs	r1, #1
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DMA2D_Init+0x5c>)
 8001200:	f005 ff64 	bl	80070cc <HAL_DMA2D_ConfigLayer>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800120a:	f001 fdd9 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200004b8 	.word	0x200004b8
 8001218:	4002b000 	.word	0x4002b000

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_I2C1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <MX_I2C1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_I2C1_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_I2C1_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_I2C1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_I2C1_Init+0x74>)
 8001258:	f006 fb50 	bl	80078fc <HAL_I2C_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001262:	f001 fdad 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_I2C1_Init+0x74>)
 800126a:	f007 f8e9 	bl	8008440 <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f001 fda4 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_I2C1_Init+0x74>)
 800127c:	f007 f92b 	bl	80084d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f001 fd9b 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200004f8 	.word	0x200004f8
 8001294:	40005400 	.word	0x40005400
 8001298:	00c0eaff 	.word	0x00c0eaff

0800129c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C3_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C3_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C3_Init+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d8:	f006 fb10 	bl	80078fc <HAL_I2C_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f001 fd6d 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ea:	f007 f8a9 	bl	8008440 <HAL_I2CEx_ConfigAnalogFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f001 fd64 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_I2C3_Init+0x74>)
 80012fc:	f007 f8eb 	bl	80084d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001306:	f001 fd5b 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000544 	.word	0x20000544
 8001314:	40005c00 	.word	0x40005c00
 8001318:	00c0eaff 	.word	0x00c0eaff

0800131c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2234      	movs	r2, #52	; 0x34
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00e fb11 	bl	800f950 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001330:	4a3a      	ldr	r2, [pc, #232]	; (800141c <MX_LTDC_Init+0x100>)
 8001332:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_LTDC_Init+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MX_LTDC_Init+0xfc>)
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001354:	2209      	movs	r2, #9
 8001356:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <MX_LTDC_Init+0xfc>)
 800135a:	2235      	movs	r2, #53	; 0x35
 800135c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001360:	220b      	movs	r2, #11
 8001362:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001366:	f240 2215 	movw	r2, #533	; 0x215
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <MX_LTDC_Init+0xfc>)
 800136e:	f240 121b 	movw	r2, #283	; 0x11b
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001376:	f240 2235 	movw	r2, #565	; 0x235
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_LTDC_Init+0xfc>)
 800137e:	f240 121d 	movw	r2, #285	; 0x11d
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_LTDC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MX_LTDC_Init+0xfc>)
 800139e:	f007 f8e7 	bl	8008570 <HAL_LTDC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013a8:	f001 fd0a 	bl	8002dc0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013c4:	23ff      	movs	r3, #255	; 0xff
 80013c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013d2:	2307      	movs	r3, #7
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001402:	f007 fa47 	bl	8008894 <HAL_LTDC_ConfigLayer>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800140c:	f001 fcd8 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000590 	.word	0x20000590
 800141c:	40016800 	.word	0x40016800

08001420 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_RNG_Init+0x20>)
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <MX_RNG_Init+0x24>)
 8001428:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_RNG_Init+0x20>)
 800142c:	f008 fd24 	bl	8009e78 <HAL_RNG_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001436:	f001 fcc3 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000638 	.word	0x20000638
 8001444:	50060800 	.word	0x50060800

08001448 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b092      	sub	sp, #72	; 0x48
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800144e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	222c      	movs	r2, #44	; 0x2c
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00e fa70 	bl	800f950 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <MX_RTC_Init+0x144>)
 8001472:	4a47      	ldr	r2, [pc, #284]	; (8001590 <MX_RTC_Init+0x148>)
 8001474:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_RTC_Init+0x144>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <MX_RTC_Init+0x144>)
 800147e:	227f      	movs	r2, #127	; 0x7f
 8001480:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_RTC_Init+0x144>)
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <MX_RTC_Init+0x144>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_RTC_Init+0x144>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <MX_RTC_Init+0x144>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <MX_RTC_Init+0x144>)
 800149c:	f008 fdd8 	bl	800a050 <HAL_RTC_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80014a6:	f001 fc8b 	bl	8002dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c8:	2201      	movs	r2, #1
 80014ca:	4619      	mov	r1, r3
 80014cc:	482f      	ldr	r0, [pc, #188]	; (800158c <MX_RTC_Init+0x144>)
 80014ce:	f008 fe51 	bl	800a174 <HAL_RTC_SetTime>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014d8:	f001 fc72 	bl	8002dc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	2201      	movs	r2, #1
 80014fa:	4619      	mov	r1, r3
 80014fc:	4823      	ldr	r0, [pc, #140]	; (800158c <MX_RTC_Init+0x144>)
 80014fe:	f008 fef7 	bl	800a2f0 <HAL_RTC_SetDate>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001508:	f001 fc5a 	bl	8002dc0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800150c:	2300      	movs	r3, #0
 800150e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001510:	2300      	movs	r3, #0
 8001512:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001514:	2300      	movs	r3, #0
 8001516:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001530:	2301      	movs	r3, #1
 8001532:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_RTC_Init+0x144>)
 8001544:	f008 ff7c 	bl	800a440 <HAL_RTC_SetAlarm>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800154e:	f001 fc37 	bl	8002dc0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	; (800158c <MX_RTC_Init+0x144>)
 8001560:	f008 ff6e 	bl	800a440 <HAL_RTC_SetAlarm>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800156a:	f001 fc29 	bl	8002dc0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800156e:	2202      	movs	r2, #2
 8001570:	2100      	movs	r1, #0
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_RTC_Init+0x144>)
 8001574:	f009 f8ee 	bl	800a754 <HAL_RTCEx_SetTimeStamp>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800157e:	f001 fc1f 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3748      	adds	r7, #72	; 0x48
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000648 	.word	0x20000648
 8001590:	40002800 	.word	0x40002800

08001594 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_SPI2_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <MX_SPI2_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_SPI2_Init+0x74>)
 80015a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_SPI2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_SPI2_Init+0x74>)
 80015ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_SPI2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_SPI2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_SPI2_Init+0x74>)
 80015c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_SPI2_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_SPI2_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_SPI2_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_SPI2_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_SPI2_Init+0x74>)
 80015e2:	2207      	movs	r2, #7
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_SPI2_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_SPI2_Init+0x74>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_SPI2_Init+0x74>)
 80015f4:	f009 f995 	bl	800a922 <HAL_SPI_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015fe:	f001 fbdf 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000668 	.word	0x20000668
 800160c:	40003800 	.word	0x40003800

08001610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <MX_TIM1_Init+0xa4>)
 8001632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM1_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_TIM1_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165a:	4815      	ldr	r0, [pc, #84]	; (80016b0 <MX_TIM1_Init+0xa0>)
 800165c:	f009 fa0c 	bl	800aa78 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001666:	f001 fbab 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001678:	f009 fbee 	bl	800ae58 <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001682:	f001 fb9d 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_TIM1_Init+0xa0>)
 8001698:	f009 fe0a 	bl	800b2b0 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016a2:	f001 fb8d 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200006cc 	.word	0x200006cc
 80016b4:	40010000 	.word	0x40010000

080016b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM2_Init+0x98>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM2_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM2_Init+0x98>)
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_TIM2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_TIM2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <MX_TIM2_Init+0x98>)
 8001700:	f009 f9ba 	bl	800aa78 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800170a:	f001 fb59 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM2_Init+0x98>)
 800171c:	f009 fb9c 	bl	800ae58 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001726:	f001 fb4b 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_TIM2_Init+0x98>)
 8001738:	f009 fdba 	bl	800b2b0 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001742:	f001 fb3d 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000718 	.word	0x20000718

08001754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_TIM3_Init+0x94>)
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <MX_TIM3_Init+0x98>)
 8001776:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <MX_TIM3_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM3_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_TIM3_Init+0x94>)
 8001786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_TIM3_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM3_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_TIM3_Init+0x94>)
 800179a:	f009 f96d 	bl	800aa78 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017a4:	f001 fb0c 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_TIM3_Init+0x94>)
 80017b6:	f009 fb4f 	bl	800ae58 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017c0:	f001 fafe 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_TIM3_Init+0x94>)
 80017d2:	f009 fd6d 	bl	800b2b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f001 faf0 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000764 	.word	0x20000764
 80017ec:	40000400 	.word	0x40000400

080017f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_TIM5_Init+0x94>)
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <MX_TIM5_Init+0x98>)
 8001812:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_TIM5_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM5_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM5_Init+0x94>)
 8001822:	f04f 32ff 	mov.w	r2, #4294967295
 8001826:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_TIM5_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_TIM5_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_TIM5_Init+0x94>)
 8001836:	f009 f91f 	bl	800aa78 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001840:	f001 fabe 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <MX_TIM5_Init+0x94>)
 8001852:	f009 fb01 	bl	800ae58 <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800185c:	f001 fab0 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_TIM5_Init+0x94>)
 800186e:	f009 fd1f 	bl	800b2b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001878:	f001 faa2 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200007b0 	.word	0x200007b0
 8001888:	40000c00 	.word	0x40000c00

0800188c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <MX_TIM8_Init+0xa0>)
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <MX_TIM8_Init+0xa4>)
 80018ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_TIM8_Init+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM8_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_TIM8_Init+0xa0>)
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_TIM8_Init+0xa0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM8_Init+0xa0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM8_Init+0xa0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <MX_TIM8_Init+0xa0>)
 80018d8:	f009 f8ce 	bl	800aa78 <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80018e2:	f001 fa6d 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <MX_TIM8_Init+0xa0>)
 80018f4:	f009 fab0 	bl	800ae58 <HAL_TIM_ConfigClockSource>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80018fe:	f001 fa5f 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_TIM8_Init+0xa0>)
 8001914:	f009 fccc 	bl	800b2b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800191e:	f001 fa4f 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200007fc 	.word	0x200007fc
 8001930:	40010400 	.word	0x40010400

08001934 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_UART7_Init+0x58>)
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <MX_UART7_Init+0x5c>)
 800193c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_UART7_Init+0x58>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_UART7_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_UART7_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_UART7_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_UART7_Init+0x58>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_UART7_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_UART7_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_UART7_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_UART7_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_UART7_Init+0x58>)
 8001978:	f009 fd46 	bl	800b408 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001982:	f001 fa1d 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000848 	.word	0x20000848
 8001990:	40007800 	.word	0x40007800

08001994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_USART1_UART_Init+0x58>)
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <MX_USART1_UART_Init+0x5c>)
 800199c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_USART1_UART_Init+0x58>)
 80019d8:	f009 fd16 	bl	800b408 <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019e2:	f001 f9ed 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200008cc 	.word	0x200008cc
 80019f0:	40011000 	.word	0x40011000

080019f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <MX_USART6_UART_Init+0x5c>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART6_UART_Init+0x58>)
 8001a38:	f009 fce6 	bl	800b408 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001a42:	f001 f9bd 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000950 	.word	0x20000950
 8001a50:	40011400 	.word	0x40011400

08001a54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_FMC_Init+0x98>)
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <MX_FMC_Init+0x9c>)
 8001a70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_FMC_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_FMC_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_FMC_Init+0x98>)
 8001a80:	2204      	movs	r2, #4
 8001a82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_FMC_Init+0x98>)
 8001a86:	2210      	movs	r2, #16
 8001a88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_FMC_Init+0x98>)
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_FMC_Init+0x98>)
 8001a92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_FMC_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_FMC_Init+0x98>)
 8001aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_FMC_Init+0x98>)
 8001aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_FMC_Init+0x98>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001abc:	2304      	movs	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_FMC_Init+0x98>)
 8001ad6:	f008 fe93 	bl	800a800 <HAL_SDRAM_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ae0:	f001 f96e 	bl	8002dc0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200009d4 	.word	0x200009d4
 8001af0:	a0000140 	.word	0xa0000140

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b090      	sub	sp, #64	; 0x40
 8001af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0a:	4baf      	ldr	r3, [pc, #700]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4aae      	ldr	r2, [pc, #696]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4bac      	ldr	r3, [pc, #688]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b22:	4ba9      	ldr	r3, [pc, #676]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4aa8      	ldr	r2, [pc, #672]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4ba6      	ldr	r3, [pc, #664]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4ba3      	ldr	r3, [pc, #652]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4aa2      	ldr	r2, [pc, #648]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4ba0      	ldr	r3, [pc, #640]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a9c      	ldr	r2, [pc, #624]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b9a      	ldr	r3, [pc, #616]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b97      	ldr	r3, [pc, #604]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a96      	ldr	r2, [pc, #600]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a90      	ldr	r2, [pc, #576]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a8a      	ldr	r2, [pc, #552]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a84      	ldr	r2, [pc, #528]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a7e      	ldr	r2, [pc, #504]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be2:	4b79      	ldr	r3, [pc, #484]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a78      	ldr	r2, [pc, #480]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <MX_GPIO_Init+0x2d4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2160      	movs	r1, #96	; 0x60
 8001c16:	486d      	ldr	r0, [pc, #436]	; (8001dcc <MX_GPIO_Init+0x2d8>)
 8001c18:	f005 fe56 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2120      	movs	r1, #32
 8001c20:	486b      	ldr	r0, [pc, #428]	; (8001dd0 <MX_GPIO_Init+0x2dc>)
 8001c22:	f005 fe51 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2108      	movs	r1, #8
 8001c2a:	4869      	ldr	r0, [pc, #420]	; (8001dd0 <MX_GPIO_Init+0x2dc>)
 8001c2c:	f005 fe4c 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2108      	movs	r1, #8
 8001c34:	4867      	ldr	r0, [pc, #412]	; (8001dd4 <MX_GPIO_Init+0x2e0>)
 8001c36:	f005 fe47 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c40:	4865      	ldr	r0, [pc, #404]	; (8001dd8 <MX_GPIO_Init+0x2e4>)
 8001c42:	f005 fe41 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c46:	2200      	movs	r2, #0
 8001c48:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001c4c:	4863      	ldr	r0, [pc, #396]	; (8001ddc <MX_GPIO_Init+0x2e8>)
 8001c4e:	f005 fe3b 	bl	80078c8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	21c8      	movs	r1, #200	; 0xc8
 8001c56:	4862      	ldr	r0, [pc, #392]	; (8001de0 <MX_GPIO_Init+0x2ec>)
 8001c58:	f005 fe36 	bl	80078c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4857      	ldr	r0, [pc, #348]	; (8001dcc <MX_GPIO_Init+0x2d8>)
 8001c70:	f005 fb5a 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c74:	2304      	movs	r3, #4
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c84:	2309      	movs	r3, #9
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	484f      	ldr	r0, [pc, #316]	; (8001dcc <MX_GPIO_Init+0x2d8>)
 8001c90:	f005 fb4a 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c94:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca6:	230b      	movs	r3, #11
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	484b      	ldr	r0, [pc, #300]	; (8001de0 <MX_GPIO_Init+0x2ec>)
 8001cb2:	f005 fb39 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001cb6:	f643 0323 	movw	r3, #14371	; 0x3823
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cc8:	230a      	movs	r3, #10
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4844      	ldr	r0, [pc, #272]	; (8001de4 <MX_GPIO_Init+0x2f0>)
 8001cd4:	f005 fb28 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4837      	ldr	r0, [pc, #220]	; (8001dd0 <MX_GPIO_Init+0x2dc>)
 8001cf4:	f005 fb18 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001cf8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	4834      	ldr	r0, [pc, #208]	; (8001de8 <MX_GPIO_Init+0x2f4>)
 8001d16:	f005 fb07 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001d1a:	f248 1340 	movw	r3, #33088	; 0x8140
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482f      	ldr	r0, [pc, #188]	; (8001dec <MX_GPIO_Init+0x2f8>)
 8001d30:	f005 fafa 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4820      	ldr	r0, [pc, #128]	; (8001dcc <MX_GPIO_Init+0x2d8>)
 8001d4c:	f005 faec 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d60:	230a      	movs	r3, #10
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <MX_GPIO_Init+0x2f0>)
 8001d6c:	f005 fadc 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d82:	4619      	mov	r1, r3
 8001d84:	481a      	ldr	r0, [pc, #104]	; (8001df0 <MX_GPIO_Init+0x2fc>)
 8001d86:	f005 facf 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_GPIO_Init+0x2dc>)
 8001da0:	f005 fac2 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001da4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001db6:	230a      	movs	r3, #10
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <MX_GPIO_Init+0x2f8>)
 8001dc2:	f005 fab1 	bl	8007328 <HAL_GPIO_Init>
 8001dc6:	e015      	b.n	8001df4 <MX_GPIO_Init+0x300>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40022800 	.word	0x40022800
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021c00 	.word	0x40021c00
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001df4:	23f0      	movs	r3, #240	; 0xf0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e04:	230a      	movs	r3, #10
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4891      	ldr	r0, [pc, #580]	; (8002054 <MX_GPIO_Init+0x560>)
 8001e10:	f005 fa8a 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e26:	230a      	movs	r3, #10
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4889      	ldr	r0, [pc, #548]	; (8002058 <MX_GPIO_Init+0x564>)
 8001e32:	f005 fa79 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e36:	2328      	movs	r3, #40	; 0x28
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4883      	ldr	r0, [pc, #524]	; (800205c <MX_GPIO_Init+0x568>)
 8001e4e:	f005 fa6b 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	487e      	ldr	r0, [pc, #504]	; (8002060 <MX_GPIO_Init+0x56c>)
 8001e68:	f005 fa5e 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4878      	ldr	r0, [pc, #480]	; (8002064 <MX_GPIO_Init+0x570>)
 8001e84:	f005 fa50 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001e88:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	486e      	ldr	r0, [pc, #440]	; (8002058 <MX_GPIO_Init+0x564>)
 8001e9e:	f005 fa43 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4869      	ldr	r0, [pc, #420]	; (800205c <MX_GPIO_Init+0x568>)
 8001eb6:	f005 fa37 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4861      	ldr	r0, [pc, #388]	; (800205c <MX_GPIO_Init+0x568>)
 8001ed6:	f005 fa27 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001eda:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eec:	4619      	mov	r1, r3
 8001eee:	485e      	ldr	r0, [pc, #376]	; (8002068 <MX_GPIO_Init+0x574>)
 8001ef0:	f005 fa1a 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4851      	ldr	r0, [pc, #324]	; (8002054 <MX_GPIO_Init+0x560>)
 8001f0e:	f005 fa0b 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001f12:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	484f      	ldr	r0, [pc, #316]	; (8002068 <MX_GPIO_Init+0x574>)
 8001f2c:	f005 f9fc 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f44:	4619      	mov	r1, r3
 8001f46:	4843      	ldr	r0, [pc, #268]	; (8002054 <MX_GPIO_Init+0x560>)
 8001f48:	f005 f9ee 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	4840      	ldr	r0, [pc, #256]	; (8002068 <MX_GPIO_Init+0x574>)
 8001f68:	f005 f9de 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001f6c:	23c8      	movs	r3, #200	; 0xc8
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4835      	ldr	r0, [pc, #212]	; (8002058 <MX_GPIO_Init+0x564>)
 8001f84:	f005 f9d0 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f98:	230a      	movs	r3, #10
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	482f      	ldr	r0, [pc, #188]	; (8002060 <MX_GPIO_Init+0x56c>)
 8001fa4:	f005 f9c0 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fa8:	2332      	movs	r3, #50	; 0x32
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb8:	230b      	movs	r3, #11
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4827      	ldr	r0, [pc, #156]	; (8002060 <MX_GPIO_Init+0x56c>)
 8001fc4:	f005 f9b0 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fd8:	2309      	movs	r3, #9
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <MX_GPIO_Init+0x578>)
 8001fe4:	f005 f9a0 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001fe8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002002:	4619      	mov	r1, r3
 8002004:	4815      	ldr	r0, [pc, #84]	; (800205c <MX_GPIO_Init+0x568>)
 8002006:	f005 f98f 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800200a:	2386      	movs	r3, #134	; 0x86
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800201a:	230b      	movs	r3, #11
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	4812      	ldr	r0, [pc, #72]	; (8002070 <MX_GPIO_Init+0x57c>)
 8002026:	f005 f97f 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800202a:	2328      	movs	r3, #40	; 0x28
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800203a:	230a      	movs	r3, #10
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002042:	4619      	mov	r1, r3
 8002044:	480a      	ldr	r0, [pc, #40]	; (8002070 <MX_GPIO_Init+0x57c>)
 8002046:	f005 f96f 	bl	8007328 <HAL_GPIO_Init>

}
 800204a:	bf00      	nop
 800204c:	3740      	adds	r7, #64	; 0x40
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000
 8002058:	40021800 	.word	0x40021800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40020800 	.word	0x40020800
 8002064:	40022800 	.word	0x40022800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40020400 	.word	0x40020400
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	uint8_t Message[2];

	if(rxbuffer[0]=='a'){ HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin,1);}
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b61      	cmp	r3, #97	; 0x61
 8002082:	d105      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x1c>
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208a:	4819      	ldr	r0, [pc, #100]	; (80020f0 <HAL_UART_RxCpltCallback+0x7c>)
 800208c:	f005 fc1c 	bl	80078c8 <HAL_GPIO_WritePin>
	if(rxbuffer[0]=='e'){ HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin,0);}
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b65      	cmp	r3, #101	; 0x65
 8002096:	d105      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x30>
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <HAL_UART_RxCpltCallback+0x7c>)
 80020a0:	f005 fc12 	bl	80078c8 <HAL_GPIO_WritePin>

	if((rxbuffer[0] == 'z') || (rxbuffer[0] == 'q') || (rxbuffer[0] =='s') || (rxbuffer[0] == 'd')){
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b7a      	cmp	r3, #122	; 0x7a
 80020aa:	d00b      	beq.n	80020c4 <HAL_UART_RxCpltCallback+0x50>
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b71      	cmp	r3, #113	; 0x71
 80020b2:	d007      	beq.n	80020c4 <HAL_UART_RxCpltCallback+0x50>
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b73      	cmp	r3, #115	; 0x73
 80020ba:	d003      	beq.n	80020c4 <HAL_UART_RxCpltCallback+0x50>
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b64      	cmp	r3, #100	; 0x64
 80020c2:	d10a      	bne.n	80020da <HAL_UART_RxCpltCallback+0x66>
		Message[0] = rxbuffer[0];
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	733b      	strb	r3, [r7, #12]
		xQueueSendFromISR(myQueue01Handle, &Message, 0);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_UART_RxCpltCallback+0x80>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f107 010c 	add.w	r1, r7, #12
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	f00b f991 	bl	800d3fc <xQueueGenericSendFromISR>
	}

	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 80020da:	2201      	movs	r2, #1
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <HAL_UART_RxCpltCallback+0x84>)
 80020e0:	f009 f9e0 	bl	800b4a4 <HAL_UART_Receive_IT>
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000a24 	.word	0x20000a24
 80020f0:	40021c00 	.word	0x40021c00
 80020f4:	20000a18 	.word	0x20000a18
 80020f8:	200008cc 	.word	0x200008cc

080020fc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002104:	2001      	movs	r0, #1
 8002106:	f00a fd4c 	bl	800cba2 <osDelay>
 800210a:	e7fb      	b.n	8002104 <StartDefaultTask+0x8>

0800210c <tache_snake>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_snake */
void tache_snake(void const * argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b092      	sub	sp, #72	; 0x48
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tache_snake */
	TickType_t xLastWakeTimeS;
	const TickType_t periodS = 120;
 8002114:	2378      	movs	r3, #120	; 0x78
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t jeu,cas;
	int blocage=1;
 8002118:	2301      	movs	r3, #1
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t xSnake=200,ySnake=200,x0Snake=xSnake,y0Snake=ySnake;
 800211c:	23c8      	movs	r3, #200	; 0xc8
 800211e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002120:	23c8      	movs	r3, #200	; 0xc8
 8002122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002124:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002126:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800212a:	873b      	strh	r3, [r7, #56]	; 0x38

	int32_t joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800213a:	2301      	movs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
	sConfig.Channel = ADC_CHANNEL_8;
 8002142:	2308      	movs	r3, #8
 8002144:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	489b      	ldr	r0, [pc, #620]	; (80023bc <tache_snake+0x2b0>)
 800214e:	f003 fee3 	bl	8005f18 <HAL_ADC_ConfigChannel>

	xLastWakeTimeS = xTaskGetTickCount();
 8002152:	f00c fa49 	bl	800e5e8 <xTaskGetTickCount>
 8002156:	4603      	mov	r3, r0
 8002158:	623b      	str	r3, [r7, #32]
	/* Infinite loop */
	for(;;)
	{

		joystick_v=-10;
 800215a:	f06f 0309 	mvn.w	r3, #9
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
		joystick_h=-10;
 8002160:	f06f 0309 	mvn.w	r3, #9
 8002164:	627b      	str	r3, [r7, #36]	; 0x24

		if (longueur>0){taskENTER_CRITICAL(); v=lSnake; taskEXIT_CRITICAL();}
 8002166:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <tache_snake+0x2b4>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <tache_snake+0x72>
 800216e:	f00d f8a5 	bl	800f2bc <vPortEnterCritical>
 8002172:	4b94      	ldr	r3, [pc, #592]	; (80023c4 <tache_snake+0x2b8>)
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	4b94      	ldr	r3, [pc, #592]	; (80023c8 <tache_snake+0x2bc>)
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	f00d f8d3 	bl	800f324 <vPortExitCritical>

		osMutexWait(myMutex01Handle, portMAX_DELAY);
 800217e:	4b93      	ldr	r3, [pc, #588]	; (80023cc <tache_snake+0x2c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	4618      	mov	r0, r3
 8002188:	f00a fd38 	bl	800cbfc <osMutexWait>

		if (longueur==0){
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <tache_snake+0x2b4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d14b      	bne.n	800222c <tache_snake+0x120>
			BSP_LCD_SelectLayer(0);
 8002194:	2000      	movs	r0, #0
 8002196:	f001 f8b5 	bl	8003304 <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800219a:	f04f 30ff 	mov.w	r0, #4294967295
 800219e:	f001 f8ff 	bl	80033a0 <BSP_LCD_SetTextColor>

			switch (dir[0]){
 80021a2:	4b8b      	ldr	r3, [pc, #556]	; (80023d0 <tache_snake+0x2c4>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d840      	bhi.n	800222e <tache_snake+0x122>
 80021ac:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <tache_snake+0xa8>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	080021c5 	.word	0x080021c5
 80021b8:	080021f9 	.word	0x080021f9
 80021bc:	080021df 	.word	0x080021df
 80021c0:	08002213 	.word	0x08002213

			case 1  :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 80021c4:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <tache_snake+0x2c8>)
 80021c6:	8818      	ldrh	r0, [r3, #0]
 80021c8:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <tache_snake+0x2c8>)
 80021ca:	8859      	ldrh	r1, [r3, #2]
 80021cc:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <tache_snake+0x2b8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <tache_snake+0x2cc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f001 fcd2 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 80021dc:	e027      	b.n	800222e <tache_snake+0x122>
			case 3 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <tache_snake+0x2c8>)
 80021e0:	8818      	ldrh	r0, [r3, #0]
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <tache_snake+0x2c8>)
 80021e4:	8859      	ldrh	r1, [r3, #2]
 80021e6:	4b77      	ldr	r3, [pc, #476]	; (80023c4 <tache_snake+0x2b8>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <tache_snake+0x2cc>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f001 fcc5 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 80021f6:	e01a      	b.n	800222e <tache_snake+0x122>
			case 2 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 80021f8:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <tache_snake+0x2c8>)
 80021fa:	8818      	ldrh	r0, [r3, #0]
 80021fc:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <tache_snake+0x2c8>)
 80021fe:	8859      	ldrh	r1, [r3, #2]
 8002200:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <tache_snake+0x2cc>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <tache_snake+0x2b8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f001 fcb8 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002210:	e00d      	b.n	800222e <tache_snake+0x122>
			case 4 :
				BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <tache_snake+0x2c8>)
 8002214:	8818      	ldrh	r0, [r3, #0]
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <tache_snake+0x2c8>)
 8002218:	8859      	ldrh	r1, [r3, #2]
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <tache_snake+0x2cc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <tache_snake+0x2b8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	f001 fcab 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 800222a:	e000      	b.n	800222e <tache_snake+0x122>

			}
		}
 800222c:	bf00      	nop


		   osMutexRelease(myMutex01Handle);
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <tache_snake+0x2c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f00a fd30 	bl	800cc98 <osMutexRelease>

		HAL_ADC_Start(&hadc3);
 8002238:	4860      	ldr	r0, [pc, #384]	; (80023bc <tache_snake+0x2b0>)
 800223a:	f003 fbd9 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 800223e:	bf00      	nop
 8002240:	2164      	movs	r1, #100	; 0x64
 8002242:	485e      	ldr	r0, [pc, #376]	; (80023bc <tache_snake+0x2b0>)
 8002244:	f003 fca2 	bl	8005b8c <HAL_ADC_PollForConversion>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f8      	bne.n	8002240 <tache_snake+0x134>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 800224e:	485b      	ldr	r0, [pc, #364]	; (80023bc <tache_snake+0x2b0>)
 8002250:	f003 fe37 	bl	8005ec2 <HAL_ADC_GetValue>
 8002254:	4603      	mov	r3, r0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28

		HAL_ADC_Start(&hadc1);
 8002258:	4860      	ldr	r0, [pc, #384]	; (80023dc <tache_snake+0x2d0>)
 800225a:	f003 fbc9 	bl	80059f0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800225e:	bf00      	nop
 8002260:	2164      	movs	r1, #100	; 0x64
 8002262:	485e      	ldr	r0, [pc, #376]	; (80023dc <tache_snake+0x2d0>)
 8002264:	f003 fc92 	bl	8005b8c <HAL_ADC_PollForConversion>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f8      	bne.n	8002260 <tache_snake+0x154>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 800226e:	485b      	ldr	r0, [pc, #364]	; (80023dc <tache_snake+0x2d0>)
 8002270:	f003 fe27 	bl	8005ec2 <HAL_ADC_GetValue>
 8002274:	4603      	mov	r3, r0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24


		if(joystick_h < 1000){
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800227e:	da02      	bge.n	8002286 <tache_snake+0x17a>
			cas='d';
 8002280:	2364      	movs	r3, #100	; 0x64
 8002282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_h > 3000){
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800228c:	4293      	cmp	r3, r2
 800228e:	dd02      	ble.n	8002296 <tache_snake+0x18a>
			cas='q';
 8002290:	2371      	movs	r3, #113	; 0x71
 8002292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v < 1000){
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800229c:	da02      	bge.n	80022a4 <tache_snake+0x198>
			cas='s';
 800229e:	2373      	movs	r3, #115	; 0x73
 80022a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v > 3000){
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022aa:	4293      	cmp	r3, r2
 80022ac:	dd02      	ble.n	80022b4 <tache_snake+0x1a8>
			cas='z';
 80022ae:	237a      	movs	r3, #122	; 0x7a
 80022b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		if(joystick_v==-10 && joystick_h==-10) {
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	f113 0f0a 	cmn.w	r3, #10
 80022ba:	d106      	bne.n	80022ca <tache_snake+0x1be>
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f113 0f0a 	cmn.w	r3, #10
 80022c2:	d102      	bne.n	80022ca <tache_snake+0x1be>
			cas='n';
 80022c4:	236e      	movs	r3, #110	; 0x6e
 80022c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

		if (dir[0]==1){
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <tache_snake+0x2c4>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11a      	bne.n	8002308 <tache_snake+0x1fc>
			switch(cas){
 80022d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d008      	beq.n	80022ec <tache_snake+0x1e0>
 80022da:	2b71      	cmp	r3, #113	; 0x71
 80022dc:	d10d      	bne.n	80022fa <tache_snake+0x1ee>
			case 'q':
				xSnake-=lSnake;
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <tache_snake+0x2b8>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
				break;
 80022ea:	e00e      	b.n	800230a <tache_snake+0x1fe>
			case 'd':
				xSnake+=lSnake;
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <tache_snake+0x2b8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80022f4:	4413      	add	r3, r2
 80022f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
				break;
 80022f8:	e007      	b.n	800230a <tache_snake+0x1fe>
			default :
				ySnake-=v;
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <tache_snake+0x2bc>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002306:	e000      	b.n	800230a <tache_snake+0x1fe>
			}
		}
 8002308:	bf00      	nop

		if (dir[0]==3){
 800230a:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <tache_snake+0x2c4>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d11a      	bne.n	8002348 <tache_snake+0x23c>
				switch(cas){
 8002312:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d008      	beq.n	800232c <tache_snake+0x220>
 800231a:	2b71      	cmp	r3, #113	; 0x71
 800231c:	d10d      	bne.n	800233a <tache_snake+0x22e>
				case 'q':
					xSnake-=lSnake;
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <tache_snake+0x2b8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	87fb      	strh	r3, [r7, #62]	; 0x3e
					break;
 800232a:	e00e      	b.n	800234a <tache_snake+0x23e>
				case 'd':
					xSnake+=lSnake;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <tache_snake+0x2b8>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b29a      	uxth	r2, r3
 8002332:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002334:	4413      	add	r3, r2
 8002336:	87fb      	strh	r3, [r7, #62]	; 0x3e
					break;
 8002338:	e007      	b.n	800234a <tache_snake+0x23e>
				default :
					ySnake+=v;
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <tache_snake+0x2bc>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b29a      	uxth	r2, r3
 8002340:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002342:	4413      	add	r3, r2
 8002344:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002346:	e000      	b.n	800234a <tache_snake+0x23e>
				}
			}
 8002348:	bf00      	nop

		if (dir[0]==2){
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <tache_snake+0x2c4>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d11a      	bne.n	8002388 <tache_snake+0x27c>
			switch(cas){
 8002352:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002356:	2b73      	cmp	r3, #115	; 0x73
 8002358:	d008      	beq.n	800236c <tache_snake+0x260>
 800235a:	2b7a      	cmp	r3, #122	; 0x7a
 800235c:	d10d      	bne.n	800237a <tache_snake+0x26e>
			case 'z':
				ySnake-=LSnake;
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <tache_snake+0x2cc>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 800236a:	e00e      	b.n	800238a <tache_snake+0x27e>
			case 's':
				ySnake+=LSnake;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <tache_snake+0x2cc>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b29a      	uxth	r2, r3
 8002372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002374:	4413      	add	r3, r2
 8002376:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 8002378:	e007      	b.n	800238a <tache_snake+0x27e>
			default :
				xSnake+=v;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <tache_snake+0x2bc>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b29a      	uxth	r2, r3
 8002380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002382:	4413      	add	r3, r2
 8002384:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002386:	e000      	b.n	800238a <tache_snake+0x27e>
			}
		}
 8002388:	bf00      	nop

		if (dir[0]==4){
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <tache_snake+0x2c4>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d12d      	bne.n	80023ee <tache_snake+0x2e2>
			switch(cas){
 8002392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002396:	2b73      	cmp	r3, #115	; 0x73
 8002398:	d008      	beq.n	80023ac <tache_snake+0x2a0>
 800239a:	2b7a      	cmp	r3, #122	; 0x7a
 800239c:	d120      	bne.n	80023e0 <tache_snake+0x2d4>
			case 'z':
				ySnake-=LSnake;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <tache_snake+0x2cc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 80023aa:	e021      	b.n	80023f0 <tache_snake+0x2e4>
			case 's':
				ySnake+=LSnake;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <tache_snake+0x2cc>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023b4:	4413      	add	r3, r2
 80023b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
				break;
 80023b8:	e01a      	b.n	80023f0 <tache_snake+0x2e4>
 80023ba:	bf00      	nop
 80023bc:	2000045c 	.word	0x2000045c
 80023c0:	20000a2e 	.word	0x20000a2e
 80023c4:	200000a8 	.word	0x200000a8
 80023c8:	200000ac 	.word	0x200000ac
 80023cc:	20000a20 	.word	0x20000a20
 80023d0:	20000080 	.word	0x20000080
 80023d4:	20000a34 	.word	0x20000a34
 80023d8:	200000a9 	.word	0x200000a9
 80023dc:	20000414 	.word	0x20000414
			default :
				xSnake-=v;
 80023e0:	4b98      	ldr	r3, [pc, #608]	; (8002644 <tache_snake+0x538>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80023ec:	e000      	b.n	80023f0 <tache_snake+0x2e4>
			}
		}
 80023ee:	bf00      	nop

		// collision avec le mur
		if ((xSnake<=0 || xSnake>=l_ecran-lSnake || ySnake<=0 || ySnake>=L_ecran-LSnake ) && blocage==1){
 80023f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d014      	beq.n	8002420 <tache_snake+0x314>
 80023f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80023f8:	4b93      	ldr	r3, [pc, #588]	; (8002648 <tache_snake+0x53c>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4b93      	ldr	r3, [pc, #588]	; (800264c <tache_snake+0x540>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	429a      	cmp	r2, r3
 8002406:	da0b      	bge.n	8002420 <tache_snake+0x314>
 8002408:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <tache_snake+0x314>
 800240e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002410:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <tache_snake+0x544>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <tache_snake+0x548>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	1acb      	subs	r3, r1, r3
 800241c:	429a      	cmp	r2, r3
 800241e:	db18      	blt.n	8002452 <tache_snake+0x346>
 8002420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <tache_snake+0x346>
			HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242c:	488a      	ldr	r0, [pc, #552]	; (8002658 <tache_snake+0x54c>)
 800242e:	f005 fa4b 	bl	80078c8 <HAL_GPIO_WritePin>
			blocage=0;
 8002432:	2300      	movs	r3, #0
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
			jeu=0;
 8002436:	2300      	movs	r3, #0
 8002438:	77fb      	strb	r3, [r7, #31]
			xSnake=x0Snake;
 800243a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800243c:	87fb      	strh	r3, [r7, #62]	; 0x3e
			ySnake=y0Snake;
 800243e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002440:	87bb      	strh	r3, [r7, #60]	; 0x3c
			xQueueSend(myQueue02Handle,&jeu,0);
 8002442:	4b86      	ldr	r3, [pc, #536]	; (800265c <tache_snake+0x550>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 011f 	add.w	r1, r7, #31
 800244a:	2300      	movs	r3, #0
 800244c:	2200      	movs	r2, #0
 800244e:	f00a fecf 	bl	800d1f0 <xQueueGenericSend>
		}

		switch(cas){
 8002452:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002456:	3b64      	subs	r3, #100	; 0x64
 8002458:	2b16      	cmp	r3, #22
 800245a:	d868      	bhi.n	800252e <tache_snake+0x422>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <tache_snake+0x358>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002509 	.word	0x08002509
 8002468:	0800252f 	.word	0x0800252f
 800246c:	0800252f 	.word	0x0800252f
 8002470:	0800252f 	.word	0x0800252f
 8002474:	0800252f 	.word	0x0800252f
 8002478:	0800252f 	.word	0x0800252f
 800247c:	0800252f 	.word	0x0800252f
 8002480:	0800252f 	.word	0x0800252f
 8002484:	0800252f 	.word	0x0800252f
 8002488:	0800252f 	.word	0x0800252f
 800248c:	0800252f 	.word	0x0800252f
 8002490:	0800252f 	.word	0x0800252f
 8002494:	0800252f 	.word	0x0800252f
 8002498:	080024c1 	.word	0x080024c1
 800249c:	0800252f 	.word	0x0800252f
 80024a0:	080024f1 	.word	0x080024f1
 80024a4:	0800252f 	.word	0x0800252f
 80024a8:	0800252f 	.word	0x0800252f
 80024ac:	0800252f 	.word	0x0800252f
 80024b0:	0800252f 	.word	0x0800252f
 80024b4:	0800252f 	.word	0x0800252f
 80024b8:	0800252f 	.word	0x0800252f
 80024bc:	080024d9 	.word	0x080024d9
		case 'q':
			if (dir[0] != 2){taskENTER_CRITICAL(); dir[0]=4; taskEXIT_CRITICAL();}
 80024c0:	4b67      	ldr	r3, [pc, #412]	; (8002660 <tache_snake+0x554>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d02b      	beq.n	8002520 <tache_snake+0x414>
 80024c8:	f00c fef8 	bl	800f2bc <vPortEnterCritical>
 80024cc:	4b64      	ldr	r3, [pc, #400]	; (8002660 <tache_snake+0x554>)
 80024ce:	2204      	movs	r2, #4
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	f00c ff27 	bl	800f324 <vPortExitCritical>
			break;
 80024d6:	e023      	b.n	8002520 <tache_snake+0x414>
		case 'z':
			if (dir[0] != 3){taskENTER_CRITICAL(); dir[0]=1; taskEXIT_CRITICAL();}
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <tache_snake+0x554>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d021      	beq.n	8002524 <tache_snake+0x418>
 80024e0:	f00c feec 	bl	800f2bc <vPortEnterCritical>
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <tache_snake+0x554>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	f00c ff1b 	bl	800f324 <vPortExitCritical>
			break;
 80024ee:	e019      	b.n	8002524 <tache_snake+0x418>
		case 's':
			if (dir[0] != 1){taskENTER_CRITICAL(); dir[0]=3; taskEXIT_CRITICAL();}
 80024f0:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <tache_snake+0x554>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d017      	beq.n	8002528 <tache_snake+0x41c>
 80024f8:	f00c fee0 	bl	800f2bc <vPortEnterCritical>
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <tache_snake+0x554>)
 80024fe:	2203      	movs	r2, #3
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	f00c ff0f 	bl	800f324 <vPortExitCritical>
			break;
 8002506:	e00f      	b.n	8002528 <tache_snake+0x41c>
		case 'd':
			if (dir[0] != 4){taskENTER_CRITICAL(); dir[0]=2; taskEXIT_CRITICAL();}
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <tache_snake+0x554>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d00d      	beq.n	800252c <tache_snake+0x420>
 8002510:	f00c fed4 	bl	800f2bc <vPortEnterCritical>
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <tache_snake+0x554>)
 8002516:	2202      	movs	r2, #2
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	f00c ff03 	bl	800f324 <vPortExitCritical>
			break;
 800251e:	e005      	b.n	800252c <tache_snake+0x420>
			break;
 8002520:	bf00      	nop
 8002522:	e004      	b.n	800252e <tache_snake+0x422>
			break;
 8002524:	bf00      	nop
 8002526:	e002      	b.n	800252e <tache_snake+0x422>
			break;
 8002528:	bf00      	nop
 800252a:	e000      	b.n	800252e <tache_snake+0x422>
			break;
 800252c:	bf00      	nop
		}

		for (int i=3;i<=longueur;i++){
 800252e:	2303      	movs	r3, #3
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	e03e      	b.n	80025b2 <tache_snake+0x4a6>
			//collision avec le corps
			if ((posYSnake[i]+LSnake>=ySnake) && (posYSnake[i]<=ySnake+LSnake) && (posXSnake[i]+lSnake>=xSnake) && (posXSnake[i]<=xSnake+lSnake)){
 8002534:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <tache_snake+0x558>)
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800253c:	461a      	mov	r2, r3
 800253e:	4b45      	ldr	r3, [pc, #276]	; (8002654 <tache_snake+0x548>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	441a      	add	r2, r3
 8002544:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002546:	429a      	cmp	r2, r3
 8002548:	db30      	blt.n	80025ac <tache_snake+0x4a0>
 800254a:	4a46      	ldr	r2, [pc, #280]	; (8002664 <tache_snake+0x558>)
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002552:	4619      	mov	r1, r3
 8002554:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002556:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <tache_snake+0x548>)
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4299      	cmp	r1, r3
 800255e:	dc25      	bgt.n	80025ac <tache_snake+0x4a0>
 8002560:	4a41      	ldr	r2, [pc, #260]	; (8002668 <tache_snake+0x55c>)
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002568:	461a      	mov	r2, r3
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <tache_snake+0x540>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	441a      	add	r2, r3
 8002570:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002572:	429a      	cmp	r2, r3
 8002574:	db1a      	blt.n	80025ac <tache_snake+0x4a0>
 8002576:	4a3c      	ldr	r2, [pc, #240]	; (8002668 <tache_snake+0x55c>)
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800257e:	4619      	mov	r1, r3
 8002580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <tache_snake+0x540>)
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4299      	cmp	r1, r3
 800258a:	dc0f      	bgt.n	80025ac <tache_snake+0x4a0>
				HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002592:	4831      	ldr	r0, [pc, #196]	; (8002658 <tache_snake+0x54c>)
 8002594:	f005 f998 	bl	80078c8 <HAL_GPIO_WritePin>
				jeu=0;
 8002598:	2300      	movs	r3, #0
 800259a:	77fb      	strb	r3, [r7, #31]
				xQueueSend(myQueue02Handle,&jeu,0);
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <tache_snake+0x550>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	f107 011f 	add.w	r1, r7, #31
 80025a4:	2300      	movs	r3, #0
 80025a6:	2200      	movs	r2, #0
 80025a8:	f00a fe22 	bl	800d1f0 <xQueueGenericSend>
		for (int i=3;i<=longueur;i++){
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	3301      	adds	r3, #1
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <tache_snake+0x560>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	4293      	cmp	r3, r2
 80025bc:	ddba      	ble.n	8002534 <tache_snake+0x428>
			}
		}


		//collision d objet
		if ((posObjet[1]+LObjet>=ySnake) && (posObjet[1]<=ySnake+LSnake) && (posObjet[0]+lObjet>=xSnake) && (posObjet[0]<=xSnake+lSnake)){
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <tache_snake+0x564>)
 80025c0:	885b      	ldrh	r3, [r3, #2]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <tache_snake+0x568>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	441a      	add	r2, r3
 80025ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025cc:	429a      	cmp	r2, r3
 80025ce:	db2b      	blt.n	8002628 <tache_snake+0x51c>
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <tache_snake+0x564>)
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	4619      	mov	r1, r3
 80025d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <tache_snake+0x548>)
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	4299      	cmp	r1, r3
 80025e0:	dc22      	bgt.n	8002628 <tache_snake+0x51c>
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <tache_snake+0x564>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <tache_snake+0x56c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	441a      	add	r2, r3
 80025ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80025f0:	429a      	cmp	r2, r3
 80025f2:	db19      	blt.n	8002628 <tache_snake+0x51c>
 80025f4:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <tache_snake+0x564>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80025fc:	4a13      	ldr	r2, [pc, #76]	; (800264c <tache_snake+0x540>)
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	4299      	cmp	r1, r3
 8002604:	dc10      	bgt.n	8002628 <tache_snake+0x51c>
			HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <tache_snake+0x54c>)
 800260e:	f005 f95b 	bl	80078c8 <HAL_GPIO_WritePin>
			jeu=1;
 8002612:	2301      	movs	r3, #1
 8002614:	77fb      	strb	r3, [r7, #31]
			xQueueSend(myQueue02Handle,&jeu,0);
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <tache_snake+0x550>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f107 011f 	add.w	r1, r7, #31
 800261e:	2300      	movs	r3, #0
 8002620:	2200      	movs	r2, #0
 8002622:	f00a fde5 	bl	800d1f0 <xQueueGenericSend>
 8002626:	e078      	b.n	800271a <tache_snake+0x60e>


		else
		{

			if(x0Snake != xSnake || y0Snake != ySnake){
 8002628:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800262a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800262c:	429a      	cmp	r2, r3
 800262e:	d103      	bne.n	8002638 <tache_snake+0x52c>
 8002630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002632:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002634:	429a      	cmp	r2, r3
 8002636:	d04c      	beq.n	80026d2 <tache_snake+0x5c6>
				taskENTER_CRITICAL();
 8002638:	f00c fe40 	bl	800f2bc <vPortEnterCritical>

						for (int i=longueur;i>=1;i--){
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <tache_snake+0x560>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	e039      	b.n	80026b8 <tache_snake+0x5ac>
 8002644:	200000ac 	.word	0x200000ac
 8002648:	200000ae 	.word	0x200000ae
 800264c:	200000a8 	.word	0x200000a8
 8002650:	200000b0 	.word	0x200000b0
 8002654:	200000a9 	.word	0x200000a9
 8002658:	40021c00 	.word	0x40021c00
 800265c:	20000a1c 	.word	0x20000a1c
 8002660:	20000080 	.word	0x20000080
 8002664:	20000058 	.word	0x20000058
 8002668:	20000030 	.word	0x20000030
 800266c:	20000a2e 	.word	0x20000a2e
 8002670:	20000a30 	.word	0x20000a30
 8002674:	200000ab 	.word	0x200000ab
 8002678:	200000aa 	.word	0x200000aa
							posXSnake[i]=posXSnake[i-1];
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	3b01      	subs	r3, #1
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <tache_snake+0x610>)
 8002682:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002686:	4a25      	ldr	r2, [pc, #148]	; (800271c <tache_snake+0x610>)
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							posYSnake[i]=posYSnake[i-1];
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3b01      	subs	r3, #1
 8002692:	4a23      	ldr	r2, [pc, #140]	; (8002720 <tache_snake+0x614>)
 8002694:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002698:	4a21      	ldr	r2, [pc, #132]	; (8002720 <tache_snake+0x614>)
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							dir[i]=dir[i-1];
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	3b01      	subs	r3, #1
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <tache_snake+0x618>)
 80026a6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <tache_snake+0x618>)
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						for (int i=longueur;i>=1;i--){
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	3b01      	subs	r3, #1
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	dcde      	bgt.n	800267c <tache_snake+0x570>
						}

						posXSnake[1]=posXSnake[0];
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <tache_snake+0x610>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <tache_snake+0x610>)
 80026c4:	805a      	strh	r2, [r3, #2]
						posYSnake[1]=posYSnake[0];
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <tache_snake+0x614>)
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <tache_snake+0x614>)
 80026cc:	805a      	strh	r2, [r3, #2]

				taskEXIT_CRITICAL();
 80026ce:	f00c fe29 	bl	800f324 <vPortExitCritical>
			}

			taskENTER_CRITICAL();
 80026d2:	f00c fdf3 	bl	800f2bc <vPortEnterCritical>
				posSnake[0] = xSnake;
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <tache_snake+0x61c>)
 80026d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80026da:	8013      	strh	r3, [r2, #0]
				posSnake[1] = ySnake;
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <tache_snake+0x61c>)
 80026de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026e0:	8053      	strh	r3, [r2, #2]
				posXSnake[0]=xSnake;
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <tache_snake+0x610>)
 80026e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80026e6:	8013      	strh	r3, [r2, #0]
				posYSnake[0]=ySnake;
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <tache_snake+0x614>)
 80026ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026ec:	8013      	strh	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80026ee:	f00c fe19 	bl	800f324 <vPortExitCritical>

			if(x0Snake != xSnake || y0Snake != ySnake){
 80026f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80026f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d103      	bne.n	8002702 <tache_snake+0x5f6>
 80026fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80026fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026fe:	429a      	cmp	r2, r3
 8002700:	d003      	beq.n	800270a <tache_snake+0x5fe>
				x0Snake = xSnake;
 8002702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002704:	877b      	strh	r3, [r7, #58]	; 0x3a
				y0Snake = ySnake;
 8002706:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002708:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			blocage=1;
 800270a:	2301      	movs	r3, #1
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
			vTaskDelayUntil(&xLastWakeTimeS, periodS);
 800270e:	f107 0320 	add.w	r3, r7, #32
 8002712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002714:	4618      	mov	r0, r3
 8002716:	f00b fd93 	bl	800e240 <vTaskDelayUntil>
		joystick_v=-10;
 800271a:	e51e      	b.n	800215a <tache_snake+0x4e>
 800271c:	20000030 	.word	0x20000030
 8002720:	20000058 	.word	0x20000058
 8002724:	20000080 	.word	0x20000080
 8002728:	20000a34 	.word	0x20000a34

0800272c <tache_affichage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_affichage */
void tache_affichage(void const * argument)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b093      	sub	sp, #76	; 0x4c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tache_affichage */
	TickType_t xLastWakeTimeA;
	const TickType_t periodA = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	647b      	str	r3, [r7, #68]	; 0x44
	char texte[50];
	uint16_t x,y;

	posObjet[0]=pos0Objet[1];
 8002738:	4b9b      	ldr	r3, [pc, #620]	; (80029a8 <tache_affichage+0x27c>)
 800273a:	885a      	ldrh	r2, [r3, #2]
 800273c:	4b9b      	ldr	r3, [pc, #620]	; (80029ac <tache_affichage+0x280>)
 800273e:	801a      	strh	r2, [r3, #0]
	posObjet[1]=pos0Objet[1];
 8002740:	4b99      	ldr	r3, [pc, #612]	; (80029a8 <tache_affichage+0x27c>)
 8002742:	885a      	ldrh	r2, [r3, #2]
 8002744:	4b99      	ldr	r3, [pc, #612]	; (80029ac <tache_affichage+0x280>)
 8002746:	805a      	strh	r2, [r3, #2]

	posSnake[0]=pos0Snake[1];
 8002748:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <tache_affichage+0x284>)
 800274a:	885a      	ldrh	r2, [r3, #2]
 800274c:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <tache_affichage+0x288>)
 800274e:	801a      	strh	r2, [r3, #0]
	posSnake[1]=pos0Snake[1];
 8002750:	4b97      	ldr	r3, [pc, #604]	; (80029b0 <tache_affichage+0x284>)
 8002752:	885a      	ldrh	r2, [r3, #2]
 8002754:	4b97      	ldr	r3, [pc, #604]	; (80029b4 <tache_affichage+0x288>)
 8002756:	805a      	strh	r2, [r3, #2]

	xLastWakeTimeA = xTaskGetTickCount();
 8002758:	f00b ff46 	bl	800e5e8 <xTaskGetTickCount>
 800275c:	4603      	mov	r3, r0
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c

	osMutexWait(myMutex01Handle, portMAX_DELAY);
 8002760:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <tache_affichage+0x28c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	4618      	mov	r0, r3
 800276a:	f00a fa47 	bl	800cbfc <osMutexWait>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800276e:	4893      	ldr	r0, [pc, #588]	; (80029bc <tache_affichage+0x290>)
 8002770:	f000 fe16 	bl	80033a0 <BSP_LCD_SetTextColor>
	BSP_LCD_SelectLayer(0);
 8002774:	2000      	movs	r0, #0
 8002776:	f000 fdc5 	bl	8003304 <BSP_LCD_SelectLayer>
	BSP_LCD_SetLayerVisible(0, ENABLE);
 800277a:	2101      	movs	r1, #1
 800277c:	2000      	movs	r0, #0
 800277e:	f000 fdd1 	bl	8003324 <BSP_LCD_SetLayerVisible>

	BSP_LCD_FillRect(pos0Snake[0], pos0Snake[1], lSnake, LSnake);
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <tache_affichage+0x284>)
 8002784:	8818      	ldrh	r0, [r3, #0]
 8002786:	4b8a      	ldr	r3, [pc, #552]	; (80029b0 <tache_affichage+0x284>)
 8002788:	8859      	ldrh	r1, [r3, #2]
 800278a:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <tache_affichage+0x294>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b8c      	ldr	r3, [pc, #560]	; (80029c4 <tache_affichage+0x298>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f001 f9f3 	bl	8003b80 <BSP_LCD_FillRect>

	BSP_LCD_SelectLayer(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f000 fdb2 	bl	8003304 <BSP_LCD_SelectLayer>
	BSP_LCD_SetLayerVisible(1, ENABLE);
 80027a0:	2101      	movs	r1, #1
 80027a2:	2001      	movs	r0, #1
 80027a4:	f000 fdbe 	bl	8003324 <BSP_LCD_SetLayerVisible>

	BSP_LCD_FillRect(pos0Objet[0], pos0Objet[1], lObjet, LObjet);
 80027a8:	4b7f      	ldr	r3, [pc, #508]	; (80029a8 <tache_affichage+0x27c>)
 80027aa:	8818      	ldrh	r0, [r3, #0]
 80027ac:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <tache_affichage+0x27c>)
 80027ae:	8859      	ldrh	r1, [r3, #2]
 80027b0:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <tache_affichage+0x29c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <tache_affichage+0x2a0>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f001 f9e0 	bl	8003b80 <BSP_LCD_FillRect>
	osMutexRelease(myMutex01Handle);
 80027c0:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <tache_affichage+0x28c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00a fa67 	bl	800cc98 <osMutexRelease>

	/* Infinite loop */
	for(;;)
	{

		osMutexWait(myMutex01Handle, portMAX_DELAY);
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <tache_affichage+0x28c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f04f 31ff 	mov.w	r1, #4294967295
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00a fa12 	bl	800cbfc <osMutexWait>
//		sprintf(texte, "Direction : %u Long %u  ",dir[0],longueur);
//		BSP_LCD_DisplayStringAt(450,30, (uint8_t*)texte,RIGHT_MODE);



		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80027d8:	4878      	ldr	r0, [pc, #480]	; (80029bc <tache_affichage+0x290>)
 80027da:	f000 fde1 	bl	80033a0 <BSP_LCD_SetTextColor>
		BSP_LCD_SelectLayer(0);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 fd90 	bl	8003304 <BSP_LCD_SelectLayer>
		BSP_LCD_SetLayerVisible(0, ENABLE);
 80027e4:	2101      	movs	r1, #1
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 fd9c 	bl	8003324 <BSP_LCD_SetLayerVisible>

		switch (dir[0]){
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <tache_affichage+0x2a4>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d83e      	bhi.n	8002874 <tache_affichage+0x148>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <tache_affichage+0xd0>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002841 	.word	0x08002841
 8002804:	08002827 	.word	0x08002827
 8002808:	0800285b 	.word	0x0800285b
		case 1 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 800280c:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <tache_affichage+0x288>)
 800280e:	8818      	ldrh	r0, [r3, #0]
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <tache_affichage+0x288>)
 8002812:	8859      	ldrh	r1, [r3, #2]
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <tache_affichage+0x294>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <tache_affichage+0x298>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f001 f9ae 	bl	8003b80 <BSP_LCD_FillRect>
			break;
 8002824:	e026      	b.n	8002874 <tache_affichage+0x148>
		case 3 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], lSnake, LSnake);
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <tache_affichage+0x288>)
 8002828:	8818      	ldrh	r0, [r3, #0]
 800282a:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <tache_affichage+0x288>)
 800282c:	8859      	ldrh	r1, [r3, #2]
 800282e:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <tache_affichage+0x294>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <tache_affichage+0x298>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f001 f9a1 	bl	8003b80 <BSP_LCD_FillRect>
			break;
 800283e:	e019      	b.n	8002874 <tache_affichage+0x148>
		case 2 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 8002840:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <tache_affichage+0x288>)
 8002842:	8818      	ldrh	r0, [r3, #0]
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <tache_affichage+0x288>)
 8002846:	8859      	ldrh	r1, [r3, #2]
 8002848:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <tache_affichage+0x298>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <tache_affichage+0x294>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f001 f994 	bl	8003b80 <BSP_LCD_FillRect>
			break;
 8002858:	e00c      	b.n	8002874 <tache_affichage+0x148>
		case 4 :
			BSP_LCD_FillRect(posSnake[0], posSnake[1], LSnake, lSnake);
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <tache_affichage+0x288>)
 800285c:	8818      	ldrh	r0, [r3, #0]
 800285e:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <tache_affichage+0x288>)
 8002860:	8859      	ldrh	r1, [r3, #2]
 8002862:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <tache_affichage+0x298>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <tache_affichage+0x294>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f001 f987 	bl	8003b80 <BSP_LCD_FillRect>
			break;
 8002872:	bf00      	nop
		}

		if (longueur>0){
 8002874:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <tache_affichage+0x2a8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 814b 	beq.w	8002b14 <tache_affichage+0x3e8>

			BSP_LCD_SelectLayer(0);
 800287e:	2000      	movs	r0, #0
 8002880:	f000 fd40 	bl	8003304 <BSP_LCD_SelectLayer>
			BSP_LCD_SetLayerVisible(0, ENABLE);
 8002884:	2101      	movs	r1, #1
 8002886:	2000      	movs	r0, #0
 8002888:	f000 fd4c 	bl	8003324 <BSP_LCD_SetLayerVisible>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f000 fd86 	bl	80033a0 <BSP_LCD_SetTextColor>

			switch (dir[longueur]){
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <tache_affichage+0x2a8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <tache_affichage+0x2a4>)
 800289c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	f200 80c2 	bhi.w	8002a2c <tache_affichage+0x300>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <tache_affichage+0x184>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	0800295f 	.word	0x0800295f
 80028b8:	08002915 	.word	0x08002915
 80028bc:	080029e5 	.word	0x080029e5

			case 1  :
				x=posXSnake[longueur];
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <tache_affichage+0x2a8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <tache_affichage+0x2ac>)
 80028c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur]+LSnake;
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <tache_affichage+0x2a8>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <tache_affichage+0x2b0>)
 80028d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80028dc:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <tache_affichage+0x298>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, y, LSnake, L_ecran-y+lSnake);
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <tache_affichage+0x298>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	b29c      	uxth	r4, r3
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <tache_affichage+0x2b4>)
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <tache_affichage+0x294>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002908:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 800290c:	4622      	mov	r2, r4
 800290e:	f001 f937 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002912:	e08b      	b.n	8002a2c <tache_affichage+0x300>
			case 3 :
				x=posXSnake[longueur];
 8002914:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <tache_affichage+0x2a8>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <tache_affichage+0x2ac>)
 800291c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002920:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur]-LSnake;
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <tache_affichage+0x2a8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <tache_affichage+0x2b0>)
 800292c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <tache_affichage+0x298>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, 0, LSnake, y+lSnake);
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <tache_affichage+0x298>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b299      	uxth	r1, r3
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <tache_affichage+0x294>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b29a      	uxth	r2, r3
 8002948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800294c:	4413      	add	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 8002954:	460a      	mov	r2, r1
 8002956:	2100      	movs	r1, #0
 8002958:	f001 f912 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 800295c:	e066      	b.n	8002a2c <tache_affichage+0x300>
			case 2 :
				x=posXSnake[longueur]-lSnake;
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <tache_affichage+0x2a8>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <tache_affichage+0x2ac>)
 8002966:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <tache_affichage+0x294>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur];
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <tache_affichage+0x2a8>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <tache_affichage+0x2b0>)
 800297e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(0, y, x+lSnake, lSnake);
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <tache_affichage+0x294>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002990:	4413      	add	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <tache_affichage+0x294>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800299e:	2000      	movs	r0, #0
 80029a0:	f001 f8ee 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 80029a4:	e042      	b.n	8002a2c <tache_affichage+0x300>
 80029a6:	bf00      	nop
 80029a8:	20000028 	.word	0x20000028
 80029ac:	20000a30 	.word	0x20000a30
 80029b0:	2000002c 	.word	0x2000002c
 80029b4:	20000a34 	.word	0x20000a34
 80029b8:	20000a20 	.word	0x20000a20
 80029bc:	ffff0000 	.word	0xffff0000
 80029c0:	200000a8 	.word	0x200000a8
 80029c4:	200000a9 	.word	0x200000a9
 80029c8:	200000aa 	.word	0x200000aa
 80029cc:	200000ab 	.word	0x200000ab
 80029d0:	20000080 	.word	0x20000080
 80029d4:	20000a2e 	.word	0x20000a2e
 80029d8:	20000030 	.word	0x20000030
 80029dc:	20000058 	.word	0x20000058
 80029e0:	200000b0 	.word	0x200000b0
			case 4 :
				x=posXSnake[longueur]+lSnake;
 80029e4:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <tache_affichage+0x4a4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <tache_affichage+0x4a8>)
 80029ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029f0:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <tache_affichage+0x4ac>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				y=posYSnake[longueur];
 80029fc:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <tache_affichage+0x4a4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <tache_affichage+0x4b0>)
 8002a04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				BSP_LCD_FillRect(x, y, l_ecran-x, lSnake);
 8002a0c:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <tache_affichage+0x4b4>)
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <tache_affichage+0x4ac>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002a22:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 8002a26:	f001 f8ab 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002a2a:	bf00      	nop

			}

			BSP_LCD_SelectLayer(0);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f000 fc69 	bl	8003304 <BSP_LCD_SelectLayer>
			BSP_LCD_SetLayerVisible(0, ENABLE);
 8002a32:	2101      	movs	r1, #1
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 fc75 	bl	8003324 <BSP_LCD_SetLayerVisible>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3e:	f000 fcaf 	bl	80033a0 <BSP_LCD_SetTextColor>
			switch (dir[longueur]){
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <tache_affichage+0x4a4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <tache_affichage+0x4b8>)
 8002a4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d860      	bhi.n	8002b16 <tache_affichage+0x3ea>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <tache_affichage+0x330>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002ac1 	.word	0x08002ac1
 8002a64:	08002a97 	.word	0x08002a97
 8002a68:	08002aeb 	.word	0x08002aeb
			case 1 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], lSnake, LSnake);
 8002a6c:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <tache_affichage+0x4a4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <tache_affichage+0x4a8>)
 8002a74:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002a78:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <tache_affichage+0x4a4>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <tache_affichage+0x4b0>)
 8002a80:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002a84:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <tache_affichage+0x4ac>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <tache_affichage+0x4bc>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f001 f876 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002a94:	e03f      	b.n	8002b16 <tache_affichage+0x3ea>
			case 3 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], lSnake, LSnake);
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <tache_affichage+0x4a4>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <tache_affichage+0x4a8>)
 8002a9e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <tache_affichage+0x4a4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <tache_affichage+0x4b0>)
 8002aaa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <tache_affichage+0x4ac>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <tache_affichage+0x4bc>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f001 f861 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002abe:	e02a      	b.n	8002b16 <tache_affichage+0x3ea>
			case 2 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], LSnake, lSnake);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <tache_affichage+0x4a4>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <tache_affichage+0x4a8>)
 8002ac8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <tache_affichage+0x4a4>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <tache_affichage+0x4b0>)
 8002ad4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002ad8:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <tache_affichage+0x4bc>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <tache_affichage+0x4ac>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f001 f84c 	bl	8003b80 <BSP_LCD_FillRect>
				break;
 8002ae8:	e015      	b.n	8002b16 <tache_affichage+0x3ea>
			case 4 :
				BSP_LCD_FillRect(posXSnake[longueur], posYSnake[longueur], LSnake, lSnake);
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <tache_affichage+0x4a4>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <tache_affichage+0x4a8>)
 8002af2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <tache_affichage+0x4a4>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <tache_affichage+0x4b0>)
 8002afe:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002b02:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <tache_affichage+0x4bc>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <tache_affichage+0x4ac>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f001 f837 	bl	8003b80 <BSP_LCD_FillRect>
				break;}
 8002b12:	e000      	b.n	8002b16 <tache_affichage+0x3ea>


			//BSP_LCD_Clear(LCD_COLOR_WHITE);
		}
 8002b14:	bf00      	nop

		taskENTER_CRITICAL();
 8002b16:	f00c fbd1 	bl	800f2bc <vPortEnterCritical>
		pos0Snake[0] = posSnake[0];
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <tache_affichage+0x4c0>)
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <tache_affichage+0x4c4>)
 8002b20:	801a      	strh	r2, [r3, #0]
		pos0Snake[1] = posSnake[1];
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <tache_affichage+0x4c0>)
 8002b24:	885a      	ldrh	r2, [r3, #2]
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <tache_affichage+0x4c4>)
 8002b28:	805a      	strh	r2, [r3, #2]
		taskEXIT_CRITICAL();
 8002b2a:	f00c fbfb 	bl	800f324 <vPortExitCritical>

		if(pos0Objet[0] != posObjet[0] || pos0Objet[1] != posObjet[1]){
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <tache_affichage+0x4cc>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d105      	bne.n	8002b46 <tache_affichage+0x41a>
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b3c:	885a      	ldrh	r2, [r3, #2]
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <tache_affichage+0x4cc>)
 8002b40:	885b      	ldrh	r3, [r3, #2]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d038      	beq.n	8002bb8 <tache_affichage+0x48c>

			BSP_LCD_SelectLayer(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f000 fbdc 	bl	8003304 <BSP_LCD_SelectLayer>
			BSP_LCD_SetLayerVisible(1, ENABLE);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f000 fbe8 	bl	8003324 <BSP_LCD_SetLayerVisible>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f000 fc22 	bl	80033a0 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(pos0Objet[0], pos0Objet[1], lObjet, LObjet);
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b5e:	8818      	ldrh	r0, [r3, #0]
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b62:	8859      	ldrh	r1, [r3, #2]
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <tache_affichage+0x4d0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <tache_affichage+0x4d4>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f001 f806 	bl	8003b80 <BSP_LCD_FillRect>

			taskENTER_CRITICAL();
 8002b74:	f00c fba2 	bl	800f2bc <vPortEnterCritical>
			pos0Objet[1]=posObjet[1];
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <tache_affichage+0x4cc>)
 8002b7a:	885a      	ldrh	r2, [r3, #2]
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b7e:	805a      	strh	r2, [r3, #2]
			pos0Objet[0]=posObjet[0];
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <tache_affichage+0x4cc>)
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <tache_affichage+0x4c8>)
 8002b86:	801a      	strh	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8002b88:	f00c fbcc 	bl	800f324 <vPortExitCritical>

			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002b8c:	481d      	ldr	r0, [pc, #116]	; (8002c04 <tache_affichage+0x4d8>)
 8002b8e:	f000 fc07 	bl	80033a0 <BSP_LCD_SetTextColor>

			BSP_LCD_SelectLayer(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f000 fbb6 	bl	8003304 <BSP_LCD_SelectLayer>
			BSP_LCD_SetLayerVisible(1, ENABLE);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f000 fbc2 	bl	8003324 <BSP_LCD_SetLayerVisible>

			BSP_LCD_FillRect(posObjet[0], posObjet[1], lObjet, LObjet);
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <tache_affichage+0x4cc>)
 8002ba2:	8818      	ldrh	r0, [r3, #0]
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <tache_affichage+0x4cc>)
 8002ba6:	8859      	ldrh	r1, [r3, #2]
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <tache_affichage+0x4d0>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <tache_affichage+0x4d4>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f000 ffe4 	bl	8003b80 <BSP_LCD_FillRect>

		}
		osMutexRelease(myMutex01Handle);
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <tache_affichage+0x4dc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00a f86b 	bl	800cc98 <osMutexRelease>
		vTaskDelayUntil(&xLastWakeTimeA, periodA);
 8002bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00b fb39 	bl	800e240 <vTaskDelayUntil>
		osMutexWait(myMutex01Handle, portMAX_DELAY);
 8002bce:	e5fc      	b.n	80027ca <tache_affichage+0x9e>
 8002bd0:	20000a2e 	.word	0x20000a2e
 8002bd4:	20000030 	.word	0x20000030
 8002bd8:	200000a8 	.word	0x200000a8
 8002bdc:	20000058 	.word	0x20000058
 8002be0:	200000ae 	.word	0x200000ae
 8002be4:	20000080 	.word	0x20000080
 8002be8:	200000a9 	.word	0x200000a9
 8002bec:	20000a34 	.word	0x20000a34
 8002bf0:	2000002c 	.word	0x2000002c
 8002bf4:	20000028 	.word	0x20000028
 8002bf8:	20000a30 	.word	0x20000a30
 8002bfc:	200000aa 	.word	0x200000aa
 8002c00:	200000ab 	.word	0x200000ab
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	20000a20 	.word	0x20000a20

08002c0c <tache_game>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tache_game */
void tache_game(void const * argument)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0ae      	sub	sp, #184	; 0xb8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tache_game */
	TickType_t xLastWakeTimeJ;
	const TickType_t periodJ = 30;
 8002c14:	231e      	movs	r3, #30
 8002c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint8_t jeu,compteur=0;	char texte[50];
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	uint32_t posY;
	char text1[50];
	char text2[50];


	HAL_RNG_GenerateRandomNumber(&hrng, &posX);
 8002c20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c24:	4619      	mov	r1, r3
 8002c26:	4851      	ldr	r0, [pc, #324]	; (8002d6c <tache_game+0x160>)
 8002c28:	f007 f950 	bl	8009ecc <HAL_RNG_GenerateRandomNumber>
	posX=posX%220+20;
 8002c2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c2e:	0893      	lsrs	r3, r2, #2
 8002c30:	494f      	ldr	r1, [pc, #316]	; (8002d70 <tache_game+0x164>)
 8002c32:	fba1 1303 	umull	r1, r3, r1, r3
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	21dc      	movs	r1, #220	; 0xdc
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	3314      	adds	r3, #20
 8002c42:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_RNG_GenerateRandomNumber(&hrng, &posY);
 8002c44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4848      	ldr	r0, [pc, #288]	; (8002d6c <tache_game+0x160>)
 8002c4c:	f007 f93e 	bl	8009ecc <HAL_RNG_GenerateRandomNumber>
	posY=posY%310+50;
 8002c50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c52:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <tache_game+0x168>)
 8002c54:	fba3 1302 	umull	r1, r3, r3, r2
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	3332      	adds	r3, #50	; 0x32
 8002c66:	673b      	str	r3, [r7, #112]	; 0x70

	xLastWakeTimeJ = xTaskGetTickCount();
 8002c68:	f00b fcbe 	bl	800e5e8 <xTaskGetTickCount>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	/* Infinite loop */
	for(;;)
	{
		xQueueReceive(myQueue02Handle, &jeu, portMAX_DELAY);
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <tache_game+0x16c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f107 01ab 	add.w	r1, r7, #171	; 0xab
 8002c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f00a fcf2 	bl	800d668 <xQueueReceive>

		if (jeu==0){  // Collision avec le mur GAME OVER
 8002c84:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <tache_game+0xae>

						BSP_LCD_SelectLayer(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f000 fb39 	bl	8003304 <BSP_LCD_SelectLayer>
						BSP_LCD_Clear(00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 fbe6 	bl	8003464 <BSP_LCD_Clear>
						BSP_LCD_SelectLayer(0);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 fb33 	bl	8003304 <BSP_LCD_SelectLayer>
						BSP_LCD_Clear(00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f000 fbe0 	bl	8003464 <BSP_LCD_Clear>
						BSP_LCD_DrawBitmap(0,0,(uint8_t*)gameover_bmp);
 8002ca4:	4a35      	ldr	r2, [pc, #212]	; (8002d7c <tache_game+0x170>)
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f000 feb7 	bl	8003a1c <BSP_LCD_DrawBitmap>
						vTaskDelete(tache_affichage);
 8002cae:	4834      	ldr	r0, [pc, #208]	; (8002d80 <tache_game+0x174>)
 8002cb0:	f00b fa34 	bl	800e11c <vTaskDelete>
						vTaskDelete(tache_snake);
 8002cb4:	4833      	ldr	r0, [pc, #204]	; (8002d84 <tache_game+0x178>)
 8002cb6:	f00b fa31 	bl	800e11c <vTaskDelete>
		}

		if (jeu==1){  // Collision avec un objet
 8002cba:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d14c      	bne.n	8002d5c <tache_game+0x150>
			HAL_RNG_GenerateRandomNumber(&hrng, &posX);
 8002cc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4828      	ldr	r0, [pc, #160]	; (8002d6c <tache_game+0x160>)
 8002cca:	f007 f8ff 	bl	8009ecc <HAL_RNG_GenerateRandomNumber>
			posX=posX%310+50;
 8002cce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <tache_game+0x168>)
 8002cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	3332      	adds	r3, #50	; 0x32
 8002ce4:	677b      	str	r3, [r7, #116]	; 0x74
			HAL_RNG_GenerateRandomNumber(&hrng, &posY);
 8002ce6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cea:	4619      	mov	r1, r3
 8002cec:	481f      	ldr	r0, [pc, #124]	; (8002d6c <tache_game+0x160>)
 8002cee:	f007 f8ed 	bl	8009ecc <HAL_RNG_GenerateRandomNumber>
			posY=posY%220+20;
 8002cf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cf4:	0893      	lsrs	r3, r2, #2
 8002cf6:	491e      	ldr	r1, [pc, #120]	; (8002d70 <tache_game+0x164>)
 8002cf8:	fba1 1303 	umull	r1, r3, r1, r3
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	21dc      	movs	r1, #220	; 0xdc
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	3314      	adds	r3, #20
 8002d08:	673b      	str	r3, [r7, #112]	; 0x70

			taskENTER_CRITICAL();
 8002d0a:	f00c fad7 	bl	800f2bc <vPortEnterCritical>
			longueur=longueur+2;
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <tache_game+0x17c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3302      	adds	r3, #2
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <tache_game+0x17c>)
 8002d18:	701a      	strb	r2, [r3, #0]
			posObjet[0]=posX;
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <tache_game+0x180>)
 8002d20:	801a      	strh	r2, [r3, #0]
			posObjet[1]=posY;
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <tache_game+0x180>)
 8002d28:	805a      	strh	r2, [r3, #2]
			taskEXIT_CRITICAL();
 8002d2a:	f00c fafb 	bl	800f324 <vPortExitCritical>

			osMutexWait(myMutex01Handle, portMAX_DELAY);
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <tache_game+0x184>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f04f 31ff 	mov.w	r1, #4294967295
 8002d36:	4618      	mov	r0, r3
 8002d38:	f009 ff60 	bl	800cbfc <osMutexWait>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002d3c:	4815      	ldr	r0, [pc, #84]	; (8002d94 <tache_game+0x188>)
 8002d3e:	f000 fb2f 	bl	80033a0 <BSP_LCD_SetTextColor>
			sprintf(texte, "Score : %u  ",compteur);
 8002d42:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8002d46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d4a:	4913      	ldr	r1, [pc, #76]	; (8002d98 <tache_game+0x18c>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00c ff15 	bl	800fb7c <siprintf>
			osMutexRelease(myMutex01Handle);
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <tache_game+0x184>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f009 ff9e 	bl	800cc98 <osMutexRelease>
		}

		vTaskDelayUntil(&xLastWakeTimeJ, periodJ);
 8002d5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d60:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00b fa6b 	bl	800e240 <vTaskDelayUntil>
		xQueueReceive(myQueue02Handle, &jeu, portMAX_DELAY);
 8002d6a:	e782      	b.n	8002c72 <tache_game+0x66>
 8002d6c:	20000638 	.word	0x20000638
 8002d70:	094f2095 	.word	0x094f2095
 8002d74:	d3680d37 	.word	0xd3680d37
 8002d78:	20000a1c 	.word	0x20000a1c
 8002d7c:	08010404 	.word	0x08010404
 8002d80:	0800272d 	.word	0x0800272d
 8002d84:	0800210d 	.word	0x0800210d
 8002d88:	20000a2e 	.word	0x20000a2e
 8002d8c:	20000a30 	.word	0x20000a30
 8002d90:	20000a20 	.word	0x20000a20
 8002d94:	ffff0000 	.word	0xffff0000
 8002d98:	080103ec 	.word	0x080103ec

08002d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dae:	f002 fd97 	bl	80058e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40001000 	.word	0x40001000

08002dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <Error_Handler+0x8>
	...

08002dcc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a51      	ldr	r2, [pc, #324]	; (8002f1c <I2Cx_MspInit+0x150>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d14d      	bne.n	8002e78 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	6313      	str	r3, [r2, #48]	; 0x30
 8002de8:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002df8:	2312      	movs	r3, #18
 8002dfa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e00:	2302      	movs	r3, #2
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002e04:	2304      	movs	r3, #4
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4845      	ldr	r0, [pc, #276]	; (8002f24 <I2Cx_MspInit+0x158>)
 8002e10:	f004 fa8a 	bl	8007328 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4840      	ldr	r0, [pc, #256]	; (8002f24 <I2Cx_MspInit+0x158>)
 8002e22:	f004 fa81 	bl	8007328 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a3d      	ldr	r2, [pc, #244]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a37      	ldr	r2, [pc, #220]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e48:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e54:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	210f      	movs	r1, #15
 8002e5a:	2048      	movs	r0, #72	; 0x48
 8002e5c:	f003 fb6e 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002e60:	2048      	movs	r0, #72	; 0x48
 8002e62:	f003 fb87 	bl	8006574 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	210f      	movs	r1, #15
 8002e6a:	2049      	movs	r0, #73	; 0x49
 8002e6c:	f003 fb66 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002e70:	2049      	movs	r0, #73	; 0x49
 8002e72:	f003 fb7f 	bl	8006574 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002e76:	e04d      	b.n	8002f14 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e94:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e96:	2312      	movs	r3, #18
 8002e98:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481e      	ldr	r0, [pc, #120]	; (8002f28 <I2Cx_MspInit+0x15c>)
 8002eae:	f004 fa3b 	bl	8007328 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	481a      	ldr	r0, [pc, #104]	; (8002f28 <I2Cx_MspInit+0x15c>)
 8002ec0:	f004 fa32 	bl	8007328 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ece:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <I2Cx_MspInit+0x154>)
 8002eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ef2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	201f      	movs	r0, #31
 8002efa:	f003 fb1f 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002efe:	201f      	movs	r0, #31
 8002f00:	f003 fb38 	bl	8006574 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	210f      	movs	r1, #15
 8002f08:	2020      	movs	r0, #32
 8002f0a:	f003 fb17 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002f0e:	2020      	movs	r0, #32
 8002f10:	f003 fb30 	bl	8006574 <HAL_NVIC_EnableIRQ>
}
 8002f14:	bf00      	nop
 8002f16:	3730      	adds	r7, #48	; 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000a64 	.word	0x20000a64
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40021c00 	.word	0x40021c00
 8002f28:	40020400 	.word	0x40020400

08002f2c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 ffcf 	bl	8007ed8 <HAL_I2C_GetState>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d125      	bne.n	8002f8c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <I2Cx_Init+0x68>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <I2Cx_Init+0x6c>)
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e002      	b.n	8002f56 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <I2Cx_Init+0x70>)
 8002f54:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <I2Cx_Init+0x74>)
 8002f5a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff23 	bl	8002dcc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f004 fcb8 	bl	80078fc <HAL_I2C_Init>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000a64 	.word	0x20000a64
 8002f98:	40005c00 	.word	0x40005c00
 8002f9c:	40005400 	.word	0x40005400
 8002fa0:	40912732 	.word	0x40912732

08002fa4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	72fb      	strb	r3, [r7, #11]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	88f8      	ldrh	r0, [r7, #6]
 8002fc8:	893a      	ldrh	r2, [r7, #8]
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f004 fe62 	bl	8007ca4 <HAL_I2C_Mem_Read>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	4619      	mov	r1, r3
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f832 	bl	8003058 <I2Cx_Error>
  }
  return status;    
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af04      	add	r7, sp, #16
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	4608      	mov	r0, r1
 8003008:	4611      	mov	r1, r2
 800300a:	461a      	mov	r2, r3
 800300c:	4603      	mov	r3, r0
 800300e:	72fb      	strb	r3, [r7, #11]
 8003010:	460b      	mov	r3, r1
 8003012:	813b      	strh	r3, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	b299      	uxth	r1, r3
 8003020:	88f8      	ldrh	r0, [r7, #6]
 8003022:	893a      	ldrh	r2, [r7, #8]
 8003024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4603      	mov	r3, r0
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f004 fd21 	bl	8007a7c <HAL_I2C_Mem_Write>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f805 	bl	8003058 <I2Cx_Error>
  }
  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f004 fcd9 	bl	8007a1c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff5e 	bl	8002f2c <I2Cx_Init>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <TS_IO_Init+0x10>)
 800307e:	f7ff ff55 	bl	8002f2c <I2Cx_Init>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000a64 	.word	0x20000a64

0800308c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af02      	add	r7, sp, #8
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	460b      	mov	r3, r1
 8003098:	71bb      	strb	r3, [r7, #6]
 800309a:	4613      	mov	r3, r2
 800309c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	79f9      	ldrb	r1, [r7, #7]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	1d7b      	adds	r3, r7, #5
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	4803      	ldr	r0, [pc, #12]	; (80030bc <TS_IO_Write+0x30>)
 80030b0:	f7ff ffa5 	bl	8002ffe <I2Cx_WriteMultiple>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000a64 	.word	0x20000a64

080030c0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	4603      	mov	r3, r0
 80030c8:	460a      	mov	r2, r1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	79f9      	ldrb	r1, [r7, #7]
 80030da:	2301      	movs	r3, #1
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	f107 030f 	add.w	r3, r7, #15
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2301      	movs	r3, #1
 80030e6:	4804      	ldr	r0, [pc, #16]	; (80030f8 <TS_IO_Read+0x38>)
 80030e8:	f7ff ff5c 	bl	8002fa4 <I2Cx_ReadMultiple>

  return read_value;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000a64 	.word	0x20000a64

080030fc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f002 fc0b 	bl	8005920 <HAL_Delay>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800311a:	2228      	movs	r2, #40	; 0x28
 800311c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003120:	2209      	movs	r2, #9
 8003122:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003126:	2235      	movs	r2, #53	; 0x35
 8003128:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800312c:	220b      	movs	r2, #11
 800312e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003132:	f240 121b 	movw	r2, #283	; 0x11b
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800313a:	f240 2215 	movw	r2, #533	; 0x215
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003142:	f240 121d 	movw	r2, #285	; 0x11d
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800314a:	f240 2235 	movw	r2, #565	; 0x235
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003150:	2100      	movs	r1, #0
 8003152:	4823      	ldr	r0, [pc, #140]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003154:	f000 ff26 	bl	8003fa4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800315a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003162:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003166:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <BSP_LCD_Init+0xcc>)
 8003194:	2200      	movs	r2, #0
 8003196:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <BSP_LCD_Init+0xcc>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <BSP_LCD_Init+0xd0>)
 800319c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800319e:	4810      	ldr	r0, [pc, #64]	; (80031e0 <BSP_LCD_Init+0xcc>)
 80031a0:	f005 fbb6 	bl	8008910 <HAL_LTDC_GetState>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80031aa:	2100      	movs	r1, #0
 80031ac:	480c      	ldr	r0, [pc, #48]	; (80031e0 <BSP_LCD_Init+0xcc>)
 80031ae:	f000 fe1f 	bl	8003df0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80031b2:	480b      	ldr	r0, [pc, #44]	; (80031e0 <BSP_LCD_Init+0xcc>)
 80031b4:	f005 f9dc 	bl	8008570 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80031b8:	2201      	movs	r2, #1
 80031ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031be:	480a      	ldr	r0, [pc, #40]	; (80031e8 <BSP_LCD_Init+0xd4>)
 80031c0:	f004 fb82 	bl	80078c8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80031c4:	2201      	movs	r2, #1
 80031c6:	2108      	movs	r1, #8
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <BSP_LCD_Init+0xd8>)
 80031ca:	f004 fb7d 	bl	80078c8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80031ce:	f001 f84d 	bl	800426c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <BSP_LCD_Init+0xdc>)
 80031d4:	f000 f916 	bl	8003404 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000ab0 	.word	0x20000ab0
 80031e4:	40016800 	.word	0x40016800
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40022800 	.word	0x40022800
 80031f0:	200000b4 	.word	0x200000b4

080031f4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <BSP_LCD_GetXSize+0x20>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a06      	ldr	r2, [pc, #24]	; (8003218 <BSP_LCD_GetXSize+0x24>)
 80031fe:	2134      	movs	r1, #52	; 0x34
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3360      	adds	r3, #96	; 0x60
 8003208:	681b      	ldr	r3, [r3, #0]
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	20000b98 	.word	0x20000b98
 8003218:	20000ab0 	.word	0x20000ab0

0800321c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <BSP_LCD_GetYSize+0x20>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a06      	ldr	r2, [pc, #24]	; (8003240 <BSP_LCD_GetYSize+0x24>)
 8003226:	2134      	movs	r1, #52	; 0x34
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3364      	adds	r3, #100	; 0x64
 8003230:	681b      	ldr	r3, [r3, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000b98 	.word	0x20000b98
 8003240:	20000ab0 	.word	0x20000ab0

08003244 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003244:	b580      	push	{r7, lr}
 8003246:	b090      	sub	sp, #64	; 0x40
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003254:	f7ff ffce 	bl	80031f4 <BSP_LCD_GetXSize>
 8003258:	4603      	mov	r3, r0
 800325a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003260:	f7ff ffdc 	bl	800321c <BSP_LCD_GetYSize>
 8003264:	4603      	mov	r3, r0
 8003266:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003270:	23ff      	movs	r3, #255	; 0xff
 8003272:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800328a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003290:	2307      	movs	r3, #7
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003294:	f7ff ffae 	bl	80031f4 <BSP_LCD_GetXSize>
 8003298:	4603      	mov	r3, r0
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800329c:	f7ff ffbe 	bl	800321c <BSP_LCD_GetYSize>
 80032a0:	4603      	mov	r3, r0
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	4812      	ldr	r0, [pc, #72]	; (80032f8 <BSP_LCD_LayerDefaultInit+0xb4>)
 80032ae:	f005 faf1 	bl	8008894 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	4911      	ldr	r1, [pc, #68]	; (80032fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3304      	adds	r3, #4
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	490c      	ldr	r1, [pc, #48]	; (80032fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3308      	adds	r3, #8
 80032d8:	4a09      	ldr	r2, [pc, #36]	; (8003300 <BSP_LCD_LayerDefaultInit+0xbc>)
 80032da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	4907      	ldr	r1, [pc, #28]	; (80032fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80032ee:	601a      	str	r2, [r3, #0]
}
 80032f0:	bf00      	nop
 80032f2:	3740      	adds	r7, #64	; 0x40
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000ab0 	.word	0x20000ab0
 80032fc:	20000b9c 	.word	0x20000b9c
 8003300:	200000b4 	.word	0x200000b4

08003304 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <BSP_LCD_SelectLayer+0x1c>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
} 
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000b98 	.word	0x20000b98

08003324 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d112      	bne.n	800335c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	4413      	add	r3, r2
 8003342:	3384      	adds	r3, #132	; 0x84
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	4611      	mov	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	01d2      	lsls	r2, r2, #7
 8003350:	440a      	add	r2, r1
 8003352:	3284      	adds	r2, #132	; 0x84
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e011      	b.n	8003380 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	01db      	lsls	r3, r3, #7
 8003366:	4413      	add	r3, r2
 8003368:	3384      	adds	r3, #132	; 0x84
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4611      	mov	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	01d2      	lsls	r2, r2, #7
 8003376:	440a      	add	r2, r1
 8003378:	3284      	adds	r2, #132	; 0x84
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <BSP_LCD_SetLayerVisible+0x78>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	20000ab0 	.word	0x20000ab0

080033a0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <BSP_LCD_SetTextColor+0x28>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <BSP_LCD_SetTextColor+0x2c>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000b98 	.word	0x20000b98
 80033cc:	20000b9c 	.word	0x20000b9c

080033d0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <BSP_LCD_SetBackColor+0x2c>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4908      	ldr	r1, [pc, #32]	; (8003400 <BSP_LCD_SetBackColor+0x30>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3304      	adds	r3, #4
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000b98 	.word	0x20000b98
 8003400:	20000b9c 	.word	0x20000b9c

08003404 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <BSP_LCD_SetFont+0x2c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4908      	ldr	r1, [pc, #32]	; (8003434 <BSP_LCD_SetFont+0x30>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3308      	adds	r3, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000b98 	.word	0x20000b98
 8003434:	20000b9c 	.word	0x20000b9c

08003438 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <BSP_LCD_GetFont+0x24>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <BSP_LCD_GetFont+0x28>)
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3308      	adds	r3, #8
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000b98 	.word	0x20000b98
 8003460:	20000b9c 	.word	0x20000b9c

08003464 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <BSP_LCD_Clear+0x48>)
 800346e:	681c      	ldr	r4, [r3, #0]
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <BSP_LCD_Clear+0x48>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <BSP_LCD_Clear+0x4c>)
 8003476:	2134      	movs	r1, #52	; 0x34
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	335c      	adds	r3, #92	; 0x5c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461e      	mov	r6, r3
 8003484:	f7ff feb6 	bl	80031f4 <BSP_LCD_GetXSize>
 8003488:	4605      	mov	r5, r0
 800348a:	f7ff fec7 	bl	800321c <BSP_LCD_GetYSize>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	2300      	movs	r3, #0
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	462a      	mov	r2, r5
 800349c:	4631      	mov	r1, r6
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 fe54 	bl	800414c <LL_FillBuffer>
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	20000b98 	.word	0x20000b98
 80034b0:	20000ab0 	.word	0x20000ab0

080034b4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
 80034be:	460b      	mov	r3, r1
 80034c0:	80bb      	strh	r3, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <BSP_LCD_DisplayChar+0x80>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	491b      	ldr	r1, [pc, #108]	; (8003538 <BSP_LCD_DisplayChar+0x84>)
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3308      	adds	r3, #8
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <BSP_LCD_DisplayChar+0x80>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4c14      	ldr	r4, [pc, #80]	; (8003538 <BSP_LCD_DisplayChar+0x84>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4423      	add	r3, r4
 80034f2:	3308      	adds	r3, #8
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034f8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <BSP_LCD_DisplayChar+0x80>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <BSP_LCD_DisplayChar+0x84>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4423      	add	r3, r4
 800350c:	3308      	adds	r3, #8
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	889b      	ldrh	r3, [r3, #4]
 8003512:	3307      	adds	r3, #7
 8003514:	2b00      	cmp	r3, #0
 8003516:	da00      	bge.n	800351a <BSP_LCD_DisplayChar+0x66>
 8003518:	3307      	adds	r3, #7
 800351a:	10db      	asrs	r3, r3, #3
 800351c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003520:	18ca      	adds	r2, r1, r3
 8003522:	88b9      	ldrh	r1, [r7, #4]
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fd58 	bl	8003fdc <DrawChar>
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	20000b98 	.word	0x20000b98
 8003538:	20000b9c 	.word	0x20000b9c

0800353c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800353c:	b5b0      	push	{r4, r5, r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	60ba      	str	r2, [r7, #8]
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	81fb      	strh	r3, [r7, #14]
 800354a:	460b      	mov	r3, r1
 800354c:	81bb      	strh	r3, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003552:	2301      	movs	r3, #1
 8003554:	83fb      	strh	r3, [r7, #30]
 8003556:	2300      	movs	r3, #0
 8003558:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003566:	e002      	b.n	800356e <BSP_LCD_DisplayStringAt+0x32>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	3301      	adds	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	617a      	str	r2, [r7, #20]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f6      	bne.n	8003568 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800357a:	f7ff fe3b 	bl	80031f4 <BSP_LCD_GetXSize>
 800357e:	4601      	mov	r1, r0
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4850      	ldr	r0, [pc, #320]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	3308      	adds	r3, #8
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	889b      	ldrh	r3, [r3, #4]
 8003596:	fbb1 f3f3 	udiv	r3, r1, r3
 800359a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d01c      	beq.n	80035dc <BSP_LCD_DisplayStringAt+0xa0>
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	dc33      	bgt.n	800360e <BSP_LCD_DisplayStringAt+0xd2>
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d002      	beq.n	80035b0 <BSP_LCD_DisplayStringAt+0x74>
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d019      	beq.n	80035e2 <BSP_LCD_DisplayStringAt+0xa6>
 80035ae:	e02e      	b.n	800360e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad1      	subs	r1, r2, r3
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4843      	ldr	r0, [pc, #268]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	3308      	adds	r3, #8
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	4413      	add	r3, r2
 80035d8:	83fb      	strh	r3, [r7, #30]
      break;
 80035da:	e01b      	b.n	8003614 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	83fb      	strh	r3, [r7, #30]
      break;
 80035e0:	e018      	b.n	8003614 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	b299      	uxth	r1, r3
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4836      	ldr	r0, [pc, #216]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	3308      	adds	r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	889b      	ldrh	r3, [r3, #4]
 8003600:	fb11 f303 	smulbb	r3, r1, r3
 8003604:	b29a      	uxth	r2, r3
 8003606:	89fb      	ldrh	r3, [r7, #14]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	83fb      	strh	r3, [r7, #30]
      break;
 800360c:	e002      	b.n	8003614 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	83fb      	strh	r3, [r7, #30]
      break;
 8003612:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003614:	8bfb      	ldrh	r3, [r7, #30]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <BSP_LCD_DisplayStringAt+0xe6>
 800361a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800361e:	2b00      	cmp	r3, #0
 8003620:	da1d      	bge.n	800365e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003626:	e01a      	b.n	800365e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	89b9      	ldrh	r1, [r7, #12]
 800362e:	8bfb      	ldrh	r3, [r7, #30]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff3f 	bl	80034b4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4923      	ldr	r1, [pc, #140]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3308      	adds	r3, #8
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	889a      	ldrh	r2, [r3, #4]
 800364c:	8bfb      	ldrh	r3, [r7, #30]
 800364e:	4413      	add	r3, r2
 8003650:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3301      	adds	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
    i++;
 8003658:	8bbb      	ldrh	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf14      	ite	ne
 8003666:	2301      	movne	r3, #1
 8003668:	2300      	moveq	r3, #0
 800366a:	b2dc      	uxtb	r4, r3
 800366c:	f7ff fdc2 	bl	80031f4 <BSP_LCD_GetXSize>
 8003670:	8bb9      	ldrh	r1, [r7, #28]
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4d14      	ldr	r5, [pc, #80]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	442b      	add	r3, r5
 8003682:	3308      	adds	r3, #8
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	889b      	ldrh	r3, [r3, #4]
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ac3      	subs	r3, r0, r3
 800368e:	b299      	uxth	r1, r3
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <BSP_LCD_DisplayStringAt+0x188>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	3308      	adds	r3, #8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	889b      	ldrh	r3, [r3, #4]
 80036a6:	4299      	cmp	r1, r3
 80036a8:	bf2c      	ite	cs
 80036aa:	2301      	movcs	r3, #1
 80036ac:	2300      	movcc	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4023      	ands	r3, r4
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1b7      	bne.n	8003628 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000b98 	.word	0x20000b98
 80036c8:	20000b9c 	.word	0x20000b9c

080036cc <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80036d8:	f7ff feae 	bl	8003438 <BSP_LCD_GetFont>
 80036dc:	4603      	mov	r3, r0
 80036de:	88db      	ldrh	r3, [r3, #6]
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	fb12 f303 	smulbb	r3, r2, r3
 80036e6:	b299      	uxth	r1, r3
 80036e8:	2303      	movs	r3, #3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7ff ff25 	bl	800353c <BSP_LCD_DisplayStringAt>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
 8003706:	460b      	mov	r3, r1
 8003708:	80bb      	strh	r3, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <BSP_LCD_DrawHLine+0xb0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <BSP_LCD_DrawHLine+0xb4>)
 8003718:	2134      	movs	r1, #52	; 0x34
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3348      	adds	r3, #72	; 0x48
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d114      	bne.n	8003752 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <BSP_LCD_DrawHLine+0xb0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <BSP_LCD_DrawHLine+0xb4>)
 800372e:	2134      	movs	r1, #52	; 0x34
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	335c      	adds	r3, #92	; 0x5c
 8003738:	681c      	ldr	r4, [r3, #0]
 800373a:	f7ff fd5b 	bl	80031f4 <BSP_LCD_GetXSize>
 800373e:	4602      	mov	r2, r0
 8003740:	88bb      	ldrh	r3, [r7, #4]
 8003742:	fb03 f202 	mul.w	r2, r3, r2
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	4413      	add	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4423      	add	r3, r4
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e013      	b.n	800377a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <BSP_LCD_DrawHLine+0xb0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <BSP_LCD_DrawHLine+0xb4>)
 8003758:	2134      	movs	r1, #52	; 0x34
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	335c      	adds	r3, #92	; 0x5c
 8003762:	681c      	ldr	r4, [r3, #0]
 8003764:	f7ff fd46 	bl	80031f4 <BSP_LCD_GetXSize>
 8003768:	4602      	mov	r2, r0
 800376a:	88bb      	ldrh	r3, [r7, #4]
 800376c:	fb03 f202 	mul.w	r2, r3, r2
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4423      	add	r3, r4
 8003778:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <BSP_LCD_DrawHLine+0xb0>)
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	887c      	ldrh	r4, [r7, #2]
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <BSP_LCD_DrawHLine+0xb0>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4d0b      	ldr	r5, [pc, #44]	; (80037b4 <BSP_LCD_DrawHLine+0xb8>)
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	442b      	add	r3, r5
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2301      	movs	r3, #1
 800379c:	4622      	mov	r2, r4
 800379e:	f000 fcd5 	bl	800414c <LL_FillBuffer>
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bdb0      	pop	{r4, r5, r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000b98 	.word	0x20000b98
 80037b0:	20000ab0 	.word	0x20000ab0
 80037b4:	20000b9c 	.word	0x20000b9c

080037b8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	80fb      	strh	r3, [r7, #6]
 80037c2:	460b      	mov	r3, r1
 80037c4:	80bb      	strh	r3, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	f1c3 0303 	rsb	r3, r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80037dc:	e0c7      	b.n	800396e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	4413      	add	r3, r2
 80037e6:	b298      	uxth	r0, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	88ba      	ldrh	r2, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	b299      	uxth	r1, r3
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4c64      	ldr	r4, [pc, #400]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4423      	add	r3, r4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	f000 f8c1 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	b29b      	uxth	r3, r3
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	b298      	uxth	r0, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	b29b      	uxth	r3, r3
 8003818:	88ba      	ldrh	r2, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b299      	uxth	r1, r3
 800381e:	4b59      	ldr	r3, [pc, #356]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4c59      	ldr	r4, [pc, #356]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4423      	add	r3, r4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	f000 f8ab 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	b29a      	uxth	r2, r3
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4413      	add	r3, r2
 800383e:	b298      	uxth	r0, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	b29b      	uxth	r3, r3
 8003844:	88ba      	ldrh	r2, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	b299      	uxth	r1, r3
 800384a:	4b4e      	ldr	r3, [pc, #312]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4c4e      	ldr	r4, [pc, #312]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4423      	add	r3, r4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f000 f895 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	b29b      	uxth	r3, r3
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	b298      	uxth	r0, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	b29b      	uxth	r3, r3
 8003870:	88ba      	ldrh	r2, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b299      	uxth	r1, r3
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4c43      	ldr	r4, [pc, #268]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4423      	add	r3, r4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	f000 f87f 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	b29a      	uxth	r2, r3
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	4413      	add	r3, r2
 8003896:	b298      	uxth	r0, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	b29a      	uxth	r2, r3
 800389c:	88bb      	ldrh	r3, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	b299      	uxth	r1, r3
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4c38      	ldr	r4, [pc, #224]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4423      	add	r3, r4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f000 f869 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b298      	uxth	r0, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	88bb      	ldrh	r3, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	b299      	uxth	r1, r3
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4c2d      	ldr	r4, [pc, #180]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4423      	add	r3, r4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f000 f853 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	4413      	add	r3, r2
 80038ee:	b298      	uxth	r0, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	88bb      	ldrh	r3, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	b299      	uxth	r1, r3
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4c22      	ldr	r4, [pc, #136]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4423      	add	r3, r4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	f000 f83d 	bl	800398c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	b29b      	uxth	r3, r3
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	b298      	uxth	r0, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	b29a      	uxth	r2, r3
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	b299      	uxth	r1, r3
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <BSP_LCD_DrawCircle+0x1cc>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4c17      	ldr	r4, [pc, #92]	; (8003988 <BSP_LCD_DrawCircle+0x1d0>)
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4423      	add	r3, r4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	f000 f827 	bl	800398c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da06      	bge.n	8003952 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4413      	add	r3, r2
 800394c:	3306      	adds	r3, #6
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e00a      	b.n	8003968 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4413      	add	r3, r2
 800395e:	330a      	adds	r3, #10
 8003960:	617b      	str	r3, [r7, #20]
      current_y--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	3301      	adds	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	f67f af33 	bls.w	80037de <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
 8003982:	bf00      	nop
 8003984:	20000b98 	.word	0x20000b98
 8003988:	20000b9c 	.word	0x20000b9c

0800398c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	603a      	str	r2, [r7, #0]
 8003996:	80fb      	strh	r3, [r7, #6]
 8003998:	460b      	mov	r3, r1
 800399a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <BSP_LCD_DrawPixel+0x88>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <BSP_LCD_DrawPixel+0x8c>)
 80039a2:	2134      	movs	r1, #52	; 0x34
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3348      	adds	r3, #72	; 0x48
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d116      	bne.n	80039e0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <BSP_LCD_DrawPixel+0x88>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <BSP_LCD_DrawPixel+0x8c>)
 80039b8:	2134      	movs	r1, #52	; 0x34
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	335c      	adds	r3, #92	; 0x5c
 80039c2:	681c      	ldr	r4, [r3, #0]
 80039c4:	88bd      	ldrh	r5, [r7, #4]
 80039c6:	f7ff fc15 	bl	80031f4 <BSP_LCD_GetXSize>
 80039ca:	4603      	mov	r3, r0
 80039cc:	fb03 f205 	mul.w	r2, r3, r5
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	4413      	add	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4423      	add	r3, r4
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b292      	uxth	r2, r2
 80039dc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80039de:	e015      	b.n	8003a0c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <BSP_LCD_DrawPixel+0x88>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <BSP_LCD_DrawPixel+0x8c>)
 80039e6:	2134      	movs	r1, #52	; 0x34
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	681c      	ldr	r4, [r3, #0]
 80039f2:	88bd      	ldrh	r5, [r7, #4]
 80039f4:	f7ff fbfe 	bl	80031f4 <BSP_LCD_GetXSize>
 80039f8:	4603      	mov	r3, r0
 80039fa:	fb03 f205 	mul.w	r2, r3, r5
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4423      	add	r3, r4
 8003a06:	461a      	mov	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bdb0      	pop	{r4, r5, r7, pc}
 8003a14:	20000b98 	.word	0x20000b98
 8003a18:	20000ab0 	.word	0x20000ab0

08003a1c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b08b      	sub	sp, #44	; 0x2c
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	330a      	adds	r3, #10
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	330b      	adds	r3, #11
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	330c      	adds	r3, #12
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	330d      	adds	r3, #13
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	4413      	add	r3, r2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3312      	adds	r3, #18
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3313      	adds	r3, #19
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3315      	adds	r3, #21
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	4413      	add	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3316      	adds	r3, #22
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3317      	adds	r3, #23
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	441a      	add	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3319      	adds	r3, #25
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	4413      	add	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	331c      	adds	r3, #28
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	331d      	adds	r3, #29
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	4413      	add	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <BSP_LCD_DrawBitmap+0x15c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <BSP_LCD_DrawBitmap+0x160>)
 8003ace:	2134      	movs	r1, #52	; 0x34
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	335c      	adds	r3, #92	; 0x5c
 8003ad8:	681c      	ldr	r4, [r3, #0]
 8003ada:	f7ff fb8b 	bl	80031f4 <BSP_LCD_GetXSize>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	fb03 f202 	mul.w	r2, r3, r2
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4423      	add	r3, r4
 8003aee:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3b20      	subs	r3, #32
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d802      	bhi.n	8003afe <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	e008      	b.n	8003b10 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3b10      	subs	r3, #16
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	d802      	bhi.n	8003b0c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003b06:	2302      	movs	r3, #2
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e001      	b.n	8003b10 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	08d2      	lsrs	r2, r2, #3
 8003b1e:	fb03 f202 	mul.w	r2, r3, r2
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	e018      	b.n	8003b64 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003b32:	6a39      	ldr	r1, [r7, #32]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb53 	bl	80041e4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003b3e:	f7ff fb59 	bl	80031f4 <BSP_LCD_GetXSize>
 8003b42:	4603      	mov	r3, r0
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	4413      	add	r3, r2
 8003b4a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	08db      	lsrs	r3, r3, #3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	425b      	negs	r3, r3
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	3301      	adds	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3e2      	bcc.n	8003b32 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	372c      	adds	r7, #44	; 0x2c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000b98 	.word	0x20000b98
 8003b7c:	20000ab0 	.word	0x20000ab0

08003b80 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af02      	add	r7, sp, #8
 8003b88:	4604      	mov	r4, r0
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	80fb      	strh	r3, [r7, #6]
 8003b94:	4603      	mov	r3, r0
 8003b96:	80bb      	strh	r3, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4930      	ldr	r1, [pc, #192]	; (8003c6c <BSP_LCD_FillRect+0xec>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fbf2 	bl	80033a0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <BSP_LCD_FillRect+0xf0>)
 8003bc2:	2134      	movs	r1, #52	; 0x34
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3348      	adds	r3, #72	; 0x48
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d114      	bne.n	8003bfc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <BSP_LCD_FillRect+0xf0>)
 8003bd8:	2134      	movs	r1, #52	; 0x34
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	335c      	adds	r3, #92	; 0x5c
 8003be2:	681c      	ldr	r4, [r3, #0]
 8003be4:	f7ff fb06 	bl	80031f4 <BSP_LCD_GetXSize>
 8003be8:	4602      	mov	r2, r0
 8003bea:	88bb      	ldrh	r3, [r7, #4]
 8003bec:	fb03 f202 	mul.w	r2, r3, r2
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4423      	add	r3, r4
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e013      	b.n	8003c24 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <BSP_LCD_FillRect+0xf0>)
 8003c02:	2134      	movs	r1, #52	; 0x34
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	335c      	adds	r3, #92	; 0x5c
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	f7ff faf1 	bl	80031f4 <BSP_LCD_GetXSize>
 8003c12:	4602      	mov	r2, r0
 8003c14:	88bb      	ldrh	r3, [r7, #4]
 8003c16:	fb03 f202 	mul.w	r2, r3, r2
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4423      	add	r3, r4
 8003c22:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003c26:	681c      	ldr	r4, [r3, #0]
 8003c28:	68fd      	ldr	r5, [r7, #12]
 8003c2a:	887e      	ldrh	r6, [r7, #2]
 8003c2c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003c30:	f7ff fae0 	bl	80031f4 <BSP_LCD_GetXSize>
 8003c34:	4602      	mov	r2, r0
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	1ad1      	subs	r1, r2, r3
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <BSP_LCD_FillRect+0xe8>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	480b      	ldr	r0, [pc, #44]	; (8003c6c <BSP_LCD_FillRect+0xec>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4403      	add	r3, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	9100      	str	r1, [sp, #0]
 8003c50:	4643      	mov	r3, r8
 8003c52:	4632      	mov	r2, r6
 8003c54:	4629      	mov	r1, r5
 8003c56:	4620      	mov	r0, r4
 8003c58:	f000 fa78 	bl	800414c <LL_FillBuffer>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c66:	bf00      	nop
 8003c68:	20000b98 	.word	0x20000b98
 8003c6c:	20000b9c 	.word	0x20000b9c
 8003c70:	20000ab0 	.word	0x20000ab0

08003c74 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	f1c3 0303 	rsb	r3, r3, #3
 8003c8e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003c98:	4b44      	ldr	r3, [pc, #272]	; (8003dac <BSP_LCD_FillCircle+0x138>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4944      	ldr	r1, [pc, #272]	; (8003db0 <BSP_LCD_FillCircle+0x13c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fb78 	bl	80033a0 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003cb0:	e061      	b.n	8003d76 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b298      	uxth	r0, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	88bb      	ldrh	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b299      	uxth	r1, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f7ff fd11 	bl	80036fc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	88ba      	ldrh	r2, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	b299      	uxth	r1, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f7ff fd00 	bl	80036fc <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d021      	beq.n	8003d46 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	b298      	uxth	r0, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	88ba      	ldrh	r2, [r7, #4]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b299      	uxth	r1, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7ff fcec 	bl	80036fc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	b298      	uxth	r0, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	88bb      	ldrh	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	b299      	uxth	r1, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	f7ff fcdb 	bl	80036fc <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da06      	bge.n	8003d5a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	3306      	adds	r3, #6
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e00a      	b.n	8003d70 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	009a      	lsls	r2, r3, #2
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	330a      	adds	r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
      current_y--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3301      	adds	r3, #1
 8003d74:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d999      	bls.n	8003cb2 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <BSP_LCD_FillCircle+0x138>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	490b      	ldr	r1, [pc, #44]	; (8003db0 <BSP_LCD_FillCircle+0x13c>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fb05 	bl	80033a0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	88b9      	ldrh	r1, [r7, #4]
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fd0b 	bl	80037b8 <BSP_LCD_DrawCircle>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000b98 	.word	0x20000b98
 8003db0:	20000b9c 	.word	0x20000b9c

08003db4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <BSP_LCD_DisplayOn+0x30>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <BSP_LCD_DisplayOn+0x30>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dce:	4806      	ldr	r0, [pc, #24]	; (8003de8 <BSP_LCD_DisplayOn+0x34>)
 8003dd0:	f003 fd7a 	bl	80078c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	4804      	ldr	r0, [pc, #16]	; (8003dec <BSP_LCD_DisplayOn+0x38>)
 8003dda:	f003 fd75 	bl	80078c8 <HAL_GPIO_WritePin>
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000ab0 	.word	0x20000ab0
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40022800 	.word	0x40022800

08003df0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b090      	sub	sp, #64	; 0x40
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003dfa:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4a63      	ldr	r2, [pc, #396]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e04:	6453      	str	r3, [r2, #68]	; 0x44
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e12:	4b5e      	ldr	r3, [pc, #376]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e2a:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a57      	ldr	r2, [pc, #348]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e30:	f043 0310 	orr.w	r3, r3, #16
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e42:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b49      	ldr	r3, [pc, #292]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a45      	ldr	r2, [pc, #276]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003ea2:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a39      	ldr	r2, [pc, #228]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003eba:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003ee2:	230e      	movs	r3, #14
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eea:	4619      	mov	r1, r3
 8003eec:	4828      	ldr	r0, [pc, #160]	; (8003f90 <BSP_LCD_MspInit+0x1a0>)
 8003eee:	f003 fa1b 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003efc:	2309      	movs	r3, #9
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f04:	4619      	mov	r1, r3
 8003f06:	4823      	ldr	r0, [pc, #140]	; (8003f94 <BSP_LCD_MspInit+0x1a4>)
 8003f08:	f003 fa0e 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003f0c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f12:	2302      	movs	r3, #2
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f16:	230e      	movs	r3, #14
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1e:	4619      	mov	r1, r3
 8003f20:	481d      	ldr	r0, [pc, #116]	; (8003f98 <BSP_LCD_MspInit+0x1a8>)
 8003f22:	f003 fa01 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003f26:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f30:	230e      	movs	r3, #14
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4818      	ldr	r0, [pc, #96]	; (8003f9c <BSP_LCD_MspInit+0x1ac>)
 8003f3c:	f003 f9f4 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003f40:	23f7      	movs	r3, #247	; 0xf7
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f44:	2302      	movs	r3, #2
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f48:	230e      	movs	r3, #14
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f50:	4619      	mov	r1, r3
 8003f52:	4813      	ldr	r0, [pc, #76]	; (8003fa0 <BSP_LCD_MspInit+0x1b0>)
 8003f54:	f003 f9e8 	bl	8007328 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f66:	4619      	mov	r1, r3
 8003f68:	480b      	ldr	r0, [pc, #44]	; (8003f98 <BSP_LCD_MspInit+0x1a8>)
 8003f6a:	f003 f9dd 	bl	8007328 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003f6e:	2308      	movs	r3, #8
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f72:	2301      	movs	r3, #1
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <BSP_LCD_MspInit+0x1b0>)
 8003f7e:	f003 f9d3 	bl	8007328 <HAL_GPIO_Init>
}
 8003f82:	bf00      	nop
 8003f84:	3740      	adds	r7, #64	; 0x40
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021800 	.word	0x40021800
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40022400 	.word	0x40022400
 8003fa0:	40022800 	.word	0x40022800

08003fa4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <BSP_LCD_ClockConfig+0x34>)
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <BSP_LCD_ClockConfig+0x34>)
 8003fb6:	22c0      	movs	r2, #192	; 0xc0
 8003fb8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <BSP_LCD_ClockConfig+0x34>)
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <BSP_LCD_ClockConfig+0x34>)
 8003fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <BSP_LCD_ClockConfig+0x34>)
 8003fca:	f005 fb65 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000bb4 	.word	0x20000bb4

08003fdc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	603a      	str	r2, [r7, #0]
 8003fe6:	80fb      	strh	r3, [r7, #6]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <DrawChar+0x168>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4953      	ldr	r1, [pc, #332]	; (8004148 <DrawChar+0x16c>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3308      	adds	r3, #8
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	88db      	ldrh	r3, [r3, #6]
 800400a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800400c:	4b4d      	ldr	r3, [pc, #308]	; (8004144 <DrawChar+0x168>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <DrawChar+0x16c>)
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3308      	adds	r3, #8
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	889b      	ldrh	r3, [r3, #4]
 8004022:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	3307      	adds	r3, #7
 8004028:	2b00      	cmp	r3, #0
 800402a:	da00      	bge.n	800402e <DrawChar+0x52>
 800402c:	3307      	adds	r3, #7
 800402e:	10db      	asrs	r3, r3, #3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	b2da      	uxtb	r2, r3
 8004036:	8a3b      	ldrh	r3, [r7, #16]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e076      	b.n	8004132 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004044:	8a3b      	ldrh	r3, [r7, #16]
 8004046:	3307      	adds	r3, #7
 8004048:	2b00      	cmp	r3, #0
 800404a:	da00      	bge.n	800404e <DrawChar+0x72>
 800404c:	3307      	adds	r3, #7
 800404e:	10db      	asrs	r3, r3, #3
 8004050:	461a      	mov	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	4413      	add	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800405e:	8a3b      	ldrh	r3, [r7, #16]
 8004060:	3307      	adds	r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	da00      	bge.n	8004068 <DrawChar+0x8c>
 8004066:	3307      	adds	r3, #7
 8004068:	10db      	asrs	r3, r3, #3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d002      	beq.n	8004074 <DrawChar+0x98>
 800406e:	2b02      	cmp	r3, #2
 8004070:	d004      	beq.n	800407c <DrawChar+0xa0>
 8004072:	e00c      	b.n	800408e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
      break;
 800407a:	e016      	b.n	80040aa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	3201      	adds	r2, #1
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
      break;
 800408c:	e00d      	b.n	80040aa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3301      	adds	r3, #1
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	4313      	orrs	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	3202      	adds	r2, #2
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
      break;
 80040a8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e036      	b.n	800411e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80040b0:	8a3a      	ldrh	r2, [r7, #16]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad2      	subs	r2, r2, r3
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	4413      	add	r3, r2
 80040ba:	3b01      	subs	r3, #1
 80040bc:	2201      	movs	r2, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	4413      	add	r3, r2
 80040d4:	b298      	uxth	r0, r3
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <DrawChar+0x168>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	491b      	ldr	r1, [pc, #108]	; (8004148 <DrawChar+0x16c>)
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f7ff fc4e 	bl	800398c <BSP_LCD_DrawPixel>
 80040f0:	e012      	b.n	8004118 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4413      	add	r3, r2
 80040fa:	b298      	uxth	r0, r3
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <DrawChar+0x168>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4911      	ldr	r1, [pc, #68]	; (8004148 <DrawChar+0x16c>)
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3304      	adds	r3, #4
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	88bb      	ldrh	r3, [r7, #4]
 8004112:	4619      	mov	r1, r3
 8004114:	f7ff fc3a 	bl	800398c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	3301      	adds	r3, #1
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	8a3b      	ldrh	r3, [r7, #16]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3c4      	bcc.n	80040b0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004126:	88bb      	ldrh	r3, [r7, #4]
 8004128:	3301      	adds	r3, #1
 800412a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	8a7b      	ldrh	r3, [r7, #18]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d384      	bcc.n	8004044 <DrawChar+0x68>
  }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000b98 	.word	0x20000b98
 8004148:	20000b9c 	.word	0x20000b9c

0800414c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <LL_FillBuffer+0x88>)
 800415c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004160:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <LL_FillBuffer+0x8c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <LL_FillBuffer+0x90>)
 8004168:	2134      	movs	r1, #52	; 0x34
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3348      	adds	r3, #72	; 0x48
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d103      	bne.n	8004180 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <LL_FillBuffer+0x88>)
 800417a:	2202      	movs	r2, #2
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	e002      	b.n	8004186 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <LL_FillBuffer+0x88>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <LL_FillBuffer+0x88>)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <LL_FillBuffer+0x88>)
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <LL_FillBuffer+0x94>)
 8004190:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004192:	4810      	ldr	r0, [pc, #64]	; (80041d4 <LL_FillBuffer+0x88>)
 8004194:	f002 fd2c 	bl	8006bf0 <HAL_DMA2D_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	480c      	ldr	r0, [pc, #48]	; (80041d4 <LL_FillBuffer+0x88>)
 80041a2:	f002 ff93 	bl	80070cc <HAL_DMA2D_ConfigLayer>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10e      	bne.n	80041ca <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	4807      	ldr	r0, [pc, #28]	; (80041d4 <LL_FillBuffer+0x88>)
 80041b8:	f002 fd64 	bl	8006c84 <HAL_DMA2D_Start>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80041c2:	210a      	movs	r1, #10
 80041c4:	4803      	ldr	r0, [pc, #12]	; (80041d4 <LL_FillBuffer+0x88>)
 80041c6:	f002 fd88 	bl	8006cda <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000b58 	.word	0x20000b58
 80041d8:	20000b98 	.word	0x20000b98
 80041dc:	20000ab0 	.word	0x20000ab0
 80041e0:	4002b000 	.word	0x4002b000

080041e4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 80041f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041f8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <LL_ConvertLineToARGB8888+0x84>)
 8004222:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004224:	480f      	ldr	r0, [pc, #60]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004226:	f002 fce3 	bl	8006bf0 <HAL_DMA2D_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d115      	bne.n	800425c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004230:	2101      	movs	r1, #1
 8004232:	480c      	ldr	r0, [pc, #48]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004234:	f002 ff4a 	bl	80070cc <HAL_DMA2D_ConfigLayer>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10e      	bne.n	800425c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	2301      	movs	r3, #1
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4806      	ldr	r0, [pc, #24]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 800424a:	f002 fd1b 	bl	8006c84 <HAL_DMA2D_Start>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004254:	210a      	movs	r1, #10
 8004256:	4803      	ldr	r0, [pc, #12]	; (8004264 <LL_ConvertLineToARGB8888+0x80>)
 8004258:	f002 fd3f 	bl	8006cda <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000b58 	.word	0x20000b58
 8004268:	4002b000 	.word	0x4002b000

0800426c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <BSP_SDRAM_Init+0xac>)
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <BSP_SDRAM_Init+0xb0>)
 8004274:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 8004278:	2202      	movs	r2, #2
 800427a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800427c:	4b28      	ldr	r3, [pc, #160]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 800427e:	2207      	movs	r2, #7
 8004280:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 8004284:	2204      	movs	r2, #4
 8004286:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 800428a:	2207      	movs	r2, #7
 800428c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 8004290:	2202      	movs	r2, #2
 8004292:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 8004296:	2202      	movs	r2, #2
 8004298:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 800429c:	2202      	movs	r2, #2
 800429e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80042a6:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042ae:	2204      	movs	r2, #4
 80042b0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80042b2:	4b19      	ldr	r3, [pc, #100]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042b4:	2210      	movs	r2, #16
 80042b6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042c4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042da:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042de:	2200      	movs	r2, #0
 80042e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80042e2:	2100      	movs	r1, #0
 80042e4:	480c      	ldr	r0, [pc, #48]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042e6:	f000 f87f 	bl	80043e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80042ea:	490d      	ldr	r1, [pc, #52]	; (8004320 <BSP_SDRAM_Init+0xb4>)
 80042ec:	480a      	ldr	r0, [pc, #40]	; (8004318 <BSP_SDRAM_Init+0xac>)
 80042ee:	f006 fa87 	bl	800a800 <HAL_SDRAM_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <BSP_SDRAM_Init+0xb8>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e002      	b.n	8004306 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <BSP_SDRAM_Init+0xb8>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004306:	f240 6003 	movw	r0, #1539	; 0x603
 800430a:	f000 f80d 	bl	8004328 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <BSP_SDRAM_Init+0xb8>)
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	4618      	mov	r0, r3
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000c38 	.word	0x20000c38
 800431c:	a0000140 	.word	0xa0000140
 8004320:	20000c6c 	.word	0x20000c6c
 8004324:	200000c4 	.word	0x200000c4

08004328 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800433c:	2210      	movs	r2, #16
 800433e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004342:	2201      	movs	r2, #1
 8004344:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004348:	2200      	movs	r2, #0
 800434a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800434c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004350:	4923      	ldr	r1, [pc, #140]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004352:	4824      	ldr	r0, [pc, #144]	; (80043e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004354:	f006 fa88 	bl	800a868 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004358:	2001      	movs	r0, #1
 800435a:	f001 fae1 	bl	8005920 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004360:	2202      	movs	r2, #2
 8004362:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004366:	2210      	movs	r2, #16
 8004368:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800436c:	2201      	movs	r2, #1
 800436e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004372:	2200      	movs	r2, #0
 8004374:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437a:	4919      	ldr	r1, [pc, #100]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800437c:	4819      	ldr	r0, [pc, #100]	; (80043e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800437e:	f006 fa73 	bl	800a868 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004384:	2203      	movs	r2, #3
 8004386:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438a:	2210      	movs	r2, #16
 800438c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004390:	2208      	movs	r2, #8
 8004392:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800439a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439e:	4910      	ldr	r1, [pc, #64]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a0:	4810      	ldr	r0, [pc, #64]	; (80043e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043a2:	f006 fa61 	bl	800a868 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80043a6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80043aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ae:	2204      	movs	r2, #4
 80043b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b4:	2210      	movs	r2, #16
 80043b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c8:	4905      	ldr	r1, [pc, #20]	; (80043e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ca:	4806      	ldr	r0, [pc, #24]	; (80043e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043cc:	f006 fa4c 	bl	800a868 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4804      	ldr	r0, [pc, #16]	; (80043e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043d4:	f006 fa7d 	bl	800a8d2 <HAL_SDRAM_ProgramRefreshRate>
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000c88 	.word	0x20000c88
 80043e4:	20000c38 	.word	0x20000c38

080043e8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b090      	sub	sp, #64	; 0x40
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043f2:	4b70      	ldr	r3, [pc, #448]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	4a6f      	ldr	r2, [pc, #444]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6393      	str	r3, [r2, #56]	; 0x38
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800440a:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
 8004416:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004422:	4b64      	ldr	r3, [pc, #400]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	4a63      	ldr	r2, [pc, #396]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	6313      	str	r3, [r2, #48]	; 0x30
 800442e:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800443a:	4b5e      	ldr	r3, [pc, #376]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4a57      	ldr	r2, [pc, #348]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004458:	f043 0310 	orr.w	r3, r3, #16
 800445c:	6313      	str	r3, [r2, #48]	; 0x30
 800445e:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004470:	f043 0320 	orr.w	r3, r3, #32
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004482:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a4b      	ldr	r2, [pc, #300]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800449a:	4b46      	ldr	r3, [pc, #280]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a45      	ldr	r2, [pc, #276]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b43      	ldr	r3, [pc, #268]	; (80045b4 <BSP_SDRAM_MspInit+0x1cc>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80044b6:	2301      	movs	r3, #1
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80044ba:	2302      	movs	r3, #2
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80044be:	230c      	movs	r3, #12
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80044c2:	2308      	movs	r3, #8
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80044c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ca:	4619      	mov	r1, r3
 80044cc:	483a      	ldr	r0, [pc, #232]	; (80045b8 <BSP_SDRAM_MspInit+0x1d0>)
 80044ce:	f002 ff2b 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80044d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80044d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044dc:	4619      	mov	r1, r3
 80044de:	4837      	ldr	r0, [pc, #220]	; (80045bc <BSP_SDRAM_MspInit+0x1d4>)
 80044e0:	f002 ff22 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80044e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80044ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	4833      	ldr	r0, [pc, #204]	; (80045c0 <BSP_SDRAM_MspInit+0x1d8>)
 80044f2:	f002 ff19 	bl	8007328 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80044f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80044fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004500:	4619      	mov	r1, r3
 8004502:	4830      	ldr	r0, [pc, #192]	; (80045c4 <BSP_SDRAM_MspInit+0x1dc>)
 8004504:	f002 ff10 	bl	8007328 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004508:	f248 1333 	movw	r3, #33075	; 0x8133
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800450e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004512:	4619      	mov	r1, r3
 8004514:	482c      	ldr	r0, [pc, #176]	; (80045c8 <BSP_SDRAM_MspInit+0x1e0>)
 8004516:	f002 ff07 	bl	8007328 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800451a:	2328      	movs	r3, #40	; 0x28
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800451e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004522:	4619      	mov	r1, r3
 8004524:	4829      	ldr	r0, [pc, #164]	; (80045cc <BSP_SDRAM_MspInit+0x1e4>)
 8004526:	f002 feff 	bl	8007328 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800452a:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004544:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800454c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004554:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004558:	2200      	movs	r2, #0
 800455a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800455c:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 800455e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004562:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004566:	2200      	movs	r2, #0
 8004568:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 800456c:	2203      	movs	r2, #3
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004572:	2200      	movs	r2, #0
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <BSP_SDRAM_MspInit+0x1ec>)
 8004580:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800458e:	4810      	ldr	r0, [pc, #64]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004590:	f002 f98c 	bl	80068ac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004594:	480e      	ldr	r0, [pc, #56]	; (80045d0 <BSP_SDRAM_MspInit+0x1e8>)
 8004596:	f002 f8db 	bl	8006750 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	210f      	movs	r1, #15
 800459e:	2038      	movs	r0, #56	; 0x38
 80045a0:	f001 ffcc 	bl	800653c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80045a4:	2038      	movs	r0, #56	; 0x38
 80045a6:	f001 ffe5 	bl	8006574 <HAL_NVIC_EnableIRQ>
}
 80045aa:	bf00      	nop
 80045ac:	3740      	adds	r7, #64	; 0x40
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40021c00 	.word	0x40021c00
 80045d0:	20000c98 	.word	0x20000c98
 80045d4:	40026410 	.word	0x40026410

080045d8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	460a      	mov	r2, r1
 80045e2:	80fb      	strh	r3, [r7, #6]
 80045e4:	4613      	mov	r3, r2
 80045e6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <BSP_TS_Init+0x68>)
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80045f2:	4a14      	ldr	r2, [pc, #80]	; (8004644 <BSP_TS_Init+0x6c>)
 80045f4:	88bb      	ldrh	r3, [r7, #4]
 80045f6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <BSP_TS_Init+0x70>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2070      	movs	r0, #112	; 0x70
 80045fe:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <BSP_TS_Init+0x70>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2070      	movs	r0, #112	; 0x70
 8004606:	4798      	blx	r3
 8004608:	4603      	mov	r3, r0
 800460a:	2b51      	cmp	r3, #81	; 0x51
 800460c:	d111      	bne.n	8004632 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800460e:	4b0f      	ldr	r3, [pc, #60]	; (800464c <BSP_TS_Init+0x74>)
 8004610:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <BSP_TS_Init+0x70>)
 8004612:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <BSP_TS_Init+0x78>)
 8004616:	2270      	movs	r2, #112	; 0x70
 8004618:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <BSP_TS_Init+0x7c>)
 800461c:	2208      	movs	r2, #8
 800461e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <BSP_TS_Init+0x74>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <BSP_TS_Init+0x78>)
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	b292      	uxth	r2, r2
 800462c:	4610      	mov	r0, r2
 800462e:	4798      	blx	r3
 8004630:	e001      	b.n	8004636 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004632:	2303      	movs	r3, #3
 8004634:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000cfc 	.word	0x20000cfc
 8004644:	20000cfe 	.word	0x20000cfe
 8004648:	20000000 	.word	0x20000000
 800464c:	20000cf8 	.word	0x20000cf8
 8004650:	20000d01 	.word	0x20000d01
 8004654:	20000d00 	.word	0x20000d00

08004658 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b097      	sub	sp, #92	; 0x5c
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004672:	4bb4      	ldr	r3, [pc, #720]	; (8004944 <BSP_TS_GetState+0x2ec>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	4ab3      	ldr	r2, [pc, #716]	; (8004948 <BSP_TS_GetState+0x2f0>)
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	b292      	uxth	r2, r2
 800467e:	4610      	mov	r0, r2
 8004680:	4798      	blx	r3
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8196 	beq.w	80049c0 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004694:	2300      	movs	r3, #0
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
 8004698:	e185      	b.n	80049a6 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800469a:	4baa      	ldr	r3, [pc, #680]	; (8004944 <BSP_TS_GetState+0x2ec>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	4aa9      	ldr	r2, [pc, #676]	; (8004948 <BSP_TS_GetState+0x2f0>)
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	b290      	uxth	r0, r2
 80046a6:	f107 0120 	add.w	r1, r7, #32
 80046aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ac:	0052      	lsls	r2, r2, #1
 80046ae:	188c      	adds	r4, r1, r2
 80046b0:	f107 0114 	add.w	r1, r7, #20
 80046b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b6:	0052      	lsls	r2, r2, #1
 80046b8:	440a      	add	r2, r1
 80046ba:	4621      	mov	r1, r4
 80046bc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80046be:	4ba3      	ldr	r3, [pc, #652]	; (800494c <BSP_TS_GetState+0x2f4>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d117      	bne.n	80046f6 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80046c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	3350      	adds	r3, #80	; 0x50
 80046cc:	443b      	add	r3, r7
 80046ce:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	3350      	adds	r3, #80	; 0x50
 80046d8:	443b      	add	r3, r7
 80046da:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80046de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	3350      	adds	r3, #80	; 0x50
 80046e4:	443b      	add	r3, r7
 80046e6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80046ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	3350      	adds	r3, #80	; 0x50
 80046f0:	443b      	add	r3, r7
 80046f2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80046f6:	4b95      	ldr	r3, [pc, #596]	; (800494c <BSP_TS_GetState+0x2f4>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	3350      	adds	r3, #80	; 0x50
 8004708:	443b      	add	r3, r7
 800470a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800470e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004712:	b29a      	uxth	r2, r3
 8004714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	3350      	adds	r3, #80	; 0x50
 800471a:	443b      	add	r3, r7
 800471c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004720:	4b8a      	ldr	r3, [pc, #552]	; (800494c <BSP_TS_GetState+0x2f4>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800472c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	3350      	adds	r3, #80	; 0x50
 8004732:	443b      	add	r3, r7
 8004734:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004738:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800473c:	b29a      	uxth	r2, r3
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	3350      	adds	r3, #80	; 0x50
 8004744:	443b      	add	r3, r7
 8004746:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800474a:	4b80      	ldr	r3, [pc, #512]	; (800494c <BSP_TS_GetState+0x2f4>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	3350      	adds	r3, #80	; 0x50
 800475c:	443b      	add	r3, r7
 800475e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	3350      	adds	r3, #80	; 0x50
 8004768:	443b      	add	r3, r7
 800476a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800476e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	3350      	adds	r3, #80	; 0x50
 8004774:	443b      	add	r3, r7
 8004776:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800477a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	3350      	adds	r3, #80	; 0x50
 8004780:	443b      	add	r3, r7
 8004782:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	3350      	adds	r3, #80	; 0x50
 800478c:	443b      	add	r3, r7
 800478e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004792:	4619      	mov	r1, r3
 8004794:	4a6e      	ldr	r2, [pc, #440]	; (8004950 <BSP_TS_GetState+0x2f8>)
 8004796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	4299      	cmp	r1, r3
 800479e:	d90d      	bls.n	80047bc <BSP_TS_GetState+0x164>
 80047a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	3350      	adds	r3, #80	; 0x50
 80047a6:	443b      	add	r3, r7
 80047a8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80047ac:	4968      	ldr	r1, [pc, #416]	; (8004950 <BSP_TS_GetState+0x2f8>)
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	e00c      	b.n	80047d6 <BSP_TS_GetState+0x17e>
 80047bc:	4a64      	ldr	r2, [pc, #400]	; (8004950 <BSP_TS_GetState+0x2f8>)
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	3350      	adds	r3, #80	; 0x50
 80047cc:	443b      	add	r3, r7
 80047ce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80047da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	3350      	adds	r3, #80	; 0x50
 80047e0:	443b      	add	r3, r7
 80047e2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80047e6:	4619      	mov	r1, r3
 80047e8:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <BSP_TS_GetState+0x2fc>)
 80047ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d90d      	bls.n	8004810 <BSP_TS_GetState+0x1b8>
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	3350      	adds	r3, #80	; 0x50
 80047fa:	443b      	add	r3, r7
 80047fc:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004800:	4954      	ldr	r1, [pc, #336]	; (8004954 <BSP_TS_GetState+0x2fc>)
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004808:	b29b      	uxth	r3, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	b29b      	uxth	r3, r3
 800480e:	e00c      	b.n	800482a <BSP_TS_GetState+0x1d2>
 8004810:	4a50      	ldr	r2, [pc, #320]	; (8004954 <BSP_TS_GetState+0x2fc>)
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004818:	b29a      	uxth	r2, r3
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	3350      	adds	r3, #80	; 0x50
 8004820:	443b      	add	r3, r7
 8004822:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800482e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004832:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004836:	4413      	add	r3, r2
 8004838:	2b05      	cmp	r3, #5
 800483a:	dd15      	ble.n	8004868 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 800483c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	3350      	adds	r3, #80	; 0x50
 8004842:	443b      	add	r3, r7
 8004844:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004848:	4619      	mov	r1, r3
 800484a:	4a41      	ldr	r2, [pc, #260]	; (8004950 <BSP_TS_GetState+0x2f8>)
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	3350      	adds	r3, #80	; 0x50
 8004858:	443b      	add	r3, r7
 800485a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800485e:	4619      	mov	r1, r3
 8004860:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <BSP_TS_GetState+0x2fc>)
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <BSP_TS_GetState+0x2f0>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d119      	bne.n	80048a4 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	3350      	adds	r3, #80	; 0x50
 8004876:	443b      	add	r3, r7
 8004878:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	460a      	mov	r2, r1
 8004886:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	3350      	adds	r3, #80	; 0x50
 800488e:	443b      	add	r3, r7
 8004890:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004898:	3304      	adds	r3, #4
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	460a      	mov	r2, r1
 80048a0:	809a      	strh	r2, [r3, #4]
 80048a2:	e022      	b.n	80048ea <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <BSP_TS_GetState+0x300>)
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4a29      	ldr	r2, [pc, #164]	; (8004950 <BSP_TS_GetState+0x2f8>)
 80048ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	0b1b      	lsrs	r3, r3, #12
 80048b8:	b299      	uxth	r1, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	460a      	mov	r2, r1
 80048c4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80048c6:	4b25      	ldr	r3, [pc, #148]	; (800495c <BSP_TS_GetState+0x304>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4a21      	ldr	r2, [pc, #132]	; (8004954 <BSP_TS_GetState+0x2fc>)
 80048ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	0b1b      	lsrs	r3, r3, #12
 80048da:	b299      	uxth	r1, r3
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	3304      	adds	r3, #4
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	460a      	mov	r2, r1
 80048e8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <BSP_TS_GetState+0x2f0>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b298      	uxth	r0, r3
 80048f0:	f107 010c 	add.w	r1, r7, #12
 80048f4:	f107 0210 	add.w	r2, r7, #16
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	460b      	mov	r3, r1
 8004900:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004902:	f7fc f83b 	bl	800097c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	b2d9      	uxtb	r1, r3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	4413      	add	r3, r2
 8004910:	3316      	adds	r3, #22
 8004912:	460a      	mov	r2, r1
 8004914:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	b2d9      	uxtb	r1, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491e:	4413      	add	r3, r2
 8004920:	3320      	adds	r3, #32
 8004922:	460a      	mov	r2, r1
 8004924:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d835      	bhi.n	8004998 <BSP_TS_GetState+0x340>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <BSP_TS_GetState+0x2dc>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004961 	.word	0x08004961
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800497d 	.word	0x0800497d
 8004940:	0800498b 	.word	0x0800498b
 8004944:	20000cf8 	.word	0x20000cf8
 8004948:	20000d01 	.word	0x20000d01
 800494c:	20000d00 	.word	0x20000d00
 8004950:	20000d04 	.word	0x20000d04
 8004954:	20000d18 	.word	0x20000d18
 8004958:	20000cfc 	.word	0x20000cfc
 800495c:	20000cfe 	.word	0x20000cfe
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004964:	4413      	add	r3, r2
 8004966:	331b      	adds	r3, #27
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
          break;
 800496c:	e018      	b.n	80049a0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	4413      	add	r3, r2
 8004974:	331b      	adds	r3, #27
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
          break;
 800497a:	e011      	b.n	80049a0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004980:	4413      	add	r3, r2
 8004982:	331b      	adds	r3, #27
 8004984:	2203      	movs	r2, #3
 8004986:	701a      	strb	r2, [r3, #0]
          break;
 8004988:	e00a      	b.n	80049a0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498e:	4413      	add	r3, r2
 8004990:	331b      	adds	r3, #27
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
          break;
 8004996:	e003      	b.n	80049a0 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800499e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80049a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a2:	3301      	adds	r3, #1
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ae:	4293      	cmp	r3, r2
 80049b0:	f4ff ae73 	bcc.w	800469a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f809 	bl	80049cc <BSP_TS_Get_GestureId>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80049c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3754      	adds	r7, #84	; 0x54
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <BSP_TS_Get_GestureId+0x100>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f107 0208 	add.w	r2, r7, #8
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fb ffae 	bl	800094a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b49      	cmp	r3, #73	; 0x49
 80049f2:	d05e      	beq.n	8004ab2 <BSP_TS_Get_GestureId+0xe6>
 80049f4:	2b49      	cmp	r3, #73	; 0x49
 80049f6:	d860      	bhi.n	8004aba <BSP_TS_Get_GestureId+0xee>
 80049f8:	2b1c      	cmp	r3, #28
 80049fa:	d83f      	bhi.n	8004a7c <BSP_TS_Get_GestureId+0xb0>
 80049fc:	2b1c      	cmp	r3, #28
 80049fe:	d85c      	bhi.n	8004aba <BSP_TS_Get_GestureId+0xee>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <BSP_TS_Get_GestureId+0x3c>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a83 	.word	0x08004a83
 8004a0c:	08004abb 	.word	0x08004abb
 8004a10:	08004abb 	.word	0x08004abb
 8004a14:	08004abb 	.word	0x08004abb
 8004a18:	08004abb 	.word	0x08004abb
 8004a1c:	08004abb 	.word	0x08004abb
 8004a20:	08004abb 	.word	0x08004abb
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004abb 	.word	0x08004abb
 8004a2c:	08004abb 	.word	0x08004abb
 8004a30:	08004abb 	.word	0x08004abb
 8004a34:	08004abb 	.word	0x08004abb
 8004a38:	08004abb 	.word	0x08004abb
 8004a3c:	08004abb 	.word	0x08004abb
 8004a40:	08004abb 	.word	0x08004abb
 8004a44:	08004abb 	.word	0x08004abb
 8004a48:	08004a8b 	.word	0x08004a8b
 8004a4c:	08004abb 	.word	0x08004abb
 8004a50:	08004abb 	.word	0x08004abb
 8004a54:	08004abb 	.word	0x08004abb
 8004a58:	08004a93 	.word	0x08004a93
 8004a5c:	08004abb 	.word	0x08004abb
 8004a60:	08004abb 	.word	0x08004abb
 8004a64:	08004abb 	.word	0x08004abb
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004abb 	.word	0x08004abb
 8004a70:	08004abb 	.word	0x08004abb
 8004a74:	08004abb 	.word	0x08004abb
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d014      	beq.n	8004aaa <BSP_TS_Get_GestureId+0xde>
 8004a80:	e01b      	b.n	8004aba <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a88:	e01a      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a90:	e016      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a98:	e012      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004aa0:	e00e      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004aa8:	e00a      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2205      	movs	r2, #5
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ab0:	e006      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2206      	movs	r2, #6
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ab8:	e002      	b.n	8004ac0 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
      break;
 8004abe:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000d01 	.word	0x20000d01

08004ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <HAL_MspInit+0x4c>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_MspInit+0x4c>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_MspInit+0x4c>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_MspInit+0x4c>)
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_MspInit+0x4c>)
 8004af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af8:	6453      	str	r3, [r2, #68]	; 0x44
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_MspInit+0x4c>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	210f      	movs	r1, #15
 8004b0a:	f06f 0001 	mvn.w	r0, #1
 8004b0e:	f001 fd15 	bl	800653c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800

08004b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	; 0x30
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b28:	f107 031c 	add.w	r3, r7, #28
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	60da      	str	r2, [r3, #12]
 8004b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <HAL_ADC_MspInit+0x118>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d12c      	bne.n	8004b9c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b42:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	4a3d      	ldr	r2, [pc, #244]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5a:	4b38      	ldr	r3, [pc, #224]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a37      	ldr	r2, [pc, #220]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b76:	2303      	movs	r3, #3
 8004b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	f107 031c 	add.w	r3, r7, #28
 8004b82:	4619      	mov	r1, r3
 8004b84:	482e      	ldr	r0, [pc, #184]	; (8004c40 <HAL_ADC_MspInit+0x120>)
 8004b86:	f002 fbcf 	bl	8007328 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2107      	movs	r1, #7
 8004b8e:	2012      	movs	r0, #18
 8004b90:	f001 fcd4 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004b94:	2012      	movs	r0, #18
 8004b96:	f001 fced 	bl	8006574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004b9a:	e049      	b.n	8004c30 <HAL_ADC_MspInit+0x110>
  else if(hadc->Instance==ADC3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <HAL_ADC_MspInit+0x124>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d144      	bne.n	8004c30 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bc4:	f043 0320 	orr.w	r3, r3, #32
 8004bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	6313      	str	r3, [r2, #48]	; 0x30
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_ADC_MspInit+0x11c>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004bee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004bfc:	f107 031c 	add.w	r3, r7, #28
 8004c00:	4619      	mov	r1, r3
 8004c02:	4811      	ldr	r0, [pc, #68]	; (8004c48 <HAL_ADC_MspInit+0x128>)
 8004c04:	f002 fb90 	bl	8007328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c14:	f107 031c 	add.w	r3, r7, #28
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4809      	ldr	r0, [pc, #36]	; (8004c40 <HAL_ADC_MspInit+0x120>)
 8004c1c:	f002 fb84 	bl	8007328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2107      	movs	r1, #7
 8004c24:	2012      	movs	r0, #18
 8004c26:	f001 fc89 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004c2a:	2012      	movs	r0, #18
 8004c2c:	f001 fca2 	bl	8006574 <HAL_NVIC_EnableIRQ>
}
 8004c30:	bf00      	nop
 8004c32:	3730      	adds	r7, #48	; 0x30
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40012000 	.word	0x40012000
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40020000 	.word	0x40020000
 8004c44:	40012200 	.word	0x40012200
 8004c48:	40021400 	.word	0x40021400

08004c4c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_DAC_MspInit+0x84>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d12b      	bne.n	8004cc6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a12      	ldr	r2, [pc, #72]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_DAC_MspInit+0x88>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004caa:	f107 0314 	add.w	r3, r7, #20
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <HAL_DAC_MspInit+0x8c>)
 8004cb2:	f002 fb39 	bl	8007328 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	210f      	movs	r1, #15
 8004cba:	2036      	movs	r0, #54	; 0x36
 8004cbc:	f001 fc3e 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cc0:	2036      	movs	r0, #54	; 0x36
 8004cc2:	f001 fc57 	bl	8006574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004cc6:	bf00      	nop
 8004cc8:	3728      	adds	r7, #40	; 0x28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40007400 	.word	0x40007400
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40020000 	.word	0x40020000

08004cdc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <HAL_DMA2D_MspInit+0x44>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d113      	bne.n	8004d16 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_DMA2D_MspInit+0x48>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <HAL_DMA2D_MspInit+0x48>)
 8004cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_DMA2D_MspInit+0x48>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2105      	movs	r1, #5
 8004d0a:	205a      	movs	r0, #90	; 0x5a
 8004d0c:	f001 fc16 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004d10:	205a      	movs	r0, #90	; 0x5a
 8004d12:	f001 fc2f 	bl	8006574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	4002b000 	.word	0x4002b000
 8004d24:	40023800 	.word	0x40023800

08004d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b0ac      	sub	sp, #176	; 0xb0
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	2284      	movs	r2, #132	; 0x84
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f00a fe01 	bl	800f950 <memset>
  if(hi2c->Instance==I2C1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a44      	ldr	r2, [pc, #272]	; (8004e64 <HAL_I2C_MspInit+0x13c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d13d      	bne.n	8004dd4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d62:	f107 0318 	add.w	r3, r7, #24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 fc96 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004d72:	f7fe f825 	bl	8002dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	6313      	str	r3, [r2, #48]	; 0x30
 8004d82:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d96:	2312      	movs	r3, #18
 8004d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da2:	2303      	movs	r3, #3
 8004da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004da8:	2304      	movs	r3, #4
 8004daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004db2:	4619      	mov	r1, r3
 8004db4:	482d      	ldr	r0, [pc, #180]	; (8004e6c <HAL_I2C_MspInit+0x144>)
 8004db6:	f002 fab7 	bl	8007328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dba:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004dd2:	e042      	b.n	8004e5a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_I2C_MspInit+0x148>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d13d      	bne.n	8004e5a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dea:	f107 0318 	add.w	r3, r7, #24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 fc52 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004dfa:	f7fd ffe1 	bl	8002dc0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004e16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e1e:	2312      	movs	r3, #18
 8004e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e30:	2304      	movs	r3, #4
 8004e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	480d      	ldr	r0, [pc, #52]	; (8004e74 <HAL_I2C_MspInit+0x14c>)
 8004e3e:	f002 fa73 	bl	8007328 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_I2C_MspInit+0x140>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	37b0      	adds	r7, #176	; 0xb0
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40005400 	.word	0x40005400
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40020400 	.word	0x40020400
 8004e70:	40005c00 	.word	0x40005c00
 8004e74:	40021c00 	.word	0x40021c00

08004e78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <HAL_I2C_MspDeInit+0x64>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d110      	bne.n	8004eac <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_I2C_MspDeInit+0x68>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <HAL_I2C_MspDeInit+0x68>)
 8004e90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e94:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e9a:	4812      	ldr	r0, [pc, #72]	; (8004ee4 <HAL_I2C_MspDeInit+0x6c>)
 8004e9c:	f002 fbf0 	bl	8007680 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ea4:	480f      	ldr	r0, [pc, #60]	; (8004ee4 <HAL_I2C_MspDeInit+0x6c>)
 8004ea6:	f002 fbeb 	bl	8007680 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004eaa:	e013      	b.n	8004ed4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ee8 <HAL_I2C_MspDeInit+0x70>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_I2C_MspDeInit+0x68>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_I2C_MspDeInit+0x68>)
 8004ebc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ec0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	4809      	ldr	r0, [pc, #36]	; (8004eec <HAL_I2C_MspDeInit+0x74>)
 8004ec6:	f002 fbdb 	bl	8007680 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ece:	4807      	ldr	r0, [pc, #28]	; (8004eec <HAL_I2C_MspDeInit+0x74>)
 8004ed0:	f002 fbd6 	bl	8007680 <HAL_GPIO_DeInit>
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40005400 	.word	0x40005400
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020400 	.word	0x40020400
 8004ee8:	40005c00 	.word	0x40005c00
 8004eec:	40021c00 	.word	0x40021c00

08004ef0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	; 0x38
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a55      	ldr	r2, [pc, #340]	; (8005064 <HAL_LTDC_MspInit+0x174>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	f040 80a3 	bne.w	800505a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004f14:	4b54      	ldr	r3, [pc, #336]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	4a53      	ldr	r2, [pc, #332]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8004f20:	4b51      	ldr	r3, [pc, #324]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f2c:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f32:	f043 0310 	orr.w	r3, r3, #16
 8004f36:	6313      	str	r3, [r2, #48]	; 0x30
 8004f38:	4b4b      	ldr	r3, [pc, #300]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004f44:	4b48      	ldr	r3, [pc, #288]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	4a47      	ldr	r2, [pc, #284]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f50:	4b45      	ldr	r3, [pc, #276]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004f5c:	4b42      	ldr	r3, [pc, #264]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	4a41      	ldr	r2, [pc, #260]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f66:	6313      	str	r3, [r2, #48]	; 0x30
 8004f68:	4b3f      	ldr	r3, [pc, #252]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f74:	4b3c      	ldr	r3, [pc, #240]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f80:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f8c:	4b36      	ldr	r3, [pc, #216]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	4a35      	ldr	r2, [pc, #212]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f96:	6313      	str	r3, [r2, #48]	; 0x30
 8004f98:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_LTDC_MspInit+0x178>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fb4:	230e      	movs	r3, #14
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	482b      	ldr	r0, [pc, #172]	; (800506c <HAL_LTDC_MspInit+0x17c>)
 8004fc0:	f002 f9b2 	bl	8007328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004fc4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fd6:	230e      	movs	r3, #14
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4823      	ldr	r0, [pc, #140]	; (8005070 <HAL_LTDC_MspInit+0x180>)
 8004fe2:	f002 f9a1 	bl	8007328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004fe6:	23f7      	movs	r3, #247	; 0xf7
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fea:	2302      	movs	r3, #2
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ff6:	230e      	movs	r3, #14
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffe:	4619      	mov	r1, r3
 8005000:	481c      	ldr	r0, [pc, #112]	; (8005074 <HAL_LTDC_MspInit+0x184>)
 8005002:	f002 f991 	bl	8007328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005014:	2300      	movs	r3, #0
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005018:	2309      	movs	r3, #9
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800501c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005020:	4619      	mov	r1, r3
 8005022:	4815      	ldr	r0, [pc, #84]	; (8005078 <HAL_LTDC_MspInit+0x188>)
 8005024:	f002 f980 	bl	8007328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005028:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	2302      	movs	r3, #2
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005036:	2300      	movs	r3, #0
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800503a:	230e      	movs	r3, #14
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800503e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005042:	4619      	mov	r1, r3
 8005044:	480d      	ldr	r0, [pc, #52]	; (800507c <HAL_LTDC_MspInit+0x18c>)
 8005046:	f002 f96f 	bl	8007328 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800504a:	2200      	movs	r2, #0
 800504c:	2105      	movs	r1, #5
 800504e:	2058      	movs	r0, #88	; 0x58
 8005050:	f001 fa74 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005054:	2058      	movs	r0, #88	; 0x58
 8005056:	f001 fa8d 	bl	8006574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800505a:	bf00      	nop
 800505c:	3738      	adds	r7, #56	; 0x38
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40016800 	.word	0x40016800
 8005068:	40023800 	.word	0x40023800
 800506c:	40021000 	.word	0x40021000
 8005070:	40022400 	.word	0x40022400
 8005074:	40022800 	.word	0x40022800
 8005078:	40021800 	.word	0x40021800
 800507c:	40022000 	.word	0x40022000

08005080 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <HAL_RNG_MspInit+0x44>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d113      	bne.n	80050ba <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_RNG_MspInit+0x48>)
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <HAL_RNG_MspInit+0x48>)
 8005098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509c:	6353      	str	r3, [r2, #52]	; 0x34
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_RNG_MspInit+0x48>)
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2105      	movs	r1, #5
 80050ae:	2050      	movs	r0, #80	; 0x50
 80050b0:	f001 fa44 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80050b4:	2050      	movs	r0, #80	; 0x50
 80050b6:	f001 fa5d 	bl	8006574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	50060800 	.word	0x50060800
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b0a4      	sub	sp, #144	; 0x90
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	2284      	movs	r2, #132	; 0x84
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f00a fc37 	bl	800f950 <memset>
  if(hrtc->Instance==RTC)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <HAL_RTC_MspInit+0x54>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d114      	bne.n	8005116 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050ec:	2320      	movs	r3, #32
 80050ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 facc 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005106:	f7fd fe5b 	bl	8002dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RTC_MspInit+0x58>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <HAL_RTC_MspInit+0x58>)
 8005110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005116:	bf00      	nop
 8005118:	3790      	adds	r7, #144	; 0x90
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40002800 	.word	0x40002800
 8005124:	40023800 	.word	0x40023800

08005128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a25      	ldr	r2, [pc, #148]	; (80051dc <HAL_SPI_MspInit+0xb4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d144      	bne.n	80051d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800514a:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005154:	6413      	str	r3, [r2, #64]	; 0x40
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517a:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	6313      	str	r3, [r2, #48]	; 0x30
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005192:	2303      	movs	r3, #3
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051a2:	2305      	movs	r3, #5
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	480d      	ldr	r0, [pc, #52]	; (80051e4 <HAL_SPI_MspInit+0xbc>)
 80051ae:	f002 f8bb 	bl	8007328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80051b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80051b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051c4:	2305      	movs	r3, #5
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4619      	mov	r1, r3
 80051ce:	4806      	ldr	r0, [pc, #24]	; (80051e8 <HAL_SPI_MspInit+0xc0>)
 80051d0:	f002 f8aa 	bl	8007328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051d4:	bf00      	nop
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40003800 	.word	0x40003800
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40020400 	.word	0x40020400

080051ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <HAL_TIM_Base_MspInit+0x10c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10c      	bne.n	8005228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800520e:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6453      	str	r3, [r2, #68]	; 0x44
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005226:	e062      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d10c      	bne.n	800524c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005232:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
}
 800524a:	e050      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <HAL_TIM_Base_MspInit+0x114>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	6413      	str	r3, [r2, #64]	; 0x40
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	69bb      	ldr	r3, [r7, #24]
}
 800526e:	e03e      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a23      	ldr	r2, [pc, #140]	; (8005304 <HAL_TIM_Base_MspInit+0x118>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005280:	f043 0308 	orr.w	r3, r3, #8
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	e02c      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIM_Base_MspInit+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d127      	bne.n	80052ee <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6313      	str	r3, [r2, #48]	; 0x30
 80052c2:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052ce:	2304      	movs	r3, #4
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80052de:	2303      	movs	r3, #3
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e6:	4619      	mov	r1, r3
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <HAL_TIM_Base_MspInit+0x120>)
 80052ea:	f002 f81d 	bl	8007328 <HAL_GPIO_Init>
}
 80052ee:	bf00      	nop
 80052f0:	3738      	adds	r7, #56	; 0x38
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40000400 	.word	0x40000400
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40010400 	.word	0x40010400
 800530c:	40022000 	.word	0x40022000

08005310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0b0      	sub	sp, #192	; 0xc0
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532c:	2284      	movs	r2, #132	; 0x84
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f00a fb0d 	bl	800f950 <memset>
  if(huart->Instance==UART7)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a79      	ldr	r2, [pc, #484]	; (8005520 <HAL_UART_MspInit+0x210>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d13d      	bne.n	80053bc <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800534c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005350:	4618      	mov	r0, r3
 8005352:	f004 f9a1 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800535c:	f7fd fd30 	bl	8002dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005360:	4b70      	ldr	r3, [pc, #448]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	4a6f      	ldr	r2, [pc, #444]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800536a:	6413      	str	r3, [r2, #64]	; 0x40
 800536c:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <HAL_UART_MspInit+0x214>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005378:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <HAL_UART_MspInit+0x214>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a69      	ldr	r2, [pc, #420]	; (8005524 <HAL_UART_MspInit+0x214>)
 800537e:	f043 0320 	orr.w	r3, r3, #32
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b67      	ldr	r3, [pc, #412]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	623b      	str	r3, [r7, #32]
 800538e:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005390:	23c0      	movs	r3, #192	; 0xc0
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80053a8:	2308      	movs	r3, #8
 80053aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80053b2:	4619      	mov	r1, r3
 80053b4:	485c      	ldr	r0, [pc, #368]	; (8005528 <HAL_UART_MspInit+0x218>)
 80053b6:	f001 ffb7 	bl	8007328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80053ba:	e0ac      	b.n	8005516 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5a      	ldr	r2, [pc, #360]	; (800552c <HAL_UART_MspInit+0x21c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d165      	bne.n	8005492 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053ca:	2300      	movs	r3, #0
 80053cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d2:	4618      	mov	r0, r3
 80053d4:	f004 f960 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80053de:	f7fd fcef 	bl	8002dc0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80053e2:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_UART_MspInit+0x214>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	4a4f      	ldr	r2, [pc, #316]	; (8005524 <HAL_UART_MspInit+0x214>)
 80053e8:	f043 0310 	orr.w	r3, r3, #16
 80053ec:	6453      	str	r3, [r2, #68]	; 0x44
 80053ee:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <HAL_UART_MspInit+0x214>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fa:	4b4a      	ldr	r3, [pc, #296]	; (8005524 <HAL_UART_MspInit+0x214>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a49      	ldr	r2, [pc, #292]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005412:	4b44      	ldr	r3, [pc, #272]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a43      	ldr	r2, [pc, #268]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b41      	ldr	r3, [pc, #260]	; (8005524 <HAL_UART_MspInit+0x214>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005430:	2302      	movs	r3, #2
 8005432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005442:	2307      	movs	r3, #7
 8005444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005448:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800544c:	4619      	mov	r1, r3
 800544e:	4838      	ldr	r0, [pc, #224]	; (8005530 <HAL_UART_MspInit+0x220>)
 8005450:	f001 ff6a 	bl	8007328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545c:	2302      	movs	r3, #2
 800545e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800546e:	2307      	movs	r3, #7
 8005470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005478:	4619      	mov	r1, r3
 800547a:	482e      	ldr	r0, [pc, #184]	; (8005534 <HAL_UART_MspInit+0x224>)
 800547c:	f001 ff54 	bl	8007328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8005480:	2200      	movs	r2, #0
 8005482:	2107      	movs	r1, #7
 8005484:	2025      	movs	r0, #37	; 0x25
 8005486:	f001 f859 	bl	800653c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800548a:	2025      	movs	r0, #37	; 0x25
 800548c:	f001 f872 	bl	8006574 <HAL_NVIC_EnableIRQ>
}
 8005490:	e041      	b.n	8005516 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_UART_MspInit+0x228>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d13c      	bne.n	8005516 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800549c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ac:	4618      	mov	r0, r3
 80054ae:	f004 f8f3 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80054b8:	f7fd fc82 	bl	8002dc0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054c2:	f043 0320 	orr.w	r3, r3, #32
 80054c6:	6453      	str	r3, [r2, #68]	; 0x44
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	4a12      	ldr	r2, [pc, #72]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	6313      	str	r3, [r2, #48]	; 0x30
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_UART_MspInit+0x214>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80054ec:	23c0      	movs	r3, #192	; 0xc0
 80054ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fe:	2303      	movs	r3, #3
 8005500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005504:	2308      	movs	r3, #8
 8005506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800550e:	4619      	mov	r1, r3
 8005510:	480a      	ldr	r0, [pc, #40]	; (800553c <HAL_UART_MspInit+0x22c>)
 8005512:	f001 ff09 	bl	8007328 <HAL_GPIO_Init>
}
 8005516:	bf00      	nop
 8005518:	37c0      	adds	r7, #192	; 0xc0
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40007800 	.word	0x40007800
 8005524:	40023800 	.word	0x40023800
 8005528:	40021400 	.word	0x40021400
 800552c:	40011000 	.word	0x40011000
 8005530:	40020400 	.word	0x40020400
 8005534:	40020000 	.word	0x40020000
 8005538:	40011400 	.word	0x40011400
 800553c:	40020800 	.word	0x40020800

08005540 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005554:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_FMC_MspInit+0x100>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d16d      	bne.n	8005638 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800555c:	4b38      	ldr	r3, [pc, #224]	; (8005640 <HAL_FMC_MspInit+0x100>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005562:	4b38      	ldr	r3, [pc, #224]	; (8005644 <HAL_FMC_MspInit+0x104>)
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <HAL_FMC_MspInit+0x104>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6393      	str	r3, [r2, #56]	; 0x38
 800556e:	4b35      	ldr	r3, [pc, #212]	; (8005644 <HAL_FMC_MspInit+0x104>)
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800557a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800557e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005588:	2303      	movs	r3, #3
 800558a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800558c:	230c      	movs	r3, #12
 800558e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	4619      	mov	r1, r3
 8005594:	482c      	ldr	r0, [pc, #176]	; (8005648 <HAL_FMC_MspInit+0x108>)
 8005596:	f001 fec7 	bl	8007328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800559a:	f248 1333 	movw	r3, #33075	; 0x8133
 800559e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a8:	2303      	movs	r3, #3
 80055aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055ac:	230c      	movs	r3, #12
 80055ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4825      	ldr	r0, [pc, #148]	; (800564c <HAL_FMC_MspInit+0x10c>)
 80055b6:	f001 feb7 	bl	8007328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80055ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80055be:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c0:	2302      	movs	r3, #2
 80055c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c8:	2303      	movs	r3, #3
 80055ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055cc:	230c      	movs	r3, #12
 80055ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	481e      	ldr	r0, [pc, #120]	; (8005650 <HAL_FMC_MspInit+0x110>)
 80055d6:	f001 fea7 	bl	8007328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80055da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80055de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e0:	2302      	movs	r3, #2
 80055e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055e8:	2303      	movs	r3, #3
 80055ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055ec:	230c      	movs	r3, #12
 80055ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4817      	ldr	r0, [pc, #92]	; (8005654 <HAL_FMC_MspInit+0x114>)
 80055f6:	f001 fe97 	bl	8007328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80055fa:	2328      	movs	r3, #40	; 0x28
 80055fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fe:	2302      	movs	r3, #2
 8005600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005606:	2303      	movs	r3, #3
 8005608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800560a:	230c      	movs	r3, #12
 800560c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4811      	ldr	r0, [pc, #68]	; (8005658 <HAL_FMC_MspInit+0x118>)
 8005614:	f001 fe88 	bl	8007328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005618:	2308      	movs	r3, #8
 800561a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561c:	2302      	movs	r3, #2
 800561e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005624:	2303      	movs	r3, #3
 8005626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005628:	230c      	movs	r3, #12
 800562a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	4619      	mov	r1, r3
 8005630:	480a      	ldr	r0, [pc, #40]	; (800565c <HAL_FMC_MspInit+0x11c>)
 8005632:	f001 fe79 	bl	8007328 <HAL_GPIO_Init>
 8005636:	e000      	b.n	800563a <HAL_FMC_MspInit+0xfa>
    return;
 8005638:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000d2c 	.word	0x20000d2c
 8005644:	40023800 	.word	0x40023800
 8005648:	40021000 	.word	0x40021000
 800564c:	40021800 	.word	0x40021800
 8005650:	40020c00 	.word	0x40020c00
 8005654:	40021400 	.word	0x40021400
 8005658:	40021c00 	.word	0x40021c00
 800565c:	40020800 	.word	0x40020800

08005660 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005668:	f7ff ff6a 	bl	8005540 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	; 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005684:	2200      	movs	r2, #0
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	2036      	movs	r0, #54	; 0x36
 800568a:	f000 ff57 	bl	800653c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800568e:	2036      	movs	r0, #54	; 0x36
 8005690:	f000 ff70 	bl	8006574 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005694:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <HAL_InitTick+0xa0>)
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_InitTick+0xa0>)
 800569a:	f043 0310 	orr.w	r3, r3, #16
 800569e:	6413      	str	r3, [r2, #64]	; 0x40
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <HAL_InitTick+0xa0>)
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056ac:	f107 0210 	add.w	r2, r7, #16
 80056b0:	f107 0314 	add.w	r3, r7, #20
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 ffbc 	bl	8009634 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80056bc:	f003 ff92 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 80056c0:	4603      	mov	r3, r0
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <HAL_InitTick+0xa4>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0c9b      	lsrs	r3, r3, #18
 80056d0:	3b01      	subs	r3, #1
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_InitTick+0xa8>)
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <HAL_InitTick+0xac>)
 80056d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <HAL_InitTick+0xa8>)
 80056dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <HAL_InitTick+0xa8>)
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <HAL_InitTick+0xa8>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <HAL_InitTick+0xa8>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80056f4:	4809      	ldr	r0, [pc, #36]	; (800571c <HAL_InitTick+0xa8>)
 80056f6:	f005 f9bf 	bl	800aa78 <HAL_TIM_Base_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005700:	4806      	ldr	r0, [pc, #24]	; (800571c <HAL_InitTick+0xa8>)
 8005702:	f005 fa11 	bl	800ab28 <HAL_TIM_Base_Start_IT>
 8005706:	4603      	mov	r3, r0
 8005708:	e000      	b.n	800570c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	3730      	adds	r7, #48	; 0x30
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40023800 	.word	0x40023800
 8005718:	431bde83 	.word	0x431bde83
 800571c:	20000d30 	.word	0x20000d30
 8005720:	40001000 	.word	0x40001000

08005724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005728:	e7fe      	b.n	8005728 <NMI_Handler+0x4>

0800572a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800572a:	b480      	push	{r7}
 800572c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800572e:	e7fe      	b.n	800572e <HardFault_Handler+0x4>

08005730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005734:	e7fe      	b.n	8005734 <MemManage_Handler+0x4>

08005736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005736:	b480      	push	{r7}
 8005738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800573a:	e7fe      	b.n	800573a <BusFault_Handler+0x4>

0800573c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005740:	e7fe      	b.n	8005740 <UsageFault_Handler+0x4>

08005742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005746:	bf00      	nop
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005754:	4803      	ldr	r0, [pc, #12]	; (8005764 <ADC_IRQHandler+0x14>)
 8005756:	f000 faa4 	bl	8005ca2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800575a:	4803      	ldr	r0, [pc, #12]	; (8005768 <ADC_IRQHandler+0x18>)
 800575c:	f000 faa1 	bl	8005ca2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000414 	.word	0x20000414
 8005768:	2000045c 	.word	0x2000045c

0800576c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005770:	4802      	ldr	r0, [pc, #8]	; (800577c <USART1_IRQHandler+0x10>)
 8005772:	f005 fee5 	bl	800b540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200008cc 	.word	0x200008cc

08005780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <TIM6_DAC_IRQHandler+0x20>)
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800578e:	4804      	ldr	r0, [pc, #16]	; (80057a0 <TIM6_DAC_IRQHandler+0x20>)
 8005790:	f000 ff20 	bl	80065d4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005794:	4803      	ldr	r0, [pc, #12]	; (80057a4 <TIM6_DAC_IRQHandler+0x24>)
 8005796:	f005 fa3f 	bl	800ac18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200004a4 	.word	0x200004a4
 80057a4:	20000d30 	.word	0x20000d30

080057a8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80057ac:	4802      	ldr	r0, [pc, #8]	; (80057b8 <RNG_IRQHandler+0x10>)
 80057ae:	f004 fbe3 	bl	8009f78 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000638 	.word	0x20000638

080057bc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80057c0:	4802      	ldr	r0, [pc, #8]	; (80057cc <LTDC_IRQHandler+0x10>)
 80057c2:	f002 ffa5 	bl	8008710 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000590 	.word	0x20000590

080057d0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <DMA2D_IRQHandler+0x10>)
 80057d6:	f001 fb69 	bl	8006eac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200004b8 	.word	0x200004b8

080057e4 <_sbrk>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <_sbrk+0x5c>)
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <_sbrk+0x60>)
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <_sbrk+0x64>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <_sbrk+0x22>
 8005800:	4b11      	ldr	r3, [pc, #68]	; (8005848 <_sbrk+0x64>)
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <_sbrk+0x68>)
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <_sbrk+0x64>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d207      	bcs.n	8005824 <_sbrk+0x40>
 8005814:	f00a f862 	bl	800f8dc <__errno>
 8005818:	4603      	mov	r3, r0
 800581a:	220c      	movs	r2, #12
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e009      	b.n	8005838 <_sbrk+0x54>
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_sbrk+0x64>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <_sbrk+0x64>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <_sbrk+0x64>)
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20050000 	.word	0x20050000
 8005844:	00000400 	.word	0x00000400
 8005848:	20000d7c 	.word	0x20000d7c
 800584c:	20004ae0 	.word	0x20004ae0

08005850 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <SystemInit+0x20>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <SystemInit+0x20>)
 800585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <Reset_Handler>:
 8005874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058ac <LoopFillZerobss+0x12>
 8005878:	480d      	ldr	r0, [pc, #52]	; (80058b0 <LoopFillZerobss+0x16>)
 800587a:	490e      	ldr	r1, [pc, #56]	; (80058b4 <LoopFillZerobss+0x1a>)
 800587c:	4a0e      	ldr	r2, [pc, #56]	; (80058b8 <LoopFillZerobss+0x1e>)
 800587e:	2300      	movs	r3, #0
 8005880:	e002      	b.n	8005888 <LoopCopyDataInit>

08005882 <CopyDataInit>:
 8005882:	58d4      	ldr	r4, [r2, r3]
 8005884:	50c4      	str	r4, [r0, r3]
 8005886:	3304      	adds	r3, #4

08005888 <LoopCopyDataInit>:
 8005888:	18c4      	adds	r4, r0, r3
 800588a:	428c      	cmp	r4, r1
 800588c:	d3f9      	bcc.n	8005882 <CopyDataInit>
 800588e:	4a0b      	ldr	r2, [pc, #44]	; (80058bc <LoopFillZerobss+0x22>)
 8005890:	4c0b      	ldr	r4, [pc, #44]	; (80058c0 <LoopFillZerobss+0x26>)
 8005892:	2300      	movs	r3, #0
 8005894:	e001      	b.n	800589a <LoopFillZerobss>

08005896 <FillZerobss>:
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	3204      	adds	r2, #4

0800589a <LoopFillZerobss>:
 800589a:	42a2      	cmp	r2, r4
 800589c:	d3fb      	bcc.n	8005896 <FillZerobss>
 800589e:	f7ff ffd7 	bl	8005850 <SystemInit>
 80058a2:	f00a f821 	bl	800f8e8 <__libc_init_array>
 80058a6:	f7fb f941 	bl	8000b2c <main>
 80058aa:	4770      	bx	lr
 80058ac:	20050000 	.word	0x20050000
 80058b0:	20000000 	.word	0x20000000
 80058b4:	2000013c 	.word	0x2000013c
 80058b8:	08071e2c 	.word	0x08071e2c
 80058bc:	2000013c 	.word	0x2000013c
 80058c0:	20004ae0 	.word	0x20004ae0

080058c4 <CAN1_RX0_IRQHandler>:
 80058c4:	e7fe      	b.n	80058c4 <CAN1_RX0_IRQHandler>

080058c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058ca:	2003      	movs	r0, #3
 80058cc:	f000 fe2b 	bl	8006526 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058d0:	200f      	movs	r0, #15
 80058d2:	f7ff fecf 	bl	8005674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058d6:	f7ff f8fb 	bl	8004ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_IncTick+0x20>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_IncTick+0x24>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <HAL_IncTick+0x24>)
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	200000d0 	.word	0x200000d0
 8005904:	20000d80 	.word	0x20000d80

08005908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return uwTick;
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <HAL_GetTick+0x14>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000d80 	.word	0x20000d80

08005920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005928:	f7ff ffee 	bl	8005908 <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d005      	beq.n	8005946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_Delay+0x44>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005946:	bf00      	nop
 8005948:	f7ff ffde 	bl	8005908 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	429a      	cmp	r2, r3
 8005956:	d8f7      	bhi.n	8005948 <HAL_Delay+0x28>
  {
  }
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200000d0 	.word	0x200000d0

08005968 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e031      	b.n	80059e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff f8ca 	bl	8004b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059aa:	4b10      	ldr	r3, [pc, #64]	; (80059ec <HAL_ADC_Init+0x84>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fc04 	bl	80061c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
 80059d2:	e001      	b.n	80059d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	ffffeefd 	.word	0xffffeefd

080059f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_ADC_Start+0x1a>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0ad      	b.n	8005b66 <HAL_ADC_Start+0x176>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d018      	beq.n	8005a52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005a30:	4b50      	ldr	r3, [pc, #320]	; (8005b74 <HAL_ADC_Start+0x184>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a50      	ldr	r2, [pc, #320]	; (8005b78 <HAL_ADC_Start+0x188>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	0c9a      	lsrs	r2, r3, #18
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a44:	e002      	b.n	8005a4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f9      	bne.n	8005a46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d175      	bne.n	8005b4c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a64:	4b45      	ldr	r3, [pc, #276]	; (8005b7c <HAL_ADC_Start+0x18c>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d106      	bne.n	8005aaa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f023 0206 	bic.w	r2, r3, #6
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
 8005aa8:	e002      	b.n	8005ab0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005ac0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005ac2:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <HAL_ADC_Start+0x190>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d143      	bne.n	8005b64 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	e03a      	b.n	8005b64 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a24      	ldr	r2, [pc, #144]	; (8005b84 <HAL_ADC_Start+0x194>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10e      	bne.n	8005b16 <HAL_ADC_Start+0x126>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b14:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <HAL_ADC_Start+0x190>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d120      	bne.n	8005b64 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <HAL_ADC_Start+0x198>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d11b      	bne.n	8005b64 <HAL_ADC_Start+0x174>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d114      	bne.n	8005b64 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b48:	609a      	str	r2, [r3, #8]
 8005b4a:	e00b      	b.n	8005b64 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f043 0210 	orr.w	r2, r3, #16
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5c:	f043 0201 	orr.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200000c8 	.word	0x200000c8
 8005b78:	431bde83 	.word	0x431bde83
 8005b7c:	fffff8fe 	.word	0xfffff8fe
 8005b80:	40012300 	.word	0x40012300
 8005b84:	40012000 	.word	0x40012000
 8005b88:	40012200 	.word	0x40012200

08005b8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d113      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	d10b      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e063      	b.n	8005c9a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bd2:	f7ff fe99 	bl	8005908 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bd8:	e021      	b.n	8005c1e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d01d      	beq.n	8005c1e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <HAL_ADC_PollForConversion+0x6c>
 8005be8:	f7ff fe8e 	bl	8005908 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d212      	bcs.n	8005c1e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d00b      	beq.n	8005c1e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e03d      	b.n	8005c9a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d1d6      	bne.n	8005bda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0212 	mvn.w	r2, #18
 8005c34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d123      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11f      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d111      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d105      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0201 	orr.w	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d049      	beq.n	8005d6c <HAL_ADC_IRQHandler+0xca>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d046      	beq.n	8005d6c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d12b      	bne.n	8005d5c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d127      	bne.n	8005d5c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d119      	bne.n	8005d5c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0220 	bic.w	r2, r2, #32
 8005d36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8bd 	bl	8005edc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0212 	mvn.w	r2, #18
 8005d6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d057      	beq.n	8005e32 <HAL_ADC_IRQHandler+0x190>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d054      	beq.n	8005e32 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d139      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d12b      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d124      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11d      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d119      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fac8 	bl	80063b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 020c 	mvn.w	r2, #12
 8005e30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <HAL_ADC_IRQHandler+0x1d6>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d014      	beq.n	8005e78 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10d      	bne.n	8005e78 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f841 	bl	8005ef0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0201 	mvn.w	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d015      	beq.n	8005eba <HAL_ADC_IRQHandler+0x218>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	f043 0202 	orr.w	r2, r3, #2
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0220 	mvn.w	r2, #32
 8005ea8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f82a 	bl	8005f04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0220 	mvn.w	r2, #32
 8005eb8:	601a      	str	r2, [r3, #0]
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e136      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x28a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d93a      	bls.n	8005fba <HAL_ADC_ConfigChannel+0xa2>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d035      	beq.n	8005fba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68d9      	ldr	r1, [r3, #12]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4413      	add	r3, r2
 8005f62:	3b1e      	subs	r3, #30
 8005f64:	2207      	movs	r2, #7
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43da      	mvns	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	400a      	ands	r2, r1
 8005f72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a8d      	ldr	r2, [pc, #564]	; (80061b0 <HAL_ADC_ConfigChannel+0x298>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10a      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68d9      	ldr	r1, [r3, #12]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	061a      	lsls	r2, r3, #24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f92:	e035      	b.n	8006000 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4403      	add	r3, r0
 8005fac:	3b1e      	subs	r3, #30
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fb8:	e022      	b.n	8006000 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4613      	mov	r3, r2
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4413      	add	r3, r2
 8005fce:	2207      	movs	r2, #7
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43da      	mvns	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	400a      	ands	r2, r1
 8005fdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6919      	ldr	r1, [r3, #16]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4618      	mov	r0, r3
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4403      	add	r3, r0
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d824      	bhi.n	8006052 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	3b05      	subs	r3, #5
 800601a:	221f      	movs	r2, #31
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	43da      	mvns	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	400a      	ands	r2, r1
 8006028:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	4618      	mov	r0, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	3b05      	subs	r3, #5
 8006044:	fa00 f203 	lsl.w	r2, r0, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	635a      	str	r2, [r3, #52]	; 0x34
 8006050:	e04c      	b.n	80060ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b0c      	cmp	r3, #12
 8006058:	d824      	bhi.n	80060a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	3b23      	subs	r3, #35	; 0x23
 800606c:	221f      	movs	r2, #31
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	400a      	ands	r2, r1
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	4618      	mov	r0, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	3b23      	subs	r3, #35	; 0x23
 8006096:	fa00 f203 	lsl.w	r2, r0, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
 80060a2:	e023      	b.n	80060ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	3b41      	subs	r3, #65	; 0x41
 80060b6:	221f      	movs	r2, #31
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43da      	mvns	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	400a      	ands	r2, r1
 80060c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4618      	mov	r0, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	3b41      	subs	r3, #65	; 0x41
 80060e0:	fa00 f203 	lsl.w	r2, r0, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_ADC_ConfigChannel+0x29c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10a      	bne.n	800610c <HAL_ADC_ConfigChannel+0x1f4>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fe:	d105      	bne.n	800610c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006100:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006106:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800610a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <HAL_ADC_ConfigChannel+0x29c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10f      	bne.n	8006136 <HAL_ADC_ConfigChannel+0x21e>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b12      	cmp	r3, #18
 800611c:	d10b      	bne.n	8006136 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800611e:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006128:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800612a:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006134:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_ADC_ConfigChannel+0x29c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d12b      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x280>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <HAL_ADC_ConfigChannel+0x298>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <HAL_ADC_ConfigChannel+0x23a>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b11      	cmp	r3, #17
 8006150:	d122      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006152:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006158:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800615c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006168:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <HAL_ADC_ConfigChannel+0x298>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d111      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006174:	4b11      	ldr	r3, [pc, #68]	; (80061bc <HAL_ADC_ConfigChannel+0x2a4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0c9a      	lsrs	r2, r3, #18
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800618a:	e002      	b.n	8006192 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3b01      	subs	r3, #1
 8006190:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f9      	bne.n	800618c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	10000012 	.word	0x10000012
 80061b4:	40012000 	.word	0x40012000
 80061b8:	40012300 	.word	0x40012300
 80061bc:	200000c8 	.word	0x200000c8
 80061c0:	431bde83 	.word	0x431bde83

080061c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80061cc:	4b78      	ldr	r3, [pc, #480]	; (80063b0 <ADC_Init+0x1ec>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4a77      	ldr	r2, [pc, #476]	; (80063b0 <ADC_Init+0x1ec>)
 80061d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80061d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80061d8:	4b75      	ldr	r3, [pc, #468]	; (80063b0 <ADC_Init+0x1ec>)
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4973      	ldr	r1, [pc, #460]	; (80063b0 <ADC_Init+0x1ec>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <ADC_Init+0x1f0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6899      	ldr	r1, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6899      	ldr	r1, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	e00f      	b.n	80062be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0202 	bic.w	r2, r2, #2
 80062cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	005a      	lsls	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01b      	beq.n	8006324 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800630a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	3b01      	subs	r3, #1
 8006318:	035a      	lsls	r2, r3, #13
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	e007      	b.n	8006334 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	3b01      	subs	r3, #1
 8006350:	051a      	lsls	r2, r3, #20
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006376:	025a      	lsls	r2, r3, #9
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	029a      	lsls	r2, r3, #10
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40012300 	.word	0x40012300
 80063b4:	0f000001 	.word	0x0f000001

080063b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <__NVIC_SetPriorityGrouping+0x40>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063fa:	4a04      	ldr	r2, [pc, #16]	; (800640c <__NVIC_SetPriorityGrouping+0x40>)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	60d3      	str	r3, [r2, #12]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	e000ed00 	.word	0xe000ed00
 8006410:	05fa0000 	.word	0x05fa0000

08006414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__NVIC_GetPriorityGrouping+0x18>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
}
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	db0b      	blt.n	800645a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	4907      	ldr	r1, [pc, #28]	; (8006468 <__NVIC_EnableIRQ+0x38>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2001      	movs	r0, #1
 8006452:	fa00 f202 	lsl.w	r2, r0, r2
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000e100 	.word	0xe000e100

0800646c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	db0a      	blt.n	8006496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	490c      	ldr	r1, [pc, #48]	; (80064b8 <__NVIC_SetPriority+0x4c>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	0112      	lsls	r2, r2, #4
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	440b      	add	r3, r1
 8006490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006494:	e00a      	b.n	80064ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4908      	ldr	r1, [pc, #32]	; (80064bc <__NVIC_SetPriority+0x50>)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3b04      	subs	r3, #4
 80064a4:	0112      	lsls	r2, r2, #4
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	440b      	add	r3, r1
 80064aa:	761a      	strb	r2, [r3, #24]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000e100 	.word	0xe000e100
 80064bc:	e000ed00 	.word	0xe000ed00

080064c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf28      	it	cs
 80064de:	2304      	movcs	r3, #4
 80064e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d902      	bls.n	80064f0 <NVIC_EncodePriority+0x30>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3b03      	subs	r3, #3
 80064ee:	e000      	b.n	80064f2 <NVIC_EncodePriority+0x32>
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	401a      	ands	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006508:	f04f 31ff 	mov.w	r1, #4294967295
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	43d9      	mvns	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	4313      	orrs	r3, r2
         );
}
 800651a:	4618      	mov	r0, r3
 800651c:	3724      	adds	r7, #36	; 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ff4c 	bl	80063cc <__NVIC_SetPriorityGrouping>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800654e:	f7ff ff61 	bl	8006414 <__NVIC_GetPriorityGrouping>
 8006552:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	6978      	ldr	r0, [r7, #20]
 800655a:	f7ff ffb1 	bl	80064c0 <NVIC_EncodePriority>
 800655e:	4602      	mov	r2, r0
 8006560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff80 	bl	800646c <__NVIC_SetPriority>
}
 800656c:	bf00      	nop
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff ff54 	bl	8006430 <__NVIC_EnableIRQ>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e014      	b.n	80065cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d105      	bne.n	80065b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fe fb4a 	bl	8004c4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ea:	d120      	bne.n	800662e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fa:	d118      	bne.n	800662e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2204      	movs	r2, #4
 8006600:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f043 0201 	orr.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006626:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f82d 	bl	8006688 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800663c:	d120      	bne.n	8006680 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664c:	d118      	bne.n	8006680 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f043 0202 	orr.w	r2, r3, #2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006678:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f85d 	bl	800673a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	795b      	ldrb	r3, [r3, #5]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_DAC_ConfigChannel+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e03c      	b.n	800672e <HAL_DAC_ConfigChannel+0x92>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2202      	movs	r2, #2
 80066be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	43db      	mvns	r3, r3
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4013      	ands	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	22c0      	movs	r2, #192	; 0xc0
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43da      	mvns	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	400a      	ands	r2, r1
 800671e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800675c:	f7ff f8d4 	bl	8005908 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e099      	b.n	80068a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800678c:	e00f      	b.n	80067ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800678e:	f7ff f8bb 	bl	8005908 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b05      	cmp	r3, #5
 800679a:	d908      	bls.n	80067ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e078      	b.n	80068a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e8      	bne.n	800678e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <HAL_DMA_Init+0x158>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2b04      	cmp	r3, #4
 8006806:	d107      	bne.n	8006818 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	4313      	orrs	r3, r2
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b04      	cmp	r3, #4
 8006840:	d117      	bne.n	8006872 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f94f 	bl	8006af8 <DMA_CheckFifoParam>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2240      	movs	r2, #64	; 0x40
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800686e:	2301      	movs	r3, #1
 8006870:	e016      	b.n	80068a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f906 	bl	8006a8c <DMA_CalcBaseAndBitshift>
 8006880:	4603      	mov	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006888:	223f      	movs	r2, #63	; 0x3f
 800688a:	409a      	lsls	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	f010803f 	.word	0xf010803f

080068ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e050      	b.n	8006960 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d101      	bne.n	80068ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
 80068cc:	e048      	b.n	8006960 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0201 	bic.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2221      	movs	r2, #33	; 0x21
 800690c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8bc 	bl	8006a8c <DMA_CalcBaseAndBitshift>
 8006914:	4603      	mov	r3, r0
 8006916:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	223f      	movs	r2, #63	; 0x3f
 800691e:	409a      	lsls	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006976:	f7fe ffc7 	bl	8005908 <HAL_GetTick>
 800697a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d008      	beq.n	800699a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2280      	movs	r2, #128	; 0x80
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e052      	b.n	8006a40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0216 	bic.w	r2, r2, #22
 80069a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d103      	bne.n	80069ca <HAL_DMA_Abort+0x62>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0208 	bic.w	r2, r2, #8
 80069d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069ea:	e013      	b.n	8006a14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069ec:	f7fe ff8c 	bl	8005908 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d90c      	bls.n	8006a14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2203      	movs	r2, #3
 8006a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e015      	b.n	8006a40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e4      	bne.n	80069ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a26:	223f      	movs	r2, #63	; 0x3f
 8006a28:	409a      	lsls	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d004      	beq.n	8006a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2280      	movs	r2, #128	; 0x80
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e00c      	b.n	8006a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2205      	movs	r2, #5
 8006a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0201 	bic.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	3b10      	subs	r3, #16
 8006a9c:	4a13      	ldr	r2, [pc, #76]	; (8006aec <DMA_CalcBaseAndBitshift+0x60>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <DMA_CalcBaseAndBitshift+0x64>)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d908      	bls.n	8006acc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <DMA_CalcBaseAndBitshift+0x68>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8006aca:	e006      	b.n	8006ada <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <DMA_CalcBaseAndBitshift+0x68>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	aaaaaaab 	.word	0xaaaaaaab
 8006af0:	08071d80 	.word	0x08071d80
 8006af4:	fffffc00 	.word	0xfffffc00

08006af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11f      	bne.n	8006b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d856      	bhi.n	8006bc6 <DMA_CheckFifoParam+0xce>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <DMA_CheckFifoParam+0x28>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b43 	.word	0x08006b43
 8006b28:	08006b31 	.word	0x08006b31
 8006b2c:	08006bc7 	.word	0x08006bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d046      	beq.n	8006bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b40:	e043      	b.n	8006bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b4a:	d140      	bne.n	8006bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b50:	e03d      	b.n	8006bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b5a:	d121      	bne.n	8006ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d837      	bhi.n	8006bd2 <DMA_CheckFifoParam+0xda>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <DMA_CheckFifoParam+0x70>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b7f 	.word	0x08006b7f
 8006b70:	08006b79 	.word	0x08006b79
 8006b74:	08006b91 	.word	0x08006b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	e030      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d025      	beq.n	8006bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b8e:	e022      	b.n	8006bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b98:	d11f      	bne.n	8006bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b9e:	e01c      	b.n	8006bda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d903      	bls.n	8006bae <DMA_CheckFifoParam+0xb6>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d003      	beq.n	8006bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006bac:	e018      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb2:	e015      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e00b      	b.n	8006bde <DMA_CheckFifoParam+0xe6>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e00a      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e008      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e006      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bd2:	bf00      	nop
 8006bd4:	e004      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bd6:	bf00      	nop
 8006bd8:	e002      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bde:	bf00      	nop
    }
  } 
  
  return status; 
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e039      	b.n	8006c76 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fe f860 	bl	8004cdc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c40:	f023 0107 	bic.w	r1, r3, #7
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_DMA2D_Init+0x90>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68d1      	ldr	r1, [r2, #12]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	430b      	orrs	r3, r1
 8006c64:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	ffffc000 	.word	0xffffc000

08006c84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_DMA2D_Start+0x1c>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e018      	b.n	8006cd2 <HAL_DMA2D_Start+0x4e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa98 	bl	80071f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b086      	sub	sp, #24
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d056      	beq.n	8006da4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cf6:	f7fe fe07 	bl	8005908 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006cfc:	e04b      	b.n	8006d96 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d023      	beq.n	8006d58 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	f043 0202 	orr.w	r2, r3, #2
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	f043 0201 	orr.w	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2221      	movs	r2, #33	; 0x21
 8006d42:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2204      	movs	r2, #4
 8006d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0a5      	b.n	8006ea4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d01a      	beq.n	8006d96 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fe fdd2 	bl	8005908 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <HAL_DMA2D_PollForTransfer+0x9c>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10f      	bne.n	8006d96 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	f043 0220 	orr.w	r2, r3, #32
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2203      	movs	r2, #3
 8006d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e086      	b.n	8006ea4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0ac      	beq.n	8006cfe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d061      	beq.n	8006e8a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dc6:	f7fe fd9f 	bl	8005908 <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006dcc:	e056      	b.n	8006e7c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d02e      	beq.n	8006e3e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	f043 0202 	orr.w	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	f043 0201 	orr.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2229      	movs	r2, #41	; 0x29
 8006e28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e032      	b.n	8006ea4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d01a      	beq.n	8006e7c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fe fd5f 	bl	8005908 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <HAL_DMA2D_PollForTransfer+0x182>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10f      	bne.n	8006e7c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e013      	b.n	8006ea4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 0310 	and.w	r3, r3, #16
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0a1      	beq.n	8006dce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2212      	movs	r2, #18
 8006e90:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d026      	beq.n	8006f1c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d021      	beq.n	8006f1c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ee6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2204      	movs	r2, #4
 8006f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d026      	beq.n	8006f74 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d021      	beq.n	8006f74 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f3e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2220      	movs	r2, #32
 8006f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	f043 0202 	orr.w	r2, r3, #2
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d026      	beq.n	8006fcc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d021      	beq.n	8006fcc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d013      	beq.n	8006ffe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f853 	bl	80070a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d024      	beq.n	8007052 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01f      	beq.n	8007052 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007020:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2202      	movs	r2, #2
 8007028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01f      	beq.n	800709c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01a      	beq.n	800709c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007074:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2210      	movs	r2, #16
 800707c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f80e 	bl	80070b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_DMA2D_ConfigLayer+0x20>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e079      	b.n	80071e0 <HAL_DMA2D_ConfigLayer+0x114>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	3318      	adds	r3, #24
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007116:	4b35      	ldr	r3, [pc, #212]	; (80071ec <HAL_DMA2D_ConfigLayer+0x120>)
 8007118:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d003      	beq.n	800712a <HAL_DMA2D_ConfigLayer+0x5e>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b09      	cmp	r3, #9
 8007128:	d107      	bne.n	800713a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e005      	b.n	8007146 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	061b      	lsls	r3, r3, #24
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d120      	bne.n	800718e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	43db      	mvns	r3, r3
 8007156:	ea02 0103 	and.w	r1, r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	430a      	orrs	r2, r1
 8007162:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	6812      	ldr	r2, [r2, #0]
 800716c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b0a      	cmp	r3, #10
 8007174:	d003      	beq.n	800717e <HAL_DMA2D_ConfigLayer+0xb2>
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b09      	cmp	r3, #9
 800717c:	d127      	bne.n	80071ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
 800718c:	e01f      	b.n	80071ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	43db      	mvns	r3, r3
 8007198:	ea02 0103 	and.w	r1, r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b0a      	cmp	r3, #10
 80071b6:	d003      	beq.n	80071c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d106      	bne.n	80071ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80071cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	ff03000f 	.word	0xff03000f

080071f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b08b      	sub	sp, #44	; 0x2c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007204:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	041a      	lsls	r2, r3, #16
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	431a      	orrs	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007228:	d174      	bne.n	8007314 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007230:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007238:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007240:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d108      	bne.n	8007262 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	431a      	orrs	r2, r3
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	4313      	orrs	r3, r2
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
 8007260:	e053      	b.n	800730a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d106      	bne.n	8007278 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4313      	orrs	r3, r2
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
 8007276:	e048      	b.n	800730a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d111      	bne.n	80072a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	0cdb      	lsrs	r3, r3, #19
 8007284:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	0a9b      	lsrs	r3, r3, #10
 800728a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	08db      	lsrs	r3, r3, #3
 8007290:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	02db      	lsls	r3, r3, #11
 800729a:	4313      	orrs	r3, r2
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	e032      	b.n	800730a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d117      	bne.n	80072dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	0fdb      	lsrs	r3, r3, #31
 80072b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	0cdb      	lsrs	r3, r3, #19
 80072b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	0adb      	lsrs	r3, r3, #11
 80072bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	431a      	orrs	r2, r3
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	03db      	lsls	r3, r3, #15
 80072d2:	4313      	orrs	r3, r2
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
 80072da:	e016      	b.n	800730a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	0f1b      	lsrs	r3, r3, #28
 80072e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	0d1b      	lsrs	r3, r3, #20
 80072e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	0b1b      	lsrs	r3, r3, #12
 80072ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	091b      	lsrs	r3, r3, #4
 80072f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	011a      	lsls	r2, r3, #4
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	431a      	orrs	r2, r3
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	4313      	orrs	r3, r2
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007312:	e003      	b.n	800731c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	60da      	str	r2, [r3, #12]
}
 800731c:	bf00      	nop
 800731e:	372c      	adds	r7, #44	; 0x2c
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e175      	b.n	8007634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007348:	2201      	movs	r2, #1
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	429a      	cmp	r2, r3
 8007362:	f040 8164 	bne.w	800762e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d005      	beq.n	800737e <HAL_GPIO_Init+0x56>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d130      	bne.n	80073e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	2203      	movs	r2, #3
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073b4:	2201      	movs	r2, #1
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	f003 0201 	and.w	r2, r3, #1
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d017      	beq.n	800741c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	2203      	movs	r2, #3
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	4013      	ands	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	4313      	orrs	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d123      	bne.n	8007470 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	08da      	lsrs	r2, r3, #3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3208      	adds	r2, #8
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220f      	movs	r2, #15
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	08da      	lsrs	r2, r3, #3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3208      	adds	r2, #8
 800746a:	69b9      	ldr	r1, [r7, #24]
 800746c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	2203      	movs	r2, #3
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	43db      	mvns	r3, r3
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4013      	ands	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4313      	orrs	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80be 	beq.w	800762e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b2:	4b66      	ldr	r3, [pc, #408]	; (800764c <HAL_GPIO_Init+0x324>)
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	4a65      	ldr	r2, [pc, #404]	; (800764c <HAL_GPIO_Init+0x324>)
 80074b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074bc:	6453      	str	r3, [r2, #68]	; 0x44
 80074be:	4b63      	ldr	r3, [pc, #396]	; (800764c <HAL_GPIO_Init+0x324>)
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80074ca:	4a61      	ldr	r2, [pc, #388]	; (8007650 <HAL_GPIO_Init+0x328>)
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	3302      	adds	r3, #2
 80074d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	220f      	movs	r2, #15
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	43db      	mvns	r3, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4013      	ands	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a58      	ldr	r2, [pc, #352]	; (8007654 <HAL_GPIO_Init+0x32c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d037      	beq.n	8007566 <HAL_GPIO_Init+0x23e>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a57      	ldr	r2, [pc, #348]	; (8007658 <HAL_GPIO_Init+0x330>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d031      	beq.n	8007562 <HAL_GPIO_Init+0x23a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a56      	ldr	r2, [pc, #344]	; (800765c <HAL_GPIO_Init+0x334>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d02b      	beq.n	800755e <HAL_GPIO_Init+0x236>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a55      	ldr	r2, [pc, #340]	; (8007660 <HAL_GPIO_Init+0x338>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d025      	beq.n	800755a <HAL_GPIO_Init+0x232>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a54      	ldr	r2, [pc, #336]	; (8007664 <HAL_GPIO_Init+0x33c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01f      	beq.n	8007556 <HAL_GPIO_Init+0x22e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a53      	ldr	r2, [pc, #332]	; (8007668 <HAL_GPIO_Init+0x340>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d019      	beq.n	8007552 <HAL_GPIO_Init+0x22a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a52      	ldr	r2, [pc, #328]	; (800766c <HAL_GPIO_Init+0x344>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <HAL_GPIO_Init+0x226>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a51      	ldr	r2, [pc, #324]	; (8007670 <HAL_GPIO_Init+0x348>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00d      	beq.n	800754a <HAL_GPIO_Init+0x222>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a50      	ldr	r2, [pc, #320]	; (8007674 <HAL_GPIO_Init+0x34c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <HAL_GPIO_Init+0x21e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <HAL_GPIO_Init+0x350>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <HAL_GPIO_Init+0x21a>
 800753e:	2309      	movs	r3, #9
 8007540:	e012      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007542:	230a      	movs	r3, #10
 8007544:	e010      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007546:	2308      	movs	r3, #8
 8007548:	e00e      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800754a:	2307      	movs	r3, #7
 800754c:	e00c      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800754e:	2306      	movs	r3, #6
 8007550:	e00a      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007552:	2305      	movs	r3, #5
 8007554:	e008      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007556:	2304      	movs	r3, #4
 8007558:	e006      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800755a:	2303      	movs	r3, #3
 800755c:	e004      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800755e:	2302      	movs	r3, #2
 8007560:	e002      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007566:	2300      	movs	r3, #0
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	f002 0203 	and.w	r2, r2, #3
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	4093      	lsls	r3, r2
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007578:	4935      	ldr	r1, [pc, #212]	; (8007650 <HAL_GPIO_Init+0x328>)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	089b      	lsrs	r3, r3, #2
 800757e:	3302      	adds	r3, #2
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007586:	4b3d      	ldr	r3, [pc, #244]	; (800767c <HAL_GPIO_Init+0x354>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075aa:	4a34      	ldr	r2, [pc, #208]	; (800767c <HAL_GPIO_Init+0x354>)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <HAL_GPIO_Init+0x354>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	43db      	mvns	r3, r3
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	4013      	ands	r3, r2
 80075be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075d4:	4a29      	ldr	r2, [pc, #164]	; (800767c <HAL_GPIO_Init+0x354>)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80075da:	4b28      	ldr	r3, [pc, #160]	; (800767c <HAL_GPIO_Init+0x354>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	43db      	mvns	r3, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	4013      	ands	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_GPIO_Init+0x354>)
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007604:	4b1d      	ldr	r3, [pc, #116]	; (800767c <HAL_GPIO_Init+0x354>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	43db      	mvns	r3, r3
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	4013      	ands	r3, r2
 8007612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <HAL_GPIO_Init+0x354>)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	f67f ae86 	bls.w	8007348 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3724      	adds	r7, #36	; 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800
 8007650:	40013800 	.word	0x40013800
 8007654:	40020000 	.word	0x40020000
 8007658:	40020400 	.word	0x40020400
 800765c:	40020800 	.word	0x40020800
 8007660:	40020c00 	.word	0x40020c00
 8007664:	40021000 	.word	0x40021000
 8007668:	40021400 	.word	0x40021400
 800766c:	40021800 	.word	0x40021800
 8007670:	40021c00 	.word	0x40021c00
 8007674:	40022000 	.word	0x40022000
 8007678:	40022400 	.word	0x40022400
 800767c:	40013c00 	.word	0x40013c00

08007680 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e0d9      	b.n	8007850 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800769c:	2201      	movs	r2, #1
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4013      	ands	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	f040 80c9 	bne.w	800784a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80076b8:	4a6b      	ldr	r2, [pc, #428]	; (8007868 <HAL_GPIO_DeInit+0x1e8>)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	3302      	adds	r3, #2
 80076c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	220f      	movs	r2, #15
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a63      	ldr	r2, [pc, #396]	; (800786c <HAL_GPIO_DeInit+0x1ec>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d037      	beq.n	8007752 <HAL_GPIO_DeInit+0xd2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a62      	ldr	r2, [pc, #392]	; (8007870 <HAL_GPIO_DeInit+0x1f0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d031      	beq.n	800774e <HAL_GPIO_DeInit+0xce>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a61      	ldr	r2, [pc, #388]	; (8007874 <HAL_GPIO_DeInit+0x1f4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d02b      	beq.n	800774a <HAL_GPIO_DeInit+0xca>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a60      	ldr	r2, [pc, #384]	; (8007878 <HAL_GPIO_DeInit+0x1f8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d025      	beq.n	8007746 <HAL_GPIO_DeInit+0xc6>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a5f      	ldr	r2, [pc, #380]	; (800787c <HAL_GPIO_DeInit+0x1fc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01f      	beq.n	8007742 <HAL_GPIO_DeInit+0xc2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a5e      	ldr	r2, [pc, #376]	; (8007880 <HAL_GPIO_DeInit+0x200>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d019      	beq.n	800773e <HAL_GPIO_DeInit+0xbe>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a5d      	ldr	r2, [pc, #372]	; (8007884 <HAL_GPIO_DeInit+0x204>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_GPIO_DeInit+0xba>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a5c      	ldr	r2, [pc, #368]	; (8007888 <HAL_GPIO_DeInit+0x208>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00d      	beq.n	8007736 <HAL_GPIO_DeInit+0xb6>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a5b      	ldr	r2, [pc, #364]	; (800788c <HAL_GPIO_DeInit+0x20c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <HAL_GPIO_DeInit+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a5a      	ldr	r2, [pc, #360]	; (8007890 <HAL_GPIO_DeInit+0x210>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d101      	bne.n	800772e <HAL_GPIO_DeInit+0xae>
 800772a:	2309      	movs	r3, #9
 800772c:	e012      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 800772e:	230a      	movs	r3, #10
 8007730:	e010      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 8007732:	2308      	movs	r3, #8
 8007734:	e00e      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 8007736:	2307      	movs	r3, #7
 8007738:	e00c      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 800773a:	2306      	movs	r3, #6
 800773c:	e00a      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 800773e:	2305      	movs	r3, #5
 8007740:	e008      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 8007742:	2304      	movs	r3, #4
 8007744:	e006      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 8007746:	2303      	movs	r3, #3
 8007748:	e004      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 800774a:	2302      	movs	r3, #2
 800774c:	e002      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_GPIO_DeInit+0xd4>
 8007752:	2300      	movs	r3, #0
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	f002 0203 	and.w	r2, r2, #3
 800775a:	0092      	lsls	r2, r2, #2
 800775c:	4093      	lsls	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	d132      	bne.n	80077ca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007764:	4b4b      	ldr	r3, [pc, #300]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	43db      	mvns	r3, r3
 800776c:	4949      	ldr	r1, [pc, #292]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 800776e:	4013      	ands	r3, r2
 8007770:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007772:	4b48      	ldr	r3, [pc, #288]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	43db      	mvns	r3, r3
 800777a:	4946      	ldr	r1, [pc, #280]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 800777c:	4013      	ands	r3, r2
 800777e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007780:	4b44      	ldr	r3, [pc, #272]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	43db      	mvns	r3, r3
 8007788:	4942      	ldr	r1, [pc, #264]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 800778a:	4013      	ands	r3, r2
 800778c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800778e:	4b41      	ldr	r3, [pc, #260]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	43db      	mvns	r3, r3
 8007796:	493f      	ldr	r1, [pc, #252]	; (8007894 <HAL_GPIO_DeInit+0x214>)
 8007798:	4013      	ands	r3, r2
 800779a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	220f      	movs	r2, #15
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80077ac:	4a2e      	ldr	r2, [pc, #184]	; (8007868 <HAL_GPIO_DeInit+0x1e8>)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	3302      	adds	r3, #2
 80077b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	43da      	mvns	r2, r3
 80077bc:	482a      	ldr	r0, [pc, #168]	; (8007868 <HAL_GPIO_DeInit+0x1e8>)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	089b      	lsrs	r3, r3, #2
 80077c2:	400a      	ands	r2, r1
 80077c4:	3302      	adds	r3, #2
 80077c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	2103      	movs	r1, #3
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	401a      	ands	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	08da      	lsrs	r2, r3, #3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3208      	adds	r2, #8
 80077e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	220f      	movs	r2, #15
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43db      	mvns	r3, r3
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	08d2      	lsrs	r2, r2, #3
 8007800:	4019      	ands	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3208      	adds	r2, #8
 8007806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	2103      	movs	r1, #3
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	401a      	ands	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	2101      	movs	r1, #1
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	fa01 f303 	lsl.w	r3, r1, r3
 800782c:	43db      	mvns	r3, r3
 800782e:	401a      	ands	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2103      	movs	r1, #3
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	401a      	ands	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	3301      	adds	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	f67f af22 	bls.w	800769c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40013800 	.word	0x40013800
 800786c:	40020000 	.word	0x40020000
 8007870:	40020400 	.word	0x40020400
 8007874:	40020800 	.word	0x40020800
 8007878:	40020c00 	.word	0x40020c00
 800787c:	40021000 	.word	0x40021000
 8007880:	40021400 	.word	0x40021400
 8007884:	40021800 	.word	0x40021800
 8007888:	40021c00 	.word	0x40021c00
 800788c:	40022000 	.word	0x40022000
 8007890:	40022400 	.word	0x40022400
 8007894:	40013c00 	.word	0x40013c00

08007898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	887b      	ldrh	r3, [r7, #2]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
 80078b4:	e001      	b.n	80078ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	807b      	strh	r3, [r7, #2]
 80078d4:	4613      	mov	r3, r2
 80078d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078d8:	787b      	ldrb	r3, [r7, #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80078e4:	e003      	b.n	80078ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	041a      	lsls	r2, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	619a      	str	r2, [r3, #24]
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e07f      	b.n	8007a0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fd fa00 	bl	8004d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	; 0x24
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800794c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800795c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d107      	bne.n	8007976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007972:	609a      	str	r2, [r3, #8]
 8007974:	e006      	b.n	8007984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d104      	bne.n	8007996 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <HAL_I2C_Init+0x11c>)
 80079a2:	430b      	orrs	r3, r1
 80079a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69d9      	ldr	r1, [r3, #28]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	02008000 	.word	0x02008000

08007a1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e021      	b.n	8007a72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2224      	movs	r2, #36	; 0x24
 8007a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fd fa16 	bl	8004e78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	813b      	strh	r3, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	f040 80f9 	bne.w	8007c96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_I2C_Mem_Write+0x34>
 8007aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0ed      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_I2C_Mem_Write+0x4e>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e0e6      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ad2:	f7fd ff19 	bl	8005908 <HAL_GetTick>
 8007ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2319      	movs	r3, #25
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fad1 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0d1      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2221      	movs	r2, #33	; 0x21
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2240      	movs	r2, #64	; 0x40
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a3a      	ldr	r2, [r7, #32]
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b1c:	88f8      	ldrh	r0, [r7, #6]
 8007b1e:	893a      	ldrh	r2, [r7, #8]
 8007b20:	8979      	ldrh	r1, [r7, #10]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f9e1 	bl	8007ef4 <I2C_RequestMemoryWrite>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0a9      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2bff      	cmp	r3, #255	; 0xff
 8007b4c:	d90e      	bls.n	8007b6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	22ff      	movs	r2, #255	; 0xff
 8007b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	8979      	ldrh	r1, [r7, #10]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fc39 	bl	80083dc <I2C_TransferConfig>
 8007b6a:	e00f      	b.n	8007b8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	8979      	ldrh	r1, [r7, #10]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fc28 	bl	80083dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fabb 	bl	800810c <I2C_WaitOnTXISFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e07b      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d034      	beq.n	8007c44 <HAL_I2C_Mem_Write+0x1c8>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d130      	bne.n	8007c44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	2200      	movs	r2, #0
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fa4d 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e04d      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2bff      	cmp	r3, #255	; 0xff
 8007c04:	d90e      	bls.n	8007c24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22ff      	movs	r2, #255	; 0xff
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	8979      	ldrh	r1, [r7, #10]
 8007c14:	2300      	movs	r3, #0
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fbdd 	bl	80083dc <I2C_TransferConfig>
 8007c22:	e00f      	b.n	8007c44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	8979      	ldrh	r1, [r7, #10]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fbcc 	bl	80083dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d19e      	bne.n	8007b8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fa9a 	bl	800818c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e01a      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2220      	movs	r2, #32
 8007c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6859      	ldr	r1, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <HAL_I2C_Mem_Write+0x224>)
 8007c76:	400b      	ands	r3, r1
 8007c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	fe00e800 	.word	0xfe00e800

08007ca4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	817b      	strh	r3, [r7, #10]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	813b      	strh	r3, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	f040 80fd 	bne.w	8007ec6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_I2C_Mem_Read+0x34>
 8007cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0f1      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_I2C_Mem_Read+0x4e>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e0ea      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cfa:	f7fd fe05 	bl	8005908 <HAL_GetTick>
 8007cfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2319      	movs	r3, #25
 8007d06:	2201      	movs	r2, #1
 8007d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f9bd 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0d5      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2222      	movs	r2, #34	; 0x22
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d44:	88f8      	ldrh	r0, [r7, #6]
 8007d46:	893a      	ldrh	r2, [r7, #8]
 8007d48:	8979      	ldrh	r1, [r7, #10]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4603      	mov	r3, r0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f921 	bl	8007f9c <I2C_RequestMemoryRead>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0ad      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2bff      	cmp	r3, #255	; 0xff
 8007d74:	d90e      	bls.n	8007d94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	22ff      	movs	r2, #255	; 0xff
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	8979      	ldrh	r1, [r7, #10]
 8007d84:	4b52      	ldr	r3, [pc, #328]	; (8007ed0 <HAL_I2C_Mem_Read+0x22c>)
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fb25 	bl	80083dc <I2C_TransferConfig>
 8007d92:	e00f      	b.n	8007db4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	8979      	ldrh	r1, [r7, #10]
 8007da6:	4b4a      	ldr	r3, [pc, #296]	; (8007ed0 <HAL_I2C_Mem_Read+0x22c>)
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fb14 	bl	80083dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 f964 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e07c      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d034      	beq.n	8007e74 <HAL_I2C_Mem_Read+0x1d0>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d130      	bne.n	8007e74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2180      	movs	r1, #128	; 0x80
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f935 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e04d      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2bff      	cmp	r3, #255	; 0xff
 8007e34:	d90e      	bls.n	8007e54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	22ff      	movs	r2, #255	; 0xff
 8007e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	8979      	ldrh	r1, [r7, #10]
 8007e44:	2300      	movs	r3, #0
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fac5 	bl	80083dc <I2C_TransferConfig>
 8007e52:	e00f      	b.n	8007e74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	8979      	ldrh	r1, [r7, #10]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fab4 	bl	80083dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d19a      	bne.n	8007db4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f982 	bl	800818c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e01a      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2220      	movs	r2, #32
 8007e98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6859      	ldr	r1, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <HAL_I2C_Mem_Read+0x230>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e000      	b.n	8007ec8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	80002400 	.word	0x80002400
 8007ed4:	fe00e800 	.word	0xfe00e800

08007ed8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee6:	b2db      	uxtb	r3, r3
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	817b      	strh	r3, [r7, #10]
 8007f06:	460b      	mov	r3, r1
 8007f08:	813b      	strh	r3, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	8979      	ldrh	r1, [r7, #10]
 8007f14:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <I2C_RequestMemoryWrite+0xa4>)
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fa5d 	bl	80083dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f8f0 	bl	800810c <I2C_WaitOnTXISFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e02c      	b.n	8007f90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d105      	bne.n	8007f48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f3c:	893b      	ldrh	r3, [r7, #8]
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	629a      	str	r2, [r3, #40]	; 0x28
 8007f46:	e015      	b.n	8007f74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f8d6 	bl	800810c <I2C_WaitOnTXISFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e012      	b.n	8007f90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f6a:	893b      	ldrh	r3, [r7, #8]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2180      	movs	r1, #128	; 0x80
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f884 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	80002000 	.word	0x80002000

08007f9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	817b      	strh	r3, [r7, #10]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	813b      	strh	r3, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	8979      	ldrh	r1, [r7, #10]
 8007fbc:	4b20      	ldr	r3, [pc, #128]	; (8008040 <I2C_RequestMemoryRead+0xa4>)
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fa0a 	bl	80083dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	69b9      	ldr	r1, [r7, #24]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f89d 	bl	800810c <I2C_WaitOnTXISFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e02c      	b.n	8008036 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d105      	bne.n	8007fee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
 8007fec:	e015      	b.n	800801a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	69b9      	ldr	r1, [r7, #24]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f883 	bl	800810c <I2C_WaitOnTXISFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e012      	b.n	8008036 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008010:	893b      	ldrh	r3, [r7, #8]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2200      	movs	r2, #0
 8008022:	2140      	movs	r1, #64	; 0x40
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f831 	bl	800808c <I2C_WaitOnFlagUntilTimeout>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	80002000 	.word	0x80002000

08008044 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d103      	bne.n	8008062 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d007      	beq.n	8008080 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0201 	orr.w	r2, r2, #1
 800807e:	619a      	str	r2, [r3, #24]
  }
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800809c:	e022      	b.n	80080e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a4:	d01e      	beq.n	80080e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a6:	f7fd fc2f 	bl	8005908 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d113      	bne.n	80080e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e00f      	b.n	8008104 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4013      	ands	r3, r2
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d0cd      	beq.n	800809e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008118:	e02c      	b.n	8008174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f870 	bl	8008204 <I2C_IsErrorOccurred>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e02a      	b.n	8008184 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d01e      	beq.n	8008174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fd fbe7 	bl	8005908 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d113      	bne.n	8008174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008150:	f043 0220 	orr.w	r2, r3, #32
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e007      	b.n	8008184 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d1cb      	bne.n	800811a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008198:	e028      	b.n	80081ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f830 	bl	8008204 <I2C_IsErrorOccurred>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e026      	b.n	80081fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ae:	f7fd fbab 	bl	8005908 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d302      	bcc.n	80081c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d113      	bne.n	80081ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c8:	f043 0220 	orr.w	r2, r3, #32
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e007      	b.n	80081fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d1cf      	bne.n	800819a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d075      	beq.n	800831c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2210      	movs	r2, #16
 8008236:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008238:	e056      	b.n	80082e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d052      	beq.n	80082e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008242:	f7fd fb61 	bl	8005908 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <I2C_IsErrorOccurred+0x54>
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d147      	bne.n	80082e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008262:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800826a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827a:	d12e      	bne.n	80082da <I2C_IsErrorOccurred+0xd6>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008282:	d02a      	beq.n	80082da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	2b20      	cmp	r3, #32
 8008288:	d027      	beq.n	80082da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008298:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800829a:	f7fd fb35 	bl	8005908 <HAL_GetTick>
 800829e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082a0:	e01b      	b.n	80082da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80082a2:	f7fd fb31 	bl	8005908 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b19      	cmp	r3, #25
 80082ae:	d914      	bls.n	80082da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d1dc      	bne.n	80082a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d003      	beq.n	80082fe <I2C_IsErrorOccurred+0xfa>
 80082f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d09d      	beq.n	800823a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008302:	2b00      	cmp	r3, #0
 8008304:	d103      	bne.n	800830e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2220      	movs	r2, #32
 800830c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	f043 0304 	orr.w	r3, r3, #4
 8008314:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	f043 0301 	orr.w	r3, r3, #1
 8008334:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800833e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	f043 0308 	orr.w	r3, r3, #8
 8008356:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f043 0302 	orr.w	r3, r3, #2
 8008378:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008382:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800838a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01c      	beq.n	80083cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fe56 	bl	8008044 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <I2C_IsErrorOccurred+0x1d4>)
 80083a4:	400b      	ands	r3, r1
 80083a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3728      	adds	r7, #40	; 0x28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	fe00e800 	.word	0xfe00e800

080083dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	817b      	strh	r3, [r7, #10]
 80083ea:	4613      	mov	r3, r2
 80083ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083ee:	897b      	ldrh	r3, [r7, #10]
 80083f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083f4:	7a7b      	ldrb	r3, [r7, #9]
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	4313      	orrs	r3, r2
 8008406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800840a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	0d5b      	lsrs	r3, r3, #21
 8008416:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <I2C_TransferConfig+0x60>)
 800841c:	430b      	orrs	r3, r1
 800841e:	43db      	mvns	r3, r3
 8008420:	ea02 0103 	and.w	r1, r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800842e:	bf00      	nop
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	03ff63ff 	.word	0x03ff63ff

08008440 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b20      	cmp	r3, #32
 8008454:	d138      	bne.n	80084c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008460:	2302      	movs	r3, #2
 8008462:	e032      	b.n	80084ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2224      	movs	r2, #36	; 0x24
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008492:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6819      	ldr	r1, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e000      	b.n	80084ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084c8:	2302      	movs	r3, #2
  }
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d139      	bne.n	8008560 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e033      	b.n	8008562 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2224      	movs	r2, #36	; 0x24
 8008506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008528:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e000      	b.n	8008562 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
  }
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0bf      	b.n	8008702 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fc fcaa 	bl	8004ef0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80085b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6999      	ldr	r1, [r3, #24]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6899      	ldr	r1, [r3, #8]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b4a      	ldr	r3, [pc, #296]	; (800870c <HAL_LTDC_Init+0x19c>)
 80085e4:	400b      	ands	r3, r1
 80085e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	041b      	lsls	r3, r3, #16
 80085ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6899      	ldr	r1, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68d9      	ldr	r1, [r3, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	4b3e      	ldr	r3, [pc, #248]	; (800870c <HAL_LTDC_Init+0x19c>)
 8008612:	400b      	ands	r3, r1
 8008614:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	041b      	lsls	r3, r3, #16
 800861c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68d9      	ldr	r1, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6919      	ldr	r1, [r3, #16]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	4b33      	ldr	r3, [pc, #204]	; (800870c <HAL_LTDC_Init+0x19c>)
 8008640:	400b      	ands	r3, r1
 8008642:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	041b      	lsls	r3, r3, #16
 800864a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6919      	ldr	r1, [r3, #16]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6959      	ldr	r1, [r3, #20]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b27      	ldr	r3, [pc, #156]	; (800870c <HAL_LTDC_Init+0x19c>)
 800866e:	400b      	ands	r3, r1
 8008670:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6959      	ldr	r1, [r3, #20]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80086a0:	041b      	lsls	r3, r3, #16
 80086a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80086b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0206 	orr.w	r2, r2, #6
 80086de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	f000f800 	.word	0xf000f800

08008710 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d023      	beq.n	800877a <HAL_LTDC_IRQHandler+0x6a>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01e      	beq.n	800877a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0204 	bic.w	r2, r2, #4
 800874a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2204      	movs	r2, #4
 8008752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800875a:	f043 0201 	orr.w	r2, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2204      	movs	r2, #4
 8008768:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f86f 	bl	8008858 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d023      	beq.n	80087cc <HAL_LTDC_IRQHandler+0xbc>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01e      	beq.n	80087cc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0202 	bic.w	r2, r2, #2
 800879c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2202      	movs	r2, #2
 80087a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087ac:	f043 0202 	orr.w	r2, r3, #2
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2204      	movs	r2, #4
 80087ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f846 	bl	8008858 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01b      	beq.n	800880e <HAL_LTDC_IRQHandler+0xfe>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d016      	beq.n	800880e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0201 	bic.w	r2, r2, #1
 80087ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2201      	movs	r2, #1
 80087f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f82f 	bl	800886c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01b      	beq.n	8008850 <HAL_LTDC_IRQHandler+0x140>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d016      	beq.n	8008850 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0208 	bic.w	r2, r2, #8
 8008830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2208      	movs	r2, #8
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f818 	bl	8008880 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_LTDC_ConfigLayer+0x1a>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e02c      	b.n	8008908 <HAL_LTDC_ConfigLayer+0x74>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2134      	movs	r1, #52	; 0x34
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	4413      	add	r3, r2
 80088ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4614      	mov	r4, r2
 80088d2:	461d      	mov	r5, r3
 80088d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f81f 	bl	800892c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2201      	movs	r2, #1
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bdb0      	pop	{r4, r5, r7, pc}

08008910 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800891e:	b2db      	uxtb	r3, r3
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800892c:	b480      	push	{r7}
 800892e:	b089      	sub	sp, #36	; 0x24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008948:	4413      	add	r3, r2
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	01db      	lsls	r3, r3, #7
 8008958:	4413      	add	r3, r2
 800895a:	3384      	adds	r3, #132	; 0x84
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	4611      	mov	r1, r2
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	01d2      	lsls	r2, r2, #7
 8008968:	440a      	add	r2, r1
 800896a:	3284      	adds	r2, #132	; 0x84
 800896c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008970:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	0c1b      	lsrs	r3, r3, #16
 800897e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008982:	4413      	add	r3, r2
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4619      	mov	r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	01db      	lsls	r3, r3, #7
 8008990:	440b      	add	r3, r1
 8008992:	3384      	adds	r3, #132	; 0x84
 8008994:	4619      	mov	r1, r3
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4313      	orrs	r3, r2
 800899a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089aa:	4413      	add	r3, r2
 80089ac:	041b      	lsls	r3, r3, #16
 80089ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	01db      	lsls	r3, r3, #7
 80089ba:	4413      	add	r3, r2
 80089bc:	3384      	adds	r3, #132	; 0x84
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	4611      	mov	r1, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	01d2      	lsls	r2, r2, #7
 80089ca:	440a      	add	r2, r1
 80089cc:	3284      	adds	r2, #132	; 0x84
 80089ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80089d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089e2:	4413      	add	r3, r2
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4619      	mov	r1, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	01db      	lsls	r3, r3, #7
 80089f0:	440b      	add	r3, r1
 80089f2:	3384      	adds	r3, #132	; 0x84
 80089f4:	4619      	mov	r1, r3
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	01db      	lsls	r3, r3, #7
 8008a06:	4413      	add	r3, r2
 8008a08:	3384      	adds	r3, #132	; 0x84
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	4611      	mov	r1, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	01d2      	lsls	r2, r2, #7
 8008a16:	440a      	add	r2, r1
 8008a18:	3284      	adds	r2, #132	; 0x84
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	01db      	lsls	r3, r3, #7
 8008a2a:	4413      	add	r3, r2
 8008a2c:	3384      	adds	r3, #132	; 0x84
 8008a2e:	461a      	mov	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a46:	041b      	lsls	r3, r3, #16
 8008a48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	061b      	lsls	r3, r3, #24
 8008a50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3384      	adds	r3, #132	; 0x84
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	01db      	lsls	r3, r3, #7
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3384      	adds	r3, #132	; 0x84
 8008a70:	461a      	mov	r2, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	01db      	lsls	r3, r3, #7
 8008a90:	440b      	add	r3, r1
 8008a92:	3384      	adds	r3, #132	; 0x84
 8008a94:	4619      	mov	r1, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	01db      	lsls	r3, r3, #7
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3384      	adds	r3, #132	; 0x84
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	01d2      	lsls	r2, r2, #7
 8008ab6:	440a      	add	r2, r1
 8008ab8:	3284      	adds	r2, #132	; 0x84
 8008aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008abe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	01db      	lsls	r3, r3, #7
 8008aca:	4413      	add	r3, r2
 8008acc:	3384      	adds	r3, #132	; 0x84
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	01db      	lsls	r3, r3, #7
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3384      	adds	r3, #132	; 0x84
 8008ae4:	69da      	ldr	r2, [r3, #28]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4619      	mov	r1, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	01db      	lsls	r3, r3, #7
 8008af0:	440b      	add	r3, r1
 8008af2:	3384      	adds	r3, #132	; 0x84
 8008af4:	4619      	mov	r1, r3
 8008af6:	4b58      	ldr	r3, [pc, #352]	; (8008c58 <LTDC_SetConfig+0x32c>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	69da      	ldr	r2, [r3, #28]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	6809      	ldr	r1, [r1, #0]
 8008b08:	4608      	mov	r0, r1
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	01c9      	lsls	r1, r1, #7
 8008b0e:	4401      	add	r1, r0
 8008b10:	3184      	adds	r1, #132	; 0x84
 8008b12:	4313      	orrs	r3, r2
 8008b14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	01db      	lsls	r3, r3, #7
 8008b20:	4413      	add	r3, r2
 8008b22:	3384      	adds	r3, #132	; 0x84
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	01db      	lsls	r3, r3, #7
 8008b30:	4413      	add	r3, r2
 8008b32:	3384      	adds	r3, #132	; 0x84
 8008b34:	461a      	mov	r2, r3
 8008b36:	2300      	movs	r3, #0
 8008b38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	01db      	lsls	r3, r3, #7
 8008b44:	4413      	add	r3, r2
 8008b46:	3384      	adds	r3, #132	; 0x84
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008b58:	2304      	movs	r3, #4
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e01b      	b.n	8008b96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d102      	bne.n	8008b6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008b66:	2303      	movs	r3, #3
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	e014      	b.n	8008b96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d00b      	beq.n	8008b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d007      	beq.n	8008b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d003      	beq.n	8008b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b88:	2b07      	cmp	r3, #7
 8008b8a:	d102      	bne.n	8008b92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	e001      	b.n	8008b96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008b92:	2301      	movs	r3, #1
 8008b94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	01db      	lsls	r3, r3, #7
 8008ba0:	4413      	add	r3, r2
 8008ba2:	3384      	adds	r3, #132	; 0x84
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	4611      	mov	r1, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	01d2      	lsls	r2, r2, #7
 8008bb0:	440a      	add	r2, r1
 8008bb2:	3284      	adds	r2, #132	; 0x84
 8008bb4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
 8008bc4:	041a      	lsls	r2, r3, #16
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6859      	ldr	r1, [r3, #4]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	1acb      	subs	r3, r1, r3
 8008bd0:	69f9      	ldr	r1, [r7, #28]
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	3303      	adds	r3, #3
 8008bd8:	68f9      	ldr	r1, [r7, #12]
 8008bda:	6809      	ldr	r1, [r1, #0]
 8008bdc:	4608      	mov	r0, r1
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	01c9      	lsls	r1, r1, #7
 8008be2:	4401      	add	r1, r0
 8008be4:	3184      	adds	r1, #132	; 0x84
 8008be6:	4313      	orrs	r3, r2
 8008be8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	01db      	lsls	r3, r3, #7
 8008bf4:	4413      	add	r3, r2
 8008bf6:	3384      	adds	r3, #132	; 0x84
 8008bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	01db      	lsls	r3, r3, #7
 8008c04:	440b      	add	r3, r1
 8008c06:	3384      	adds	r3, #132	; 0x84
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4b14      	ldr	r3, [pc, #80]	; (8008c5c <LTDC_SetConfig+0x330>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	01db      	lsls	r3, r3, #7
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3384      	adds	r3, #132	; 0x84
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	01db      	lsls	r3, r3, #7
 8008c30:	4413      	add	r3, r2
 8008c32:	3384      	adds	r3, #132	; 0x84
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	6812      	ldr	r2, [r2, #0]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	01d2      	lsls	r2, r2, #7
 8008c40:	440a      	add	r2, r1
 8008c42:	3284      	adds	r2, #132	; 0x84
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	6013      	str	r3, [r2, #0]
}
 8008c4a:	bf00      	nop
 8008c4c:	3724      	adds	r7, #36	; 0x24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	fffff8f8 	.word	0xfffff8f8
 8008c5c:	fffff800 	.word	0xfffff800

08008c60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c60:	b480      	push	{r7}
 8008c62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c64:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	bf00      	nop
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40007000 	.word	0x40007000

08008c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c8a:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c94:	6413      	str	r3, [r2, #64]	; 0x40
 8008c96:	4b20      	ldr	r3, [pc, #128]	; (8008d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008ca2:	4b1e      	ldr	r3, [pc, #120]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cae:	f7fc fe2b 	bl	8005908 <HAL_GetTick>
 8008cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cb4:	e009      	b.n	8008cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cb6:	f7fc fe27 	bl	8005908 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cc4:	d901      	bls.n	8008cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e022      	b.n	8008d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd6:	d1ee      	bne.n	8008cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008cd8:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a0f      	ldr	r2, [pc, #60]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ce4:	f7fc fe10 	bl	8005908 <HAL_GetTick>
 8008ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cea:	e009      	b.n	8008d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cec:	f7fc fe0c 	bl	8005908 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cfa:	d901      	bls.n	8008d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e007      	b.n	8008d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d0c:	d1ee      	bne.n	8008cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	40007000 	.word	0x40007000

08008d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e291      	b.n	800925a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 8087 	beq.w	8008e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d44:	4b96      	ldr	r3, [pc, #600]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 030c 	and.w	r3, r3, #12
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d00c      	beq.n	8008d6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d50:	4b93      	ldr	r3, [pc, #588]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 030c 	and.w	r3, r3, #12
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d112      	bne.n	8008d82 <HAL_RCC_OscConfig+0x62>
 8008d5c:	4b90      	ldr	r3, [pc, #576]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d68:	d10b      	bne.n	8008d82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d6a:	4b8d      	ldr	r3, [pc, #564]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d06c      	beq.n	8008e50 <HAL_RCC_OscConfig+0x130>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d168      	bne.n	8008e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e26b      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8a:	d106      	bne.n	8008d9a <HAL_RCC_OscConfig+0x7a>
 8008d8c:	4b84      	ldr	r3, [pc, #528]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a83      	ldr	r2, [pc, #524]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e02e      	b.n	8008df8 <HAL_RCC_OscConfig+0xd8>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10c      	bne.n	8008dbc <HAL_RCC_OscConfig+0x9c>
 8008da2:	4b7f      	ldr	r3, [pc, #508]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a7e      	ldr	r2, [pc, #504]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	4b7c      	ldr	r3, [pc, #496]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a7b      	ldr	r2, [pc, #492]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e01d      	b.n	8008df8 <HAL_RCC_OscConfig+0xd8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dc4:	d10c      	bne.n	8008de0 <HAL_RCC_OscConfig+0xc0>
 8008dc6:	4b76      	ldr	r3, [pc, #472]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a75      	ldr	r2, [pc, #468]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a72      	ldr	r2, [pc, #456]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e00b      	b.n	8008df8 <HAL_RCC_OscConfig+0xd8>
 8008de0:	4b6f      	ldr	r3, [pc, #444]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a6e      	ldr	r2, [pc, #440]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	4b6c      	ldr	r3, [pc, #432]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a6b      	ldr	r2, [pc, #428]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d013      	beq.n	8008e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e00:	f7fc fd82 	bl	8005908 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e08:	f7fc fd7e 	bl	8005908 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	; 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e21f      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e1a:	4b61      	ldr	r3, [pc, #388]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f0      	beq.n	8008e08 <HAL_RCC_OscConfig+0xe8>
 8008e26:	e014      	b.n	8008e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fc fd6e 	bl	8005908 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e30:	f7fc fd6a 	bl	8005908 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b64      	cmp	r3, #100	; 0x64
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e20b      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e42:	4b57      	ldr	r3, [pc, #348]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f0      	bne.n	8008e30 <HAL_RCC_OscConfig+0x110>
 8008e4e:	e000      	b.n	8008e52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d069      	beq.n	8008f32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e5e:	4b50      	ldr	r3, [pc, #320]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 030c 	and.w	r3, r3, #12
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e6a:	4b4d      	ldr	r3, [pc, #308]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 030c 	and.w	r3, r3, #12
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d11c      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x190>
 8008e76:	4b4a      	ldr	r3, [pc, #296]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d116      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e82:	4b47      	ldr	r3, [pc, #284]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_RCC_OscConfig+0x17a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d001      	beq.n	8008e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e1df      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	493d      	ldr	r1, [pc, #244]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eae:	e040      	b.n	8008f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d023      	beq.n	8008f00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008eb8:	4b39      	ldr	r3, [pc, #228]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a38      	ldr	r2, [pc, #224]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fc fd20 	bl	8005908 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ecc:	f7fc fd1c 	bl	8005908 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e1bd      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0f0      	beq.n	8008ecc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eea:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4929      	ldr	r1, [pc, #164]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	600b      	str	r3, [r1, #0]
 8008efe:	e018      	b.n	8008f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f00:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a26      	ldr	r2, [pc, #152]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f06:	f023 0301 	bic.w	r3, r3, #1
 8008f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fc fcfc 	bl	8005908 <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f14:	f7fc fcf8 	bl	8005908 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e199      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f26:	4b1e      	ldr	r3, [pc, #120]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f0      	bne.n	8008f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d038      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d019      	beq.n	8008f7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f46:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f4a:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f4c:	f043 0301 	orr.w	r3, r3, #1
 8008f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f52:	f7fc fcd9 	bl	8005908 <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f58:	e008      	b.n	8008f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f5a:	f7fc fcd5 	bl	8005908 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e176      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f0      	beq.n	8008f5a <HAL_RCC_OscConfig+0x23a>
 8008f78:	e01a      	b.n	8008fb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f7e:	4a08      	ldr	r2, [pc, #32]	; (8008fa0 <HAL_RCC_OscConfig+0x280>)
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f86:	f7fc fcbf 	bl	8005908 <HAL_GetTick>
 8008f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f8c:	e00a      	b.n	8008fa4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f8e:	f7fc fcbb 	bl	8005908 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d903      	bls.n	8008fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e15c      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
 8008fa0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fa4:	4b91      	ldr	r3, [pc, #580]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8008fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ee      	bne.n	8008f8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80a4 	beq.w	8009106 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fbe:	4b8b      	ldr	r3, [pc, #556]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fca:	4b88      	ldr	r3, [pc, #544]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	4a87      	ldr	r2, [pc, #540]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8008fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd6:	4b85      	ldr	r3, [pc, #532]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fde:	60bb      	str	r3, [r7, #8]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fe6:	4b82      	ldr	r3, [pc, #520]	; (80091f0 <HAL_RCC_OscConfig+0x4d0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d118      	bne.n	8009024 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008ff2:	4b7f      	ldr	r3, [pc, #508]	; (80091f0 <HAL_RCC_OscConfig+0x4d0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a7e      	ldr	r2, [pc, #504]	; (80091f0 <HAL_RCC_OscConfig+0x4d0>)
 8008ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ffe:	f7fc fc83 	bl	8005908 <HAL_GetTick>
 8009002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009006:	f7fc fc7f 	bl	8005908 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b64      	cmp	r3, #100	; 0x64
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e120      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009018:	4b75      	ldr	r3, [pc, #468]	; (80091f0 <HAL_RCC_OscConfig+0x4d0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0f0      	beq.n	8009006 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d106      	bne.n	800903a <HAL_RCC_OscConfig+0x31a>
 800902c:	4b6f      	ldr	r3, [pc, #444]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800902e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009030:	4a6e      	ldr	r2, [pc, #440]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	6713      	str	r3, [r2, #112]	; 0x70
 8009038:	e02d      	b.n	8009096 <HAL_RCC_OscConfig+0x376>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10c      	bne.n	800905c <HAL_RCC_OscConfig+0x33c>
 8009042:	4b6a      	ldr	r3, [pc, #424]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009046:	4a69      	ldr	r2, [pc, #420]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	6713      	str	r3, [r2, #112]	; 0x70
 800904e:	4b67      	ldr	r3, [pc, #412]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	4a66      	ldr	r2, [pc, #408]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009054:	f023 0304 	bic.w	r3, r3, #4
 8009058:	6713      	str	r3, [r2, #112]	; 0x70
 800905a:	e01c      	b.n	8009096 <HAL_RCC_OscConfig+0x376>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	2b05      	cmp	r3, #5
 8009062:	d10c      	bne.n	800907e <HAL_RCC_OscConfig+0x35e>
 8009064:	4b61      	ldr	r3, [pc, #388]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009068:	4a60      	ldr	r2, [pc, #384]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800906a:	f043 0304 	orr.w	r3, r3, #4
 800906e:	6713      	str	r3, [r2, #112]	; 0x70
 8009070:	4b5e      	ldr	r3, [pc, #376]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009074:	4a5d      	ldr	r2, [pc, #372]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	6713      	str	r3, [r2, #112]	; 0x70
 800907c:	e00b      	b.n	8009096 <HAL_RCC_OscConfig+0x376>
 800907e:	4b5b      	ldr	r3, [pc, #364]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	4a5a      	ldr	r2, [pc, #360]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009084:	f023 0301 	bic.w	r3, r3, #1
 8009088:	6713      	str	r3, [r2, #112]	; 0x70
 800908a:	4b58      	ldr	r3, [pc, #352]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	4a57      	ldr	r2, [pc, #348]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009090:	f023 0304 	bic.w	r3, r3, #4
 8009094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d015      	beq.n	80090ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800909e:	f7fc fc33 	bl	8005908 <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090a4:	e00a      	b.n	80090bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090a6:	f7fc fc2f 	bl	8005908 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d901      	bls.n	80090bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e0ce      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090bc:	4b4b      	ldr	r3, [pc, #300]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80090be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0ee      	beq.n	80090a6 <HAL_RCC_OscConfig+0x386>
 80090c8:	e014      	b.n	80090f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ca:	f7fc fc1d 	bl	8005908 <HAL_GetTick>
 80090ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090d0:	e00a      	b.n	80090e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d2:	f7fc fc19 	bl	8005908 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d901      	bls.n	80090e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e0b8      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090e8:	4b40      	ldr	r3, [pc, #256]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1ee      	bne.n	80090d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090fa:	4b3c      	ldr	r3, [pc, #240]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	4a3b      	ldr	r2, [pc, #236]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80a4 	beq.w	8009258 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009110:	4b36      	ldr	r3, [pc, #216]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 030c 	and.w	r3, r3, #12
 8009118:	2b08      	cmp	r3, #8
 800911a:	d06b      	beq.n	80091f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d149      	bne.n	80091b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009124:	4b31      	ldr	r3, [pc, #196]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a30      	ldr	r2, [pc, #192]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800912a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800912e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009130:	f7fc fbea 	bl	8005908 <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009138:	f7fc fbe6 	bl	8005908 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e087      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800914a:	4b28      	ldr	r3, [pc, #160]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f0      	bne.n	8009138 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	69da      	ldr	r2, [r3, #28]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	019b      	lsls	r3, r3, #6
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	3b01      	subs	r3, #1
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	4313      	orrs	r3, r2
 800917c:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800917e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009182:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009184:	4b19      	ldr	r3, [pc, #100]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 800918a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800918e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7fc fbba 	bl	8005908 <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009198:	f7fc fbb6 	bl	8005908 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e057      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091aa:	4b10      	ldr	r3, [pc, #64]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0x478>
 80091b6:	e04f      	b.n	8009258 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a0b      	ldr	r2, [pc, #44]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80091be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7fc fba0 	bl	8005908 <HAL_GetTick>
 80091c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091cc:	f7fc fb9c 	bl	8005908 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e03d      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091de:	4b03      	ldr	r3, [pc, #12]	; (80091ec <HAL_RCC_OscConfig+0x4cc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f0      	bne.n	80091cc <HAL_RCC_OscConfig+0x4ac>
 80091ea:	e035      	b.n	8009258 <HAL_RCC_OscConfig+0x538>
 80091ec:	40023800 	.word	0x40023800
 80091f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80091f4:	4b1b      	ldr	r3, [pc, #108]	; (8009264 <HAL_RCC_OscConfig+0x544>)
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d028      	beq.n	8009254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800920c:	429a      	cmp	r2, r3
 800920e:	d121      	bne.n	8009254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800921a:	429a      	cmp	r2, r3
 800921c:	d11a      	bne.n	8009254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009224:	4013      	ands	r3, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800922a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800922c:	4293      	cmp	r3, r2
 800922e:	d111      	bne.n	8009254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	3b01      	subs	r3, #1
 800923e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009240:	429a      	cmp	r2, r3
 8009242:	d107      	bne.n	8009254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009250:	429a      	cmp	r2, r3
 8009252:	d001      	beq.n	8009258 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40023800 	.word	0x40023800

08009268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e0d0      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009280:	4b6a      	ldr	r3, [pc, #424]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d910      	bls.n	80092b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800928e:	4b67      	ldr	r3, [pc, #412]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f023 020f 	bic.w	r2, r3, #15
 8009296:	4965      	ldr	r1, [pc, #404]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	4313      	orrs	r3, r2
 800929c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800929e:	4b63      	ldr	r3, [pc, #396]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d001      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0b8      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d020      	beq.n	80092fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092c8:	4b59      	ldr	r3, [pc, #356]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	4a58      	ldr	r2, [pc, #352]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80092d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0308 	and.w	r3, r3, #8
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092e0:	4b53      	ldr	r3, [pc, #332]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	4a52      	ldr	r2, [pc, #328]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ec:	4b50      	ldr	r3, [pc, #320]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	494d      	ldr	r1, [pc, #308]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d040      	beq.n	800938c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d107      	bne.n	8009322 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009312:	4b47      	ldr	r3, [pc, #284]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d115      	bne.n	800934a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e07f      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d107      	bne.n	800933a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800932a:	4b41      	ldr	r3, [pc, #260]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e073      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800933a:	4b3d      	ldr	r3, [pc, #244]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e06b      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800934a:	4b39      	ldr	r3, [pc, #228]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f023 0203 	bic.w	r2, r3, #3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	4936      	ldr	r1, [pc, #216]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 8009358:	4313      	orrs	r3, r2
 800935a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800935c:	f7fc fad4 	bl	8005908 <HAL_GetTick>
 8009360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009362:	e00a      	b.n	800937a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009364:	f7fc fad0 	bl	8005908 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009372:	4293      	cmp	r3, r2
 8009374:	d901      	bls.n	800937a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e053      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800937a:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 020c 	and.w	r2, r3, #12
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	429a      	cmp	r2, r3
 800938a:	d1eb      	bne.n	8009364 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800938c:	4b27      	ldr	r3, [pc, #156]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 030f 	and.w	r3, r3, #15
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d210      	bcs.n	80093bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f023 020f 	bic.w	r2, r3, #15
 80093a2:	4922      	ldr	r1, [pc, #136]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093aa:	4b20      	ldr	r3, [pc, #128]	; (800942c <HAL_RCC_ClockConfig+0x1c4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d001      	beq.n	80093bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e032      	b.n	8009422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d008      	beq.n	80093da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093c8:	4b19      	ldr	r3, [pc, #100]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	4916      	ldr	r1, [pc, #88]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d009      	beq.n	80093fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093e6:	4b12      	ldr	r3, [pc, #72]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	490e      	ldr	r1, [pc, #56]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80093fa:	f000 f821 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 80093fe:	4602      	mov	r2, r0
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <HAL_RCC_ClockConfig+0x1c8>)
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	091b      	lsrs	r3, r3, #4
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	490a      	ldr	r1, [pc, #40]	; (8009434 <HAL_RCC_ClockConfig+0x1cc>)
 800940c:	5ccb      	ldrb	r3, [r1, r3]
 800940e:	fa22 f303 	lsr.w	r3, r2, r3
 8009412:	4a09      	ldr	r2, [pc, #36]	; (8009438 <HAL_RCC_ClockConfig+0x1d0>)
 8009414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <HAL_RCC_ClockConfig+0x1d4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f7fc f92a 	bl	8005674 <HAL_InitTick>

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	40023c00 	.word	0x40023c00
 8009430:	40023800 	.word	0x40023800
 8009434:	08071d68 	.word	0x08071d68
 8009438:	200000c8 	.word	0x200000c8
 800943c:	200000cc 	.word	0x200000cc

08009440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009444:	b090      	sub	sp, #64	; 0x40
 8009446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009450:	2300      	movs	r3, #0
 8009452:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009458:	4b59      	ldr	r3, [pc, #356]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 030c 	and.w	r3, r3, #12
 8009460:	2b08      	cmp	r3, #8
 8009462:	d00d      	beq.n	8009480 <HAL_RCC_GetSysClockFreq+0x40>
 8009464:	2b08      	cmp	r3, #8
 8009466:	f200 80a1 	bhi.w	80095ac <HAL_RCC_GetSysClockFreq+0x16c>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_RCC_GetSysClockFreq+0x34>
 800946e:	2b04      	cmp	r3, #4
 8009470:	d003      	beq.n	800947a <HAL_RCC_GetSysClockFreq+0x3a>
 8009472:	e09b      	b.n	80095ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009474:	4b53      	ldr	r3, [pc, #332]	; (80095c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009478:	e09b      	b.n	80095b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800947a:	4b53      	ldr	r3, [pc, #332]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800947c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800947e:	e098      	b.n	80095b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009480:	4b4f      	ldr	r3, [pc, #316]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800948a:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d028      	beq.n	80094e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009496:	4b4a      	ldr	r3, [pc, #296]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	099b      	lsrs	r3, r3, #6
 800949c:	2200      	movs	r2, #0
 800949e:	623b      	str	r3, [r7, #32]
 80094a0:	627a      	str	r2, [r7, #36]	; 0x24
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80094a8:	2100      	movs	r1, #0
 80094aa:	4b47      	ldr	r3, [pc, #284]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80094ac:	fb03 f201 	mul.w	r2, r3, r1
 80094b0:	2300      	movs	r3, #0
 80094b2:	fb00 f303 	mul.w	r3, r0, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	4a43      	ldr	r2, [pc, #268]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80094ba:	fba0 1202 	umull	r1, r2, r0, r2
 80094be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094c0:	460a      	mov	r2, r1
 80094c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80094c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c6:	4413      	add	r3, r2
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094cc:	2200      	movs	r2, #0
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	61fa      	str	r2, [r7, #28]
 80094d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80094da:	f7f6 fee9 	bl	80002b0 <__aeabi_uldivmod>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4613      	mov	r3, r2
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e6:	e053      	b.n	8009590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094e8:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	099b      	lsrs	r3, r3, #6
 80094ee:	2200      	movs	r2, #0
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	617a      	str	r2, [r7, #20]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80094fa:	f04f 0b00 	mov.w	fp, #0
 80094fe:	4652      	mov	r2, sl
 8009500:	465b      	mov	r3, fp
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f04f 0100 	mov.w	r1, #0
 800950a:	0159      	lsls	r1, r3, #5
 800950c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009510:	0150      	lsls	r0, r2, #5
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	ebb2 080a 	subs.w	r8, r2, sl
 800951a:	eb63 090b 	sbc.w	r9, r3, fp
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	f04f 0300 	mov.w	r3, #0
 8009526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800952a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800952e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009532:	ebb2 0408 	subs.w	r4, r2, r8
 8009536:	eb63 0509 	sbc.w	r5, r3, r9
 800953a:	f04f 0200 	mov.w	r2, #0
 800953e:	f04f 0300 	mov.w	r3, #0
 8009542:	00eb      	lsls	r3, r5, #3
 8009544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009548:	00e2      	lsls	r2, r4, #3
 800954a:	4614      	mov	r4, r2
 800954c:	461d      	mov	r5, r3
 800954e:	eb14 030a 	adds.w	r3, r4, sl
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	eb45 030b 	adc.w	r3, r5, fp
 8009558:	607b      	str	r3, [r7, #4]
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009566:	4629      	mov	r1, r5
 8009568:	028b      	lsls	r3, r1, #10
 800956a:	4621      	mov	r1, r4
 800956c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009570:	4621      	mov	r1, r4
 8009572:	028a      	lsls	r2, r1, #10
 8009574:	4610      	mov	r0, r2
 8009576:	4619      	mov	r1, r3
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	2200      	movs	r2, #0
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	60fa      	str	r2, [r7, #12]
 8009580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009584:	f7f6 fe94 	bl	80002b0 <__aeabi_uldivmod>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4613      	mov	r3, r2
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	0c1b      	lsrs	r3, r3, #16
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	3301      	adds	r3, #1
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80095a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80095aa:	e002      	b.n	80095b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80095ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80095b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3740      	adds	r7, #64	; 0x40
 80095b8:	46bd      	mov	sp, r7
 80095ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095be:	bf00      	nop
 80095c0:	40023800 	.word	0x40023800
 80095c4:	00f42400 	.word	0x00f42400
 80095c8:	017d7840 	.word	0x017d7840

080095cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80095d2:	681b      	ldr	r3, [r3, #0]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	200000c8 	.word	0x200000c8

080095e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80095e8:	f7ff fff0 	bl	80095cc <HAL_RCC_GetHCLKFreq>
 80095ec:	4602      	mov	r2, r0
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	0a9b      	lsrs	r3, r3, #10
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	4903      	ldr	r1, [pc, #12]	; (8009608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095fa:	5ccb      	ldrb	r3, [r1, r3]
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009600:	4618      	mov	r0, r3
 8009602:	bd80      	pop	{r7, pc}
 8009604:	40023800 	.word	0x40023800
 8009608:	08071d78 	.word	0x08071d78

0800960c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009610:	f7ff ffdc 	bl	80095cc <HAL_RCC_GetHCLKFreq>
 8009614:	4602      	mov	r2, r0
 8009616:	4b05      	ldr	r3, [pc, #20]	; (800962c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	0b5b      	lsrs	r3, r3, #13
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	4903      	ldr	r1, [pc, #12]	; (8009630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009622:	5ccb      	ldrb	r3, [r1, r3]
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40023800 	.word	0x40023800
 8009630:	08071d78 	.word	0x08071d78

08009634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	220f      	movs	r2, #15
 8009642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009644:	4b12      	ldr	r3, [pc, #72]	; (8009690 <HAL_RCC_GetClockConfig+0x5c>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f003 0203 	and.w	r2, r3, #3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009650:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <HAL_RCC_GetClockConfig+0x5c>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800965c:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <HAL_RCC_GetClockConfig+0x5c>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009668:	4b09      	ldr	r3, [pc, #36]	; (8009690 <HAL_RCC_GetClockConfig+0x5c>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	08db      	lsrs	r3, r3, #3
 800966e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <HAL_RCC_GetClockConfig+0x60>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 020f 	and.w	r2, r3, #15
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	601a      	str	r2, [r3, #0]
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40023800 	.word	0x40023800
 8009694:	40023c00 	.word	0x40023c00

08009698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d012      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80096c0:	4b69      	ldr	r3, [pc, #420]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a68      	ldr	r2, [pc, #416]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096ca:	6093      	str	r3, [r2, #8]
 80096cc:	4b66      	ldr	r3, [pc, #408]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	4964      	ldr	r1, [pc, #400]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80096e2:	2301      	movs	r3, #1
 80096e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d017      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096f2:	4b5d      	ldr	r3, [pc, #372]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009700:	4959      	ldr	r1, [pc, #356]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009702:	4313      	orrs	r3, r2
 8009704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009710:	d101      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009712:	2301      	movs	r3, #1
 8009714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d017      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800972e:	4b4e      	ldr	r3, [pc, #312]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	494a      	ldr	r1, [pc, #296]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800974c:	d101      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800974e:	2301      	movs	r3, #1
 8009750:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800975a:	2301      	movs	r3, #1
 800975c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800976a:	2301      	movs	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 808b 	beq.w	8009892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800977c:	4b3a      	ldr	r3, [pc, #232]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800977e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009780:	4a39      	ldr	r2, [pc, #228]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009786:	6413      	str	r3, [r2, #64]	; 0x40
 8009788:	4b37      	ldr	r3, [pc, #220]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009790:	60bb      	str	r3, [r7, #8]
 8009792:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009794:	4b35      	ldr	r3, [pc, #212]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a34      	ldr	r2, [pc, #208]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800979a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a0:	f7fc f8b2 	bl	8005908 <HAL_GetTick>
 80097a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097a6:	e008      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a8:	f7fc f8ae 	bl	8005908 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b64      	cmp	r3, #100	; 0x64
 80097b4:	d901      	bls.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e357      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80097ba:	4b2c      	ldr	r3, [pc, #176]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0f0      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097c6:	4b28      	ldr	r3, [pc, #160]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d035      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d02e      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097e4:	4b20      	ldr	r3, [pc, #128]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097ee:	4b1e      	ldr	r3, [pc, #120]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	4a1d      	ldr	r2, [pc, #116]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097fa:	4b1b      	ldr	r3, [pc, #108]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	4a1a      	ldr	r2, [pc, #104]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009806:	4a18      	ldr	r2, [pc, #96]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b01      	cmp	r3, #1
 8009816:	d114      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009818:	f7fc f876 	bl	8005908 <HAL_GetTick>
 800981c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800981e:	e00a      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009820:	f7fc f872 	bl	8005908 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	f241 3288 	movw	r2, #5000	; 0x1388
 800982e:	4293      	cmp	r3, r2
 8009830:	d901      	bls.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e319      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009836:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0ee      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800984e:	d111      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800985c:	4b04      	ldr	r3, [pc, #16]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800985e:	400b      	ands	r3, r1
 8009860:	4901      	ldr	r1, [pc, #4]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
 8009866:	e00b      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009868:	40023800 	.word	0x40023800
 800986c:	40007000 	.word	0x40007000
 8009870:	0ffffcff 	.word	0x0ffffcff
 8009874:	4baa      	ldr	r3, [pc, #680]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	4aa9      	ldr	r2, [pc, #676]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800987a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800987e:	6093      	str	r3, [r2, #8]
 8009880:	4ba7      	ldr	r3, [pc, #668]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800988c:	49a4      	ldr	r1, [pc, #656]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800988e:	4313      	orrs	r3, r2
 8009890:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0310 	and.w	r3, r3, #16
 800989a:	2b00      	cmp	r3, #0
 800989c:	d010      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800989e:	4ba0      	ldr	r3, [pc, #640]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a4:	4a9e      	ldr	r2, [pc, #632]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80098ae:	4b9c      	ldr	r3, [pc, #624]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	4999      	ldr	r1, [pc, #612]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00a      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098cc:	4b94      	ldr	r3, [pc, #592]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098da:	4991      	ldr	r1, [pc, #580]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00a      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098ee:	4b8c      	ldr	r3, [pc, #560]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098fc:	4988      	ldr	r1, [pc, #544]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00a      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009910:	4b83      	ldr	r3, [pc, #524]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991e:	4980      	ldr	r1, [pc, #512]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009920:	4313      	orrs	r3, r2
 8009922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009932:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009938:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009940:	4977      	ldr	r1, [pc, #476]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009942:	4313      	orrs	r3, r2
 8009944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009954:	4b72      	ldr	r3, [pc, #456]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995a:	f023 0203 	bic.w	r2, r3, #3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009962:	496f      	ldr	r1, [pc, #444]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009964:	4313      	orrs	r3, r2
 8009966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009976:	4b6a      	ldr	r3, [pc, #424]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	f023 020c 	bic.w	r2, r3, #12
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009984:	4966      	ldr	r1, [pc, #408]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009998:	4b61      	ldr	r3, [pc, #388]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099a6:	495e      	ldr	r1, [pc, #376]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099ba:	4b59      	ldr	r3, [pc, #356]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c8:	4955      	ldr	r1, [pc, #340]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099dc:	4b50      	ldr	r3, [pc, #320]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	494d      	ldr	r1, [pc, #308]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80099fe:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0c:	4944      	ldr	r1, [pc, #272]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009a20:	4b3f      	ldr	r3, [pc, #252]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2e:	493c      	ldr	r1, [pc, #240]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a50:	4933      	ldr	r1, [pc, #204]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a64:	4b2e      	ldr	r3, [pc, #184]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a72:	492b      	ldr	r1, [pc, #172]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d011      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a86:	4b26      	ldr	r3, [pc, #152]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a94:	4922      	ldr	r1, [pc, #136]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aa4:	d101      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0308 	and.w	r3, r3, #8
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009acc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad4:	4912      	ldr	r1, [pc, #72]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ae8:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009af8:	4909      	ldr	r1, [pc, #36]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d006      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80d9 	beq.w	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a01      	ldr	r2, [pc, #4]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b1e:	e001      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009b20:	40023800 	.word	0x40023800
 8009b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b26:	f7fb feef 	bl	8005908 <HAL_GetTick>
 8009b2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b2c:	e008      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b2e:	f7fb feeb 	bl	8005908 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	2b64      	cmp	r3, #100	; 0x64
 8009b3a:	d901      	bls.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e194      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b40:	4b6c      	ldr	r3, [pc, #432]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f0      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d021      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d11d      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009b60:	4b64      	ldr	r3, [pc, #400]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009b6e:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b74:	0e1b      	lsrs	r3, r3, #24
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	019a      	lsls	r2, r3, #6
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	041b      	lsls	r3, r3, #16
 8009b86:	431a      	orrs	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	061b      	lsls	r3, r3, #24
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	071b      	lsls	r3, r3, #28
 8009b94:	4957      	ldr	r1, [pc, #348]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d02e      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bc6:	d129      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009bc8:	4b4a      	ldr	r3, [pc, #296]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009bd6:	4b47      	ldr	r3, [pc, #284]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bdc:	0f1b      	lsrs	r3, r3, #28
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	019a      	lsls	r2, r3, #6
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	041b      	lsls	r3, r3, #16
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	071b      	lsls	r3, r3, #28
 8009bfc:	493d      	ldr	r1, [pc, #244]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c04:	4b3b      	ldr	r3, [pc, #236]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0a:	f023 021f 	bic.w	r2, r3, #31
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4937      	ldr	r1, [pc, #220]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01d      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009c28:	4b32      	ldr	r3, [pc, #200]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c2e:	0e1b      	lsrs	r3, r3, #24
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c36:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c3c:	0f1b      	lsrs	r3, r3, #28
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	019a      	lsls	r2, r3, #6
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	431a      	orrs	r2, r3
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	061b      	lsls	r3, r3, #24
 8009c56:	431a      	orrs	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	071b      	lsls	r3, r3, #28
 8009c5c:	4925      	ldr	r1, [pc, #148]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d011      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	019a      	lsls	r2, r3, #6
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	061b      	lsls	r3, r3, #24
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	071b      	lsls	r3, r3, #28
 8009c8c:	4919      	ldr	r1, [pc, #100]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c94:	4b17      	ldr	r3, [pc, #92]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a16      	ldr	r2, [pc, #88]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca0:	f7fb fe32 	bl	8005908 <HAL_GetTick>
 8009ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ca6:	e008      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ca8:	f7fb fe2e 	bl	8005908 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b64      	cmp	r3, #100	; 0x64
 8009cb4:	d901      	bls.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e0d7      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cba:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f0      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	f040 80cd 	bne.w	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cda:	f7fb fe15 	bl	8005908 <HAL_GetTick>
 8009cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ce0:	e00a      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ce2:	f7fb fe11 	bl	8005908 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b64      	cmp	r3, #100	; 0x64
 8009cee:	d903      	bls.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e0ba      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009cf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009cf8:	4b5e      	ldr	r3, [pc, #376]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d04:	d0ed      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d02e      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12a      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d2e:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d34:	0c1b      	lsrs	r3, r3, #16
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d3c:	4b4d      	ldr	r3, [pc, #308]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d42:	0f1b      	lsrs	r3, r3, #28
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	019a      	lsls	r2, r3, #6
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	041b      	lsls	r3, r3, #16
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	061b      	lsls	r3, r3, #24
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	071b      	lsls	r3, r3, #28
 8009d62:	4944      	ldr	r1, [pc, #272]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d6a:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	493d      	ldr	r1, [pc, #244]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d022      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d98:	d11d      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d9a:	4b36      	ldr	r3, [pc, #216]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da0:	0e1b      	lsrs	r3, r3, #24
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009da8:	4b32      	ldr	r3, [pc, #200]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dae:	0f1b      	lsrs	r3, r3, #28
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	019a      	lsls	r2, r3, #6
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	041b      	lsls	r3, r3, #16
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	061b      	lsls	r3, r3, #24
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	071b      	lsls	r3, r3, #28
 8009dce:	4929      	ldr	r1, [pc, #164]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d028      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009de2:	4b24      	ldr	r3, [pc, #144]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009df0:	4b20      	ldr	r3, [pc, #128]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df6:	0c1b      	lsrs	r3, r3, #16
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	019a      	lsls	r2, r3, #6
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	071b      	lsls	r3, r3, #28
 8009e16:	4917      	ldr	r1, [pc, #92]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009e1e:	4b15      	ldr	r3, [pc, #84]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4911      	ldr	r1, [pc, #68]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009e34:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a0e      	ldr	r2, [pc, #56]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e40:	f7fb fd62 	bl	8005908 <HAL_GetTick>
 8009e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e46:	e008      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e48:	f7fb fd5e 	bl	8005908 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b64      	cmp	r3, #100	; 0x64
 8009e54:	d901      	bls.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e007      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e5a:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e66:	d1ef      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3720      	adds	r7, #32
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	40023800 	.word	0x40023800

08009e78 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e01c      	b.n	8009ec4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	795b      	ldrb	r3, [r3, #5]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fb f8f0 	bl	8005080 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0204 	orr.w	r2, r2, #4
 8009eb4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e044      	b.n	8009f70 <HAL_RNG_GenerateRandomNumber+0xa4>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	795b      	ldrb	r3, [r3, #5]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d133      	bne.n	8009f5e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009efc:	f7fb fd04 	bl	8005908 <HAL_GetTick>
 8009f00:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009f02:	e018      	b.n	8009f36 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009f04:	f7fb fd00 	bl	8005908 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d911      	bls.n	8009f36 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d00a      	beq.n	8009f36 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e01c      	b.n	8009f70 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d1df      	bne.n	8009f04 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	715a      	strb	r2, [r3, #5]
 8009f5c:	e004      	b.n	8009f68 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2204      	movs	r2, #4
 8009f62:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	711a      	strb	r2, [r3, #4]

  return status;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	d105      	bne.n	8009f9e <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2210      	movs	r2, #16
 8009f96:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e00b      	b.n	8009fb6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d104      	bne.n	8009fb6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2208      	movs	r2, #8
 8009fb0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d10b      	bne.n	8009fd4 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2204      	movs	r2, #4
 8009fc0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f839 	bl	800a03a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8009fd0:	605a      	str	r2, [r3, #4]

    return;
 8009fd2:	e024      	b.n	800a01e <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d11d      	bne.n	800a01e <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0208 	bic.w	r2, r2, #8
 8009ff0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	795b      	ldrb	r3, [r3, #5]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b04      	cmp	r3, #4
 800a004:	d00b      	beq.n	800a01e <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f803 	bl	800a024 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e081      	b.n	800a166 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	7f5b      	ldrb	r3, [r3, #29]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d105      	bne.n	800a078 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fb f82a 	bl	80050cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	22ca      	movs	r2, #202	; 0xca
 800a084:	625a      	str	r2, [r3, #36]	; 0x24
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2253      	movs	r2, #83	; 0x53
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fb16 	bl	800a6c0 <RTC_EnterInitMode>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	22ff      	movs	r2, #255	; 0xff
 800a0a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e05c      	b.n	800a166 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6899      	ldr	r1, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	; (800a170 <HAL_RTC_Init+0x120>)
 800a0b8:	400b      	ands	r3, r1
 800a0ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6899      	ldr	r1, [r3, #8]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68d2      	ldr	r2, [r2, #12]
 800a0e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6919      	ldr	r1, [r3, #16]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	041a      	lsls	r2, r3, #16
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a106:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10e      	bne.n	800a134 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 faaa 	bl	800a670 <HAL_RTC_WaitForSynchro>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	22ff      	movs	r2, #255	; 0xff
 800a128:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2204      	movs	r2, #4
 800a12e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e018      	b.n	800a166 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0208 	bic.w	r2, r2, #8
 800a142:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	699a      	ldr	r2, [r3, #24]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	22ff      	movs	r2, #255	; 0xff
 800a15c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a164:	2300      	movs	r3, #0
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	ff8fffbf 	.word	0xff8fffbf

0800a174 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	7f1b      	ldrb	r3, [r3, #28]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_RTC_SetTime+0x1c>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e0a8      	b.n	800a2e2 <HAL_RTC_SetTime+0x16e>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2202      	movs	r2, #2
 800a19a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d126      	bne.n	800a1f0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 faac 	bl	800a718 <RTC_ByteToBcd2>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 faa5 	bl	800a718 <RTC_ByteToBcd2>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a1d2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	789b      	ldrb	r3, [r3, #2]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fa9d 	bl	800a718 <RTC_ByteToBcd2>
 800a1de:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a1e0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	7b1b      	ldrb	r3, [r3, #12]
 800a1e8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e018      	b.n	800a222 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2200      	movs	r2, #0
 800a202:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a210:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a216:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	7b1b      	ldrb	r3, [r3, #12]
 800a21c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a21e:	4313      	orrs	r3, r2
 800a220:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	22ca      	movs	r2, #202	; 0xca
 800a228:	625a      	str	r2, [r3, #36]	; 0x24
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2253      	movs	r2, #83	; 0x53
 800a230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 fa44 	bl	800a6c0 <RTC_EnterInitMode>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	22ff      	movs	r2, #255	; 0xff
 800a244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2204      	movs	r2, #4
 800a24a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e045      	b.n	800a2e2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	6979      	ldr	r1, [r7, #20]
 800a25c:	4b23      	ldr	r3, [pc, #140]	; (800a2ec <HAL_RTC_SetTime+0x178>)
 800a25e:	400b      	ands	r3, r1
 800a260:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a270:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6899      	ldr	r1, [r3, #8]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	431a      	orrs	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a298:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d111      	bne.n	800a2cc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f9e1 	bl	800a670 <HAL_RTC_WaitForSynchro>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	22ff      	movs	r2, #255	; 0xff
 800a2ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2204      	movs	r2, #4
 800a2c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e00a      	b.n	800a2e2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	22ff      	movs	r2, #255	; 0xff
 800a2d2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
  }
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	007f7f7f 	.word	0x007f7f7f

0800a2f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7f1b      	ldrb	r3, [r3, #28]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_RTC_SetDate+0x1c>
 800a308:	2302      	movs	r3, #2
 800a30a:	e092      	b.n	800a432 <HAL_RTC_SetDate+0x142>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2202      	movs	r2, #2
 800a316:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10e      	bne.n	800a33c <HAL_RTC_SetDate+0x4c>
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b00      	cmp	r3, #0
 800a328:	d008      	beq.n	800a33c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	f023 0310 	bic.w	r3, r3, #16
 800a332:	b2db      	uxtb	r3, r3
 800a334:	330a      	adds	r3, #10
 800a336:	b2da      	uxtb	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d11c      	bne.n	800a37c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	78db      	ldrb	r3, [r3, #3]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f9e6 	bl	800a718 <RTC_ByteToBcd2>
 800a34c:	4603      	mov	r3, r0
 800a34e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f9df 	bl	800a718 <RTC_ByteToBcd2>
 800a35a:	4603      	mov	r3, r0
 800a35c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a35e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	789b      	ldrb	r3, [r3, #2]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 f9d7 	bl	800a718 <RTC_ByteToBcd2>
 800a36a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a36c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	e00e      	b.n	800a39a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a388:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a38e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a396:	4313      	orrs	r3, r2
 800a398:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	22ca      	movs	r2, #202	; 0xca
 800a3a0:	625a      	str	r2, [r3, #36]	; 0x24
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2253      	movs	r2, #83	; 0x53
 800a3a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f988 	bl	800a6c0 <RTC_EnterInitMode>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00b      	beq.n	800a3ce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	22ff      	movs	r2, #255	; 0xff
 800a3bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e031      	b.n	800a432 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	6979      	ldr	r1, [r7, #20]
 800a3d4:	4b19      	ldr	r3, [pc, #100]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a3d6:	400b      	ands	r3, r1
 800a3d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d111      	bne.n	800a41c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f939 	bl	800a670 <HAL_RTC_WaitForSynchro>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2204      	movs	r2, #4
 800a410:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e00a      	b.n	800a432 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a430:	2300      	movs	r3, #0
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	bd90      	pop	{r4, r7, pc}
 800a43a:	bf00      	nop
 800a43c:	00ffff3f 	.word	0x00ffff3f

0800a440 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a440:	b590      	push	{r4, r7, lr}
 800a442:	b089      	sub	sp, #36	; 0x24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	2300      	movs	r3, #0
 800a456:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	7f1b      	ldrb	r3, [r3, #28]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <HAL_RTC_SetAlarm+0x24>
 800a460:	2302      	movs	r3, #2
 800a462:	e101      	b.n	800a668 <HAL_RTC_SetAlarm+0x228>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2202      	movs	r2, #2
 800a46e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d137      	bne.n	800a4e6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2200      	movs	r2, #0
 800a488:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 f942 	bl	800a718 <RTC_ByteToBcd2>
 800a494:	4603      	mov	r3, r0
 800a496:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 f93b 	bl	800a718 <RTC_ByteToBcd2>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a4a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	789b      	ldrb	r3, [r3, #2]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f933 	bl	800a718 <RTC_ByteToBcd2>
 800a4b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a4b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	7b1b      	ldrb	r3, [r3, #12]
 800a4bc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a4be:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 f925 	bl	800a718 <RTC_ByteToBcd2>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a4d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a4da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e023      	b.n	800a52e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a506:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a50c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	7b1b      	ldrb	r3, [r3, #12]
 800a512:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a514:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a51c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a51e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a524:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a52a:	4313      	orrs	r3, r2
 800a52c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	22ca      	movs	r2, #202	; 0xca
 800a540:	625a      	str	r2, [r3, #36]	; 0x24
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2253      	movs	r2, #83	; 0x53
 800a548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a552:	d13f      	bne.n	800a5d4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a562:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a572:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a574:	f7fb f9c8 	bl	8005908 <HAL_GetTick>
 800a578:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a57a:	e013      	b.n	800a5a4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a57c:	f7fb f9c4 	bl	8005908 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a58a:	d90b      	bls.n	800a5a4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	22ff      	movs	r2, #255	; 0xff
 800a592:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2203      	movs	r2, #3
 800a598:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e061      	b.n	800a668 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0e4      	beq.n	800a57c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5d0:	609a      	str	r2, [r3, #8]
 800a5d2:	e03e      	b.n	800a652 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a5e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5f4:	f7fb f988 	bl	8005908 <HAL_GetTick>
 800a5f8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a5fa:	e013      	b.n	800a624 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5fc:	f7fb f984 	bl	8005908 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a60a:	d90b      	bls.n	800a624 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	22ff      	movs	r2, #255	; 0xff
 800a612:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2203      	movs	r2, #3
 800a618:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e021      	b.n	800a668 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0e4      	beq.n	800a5fc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69fa      	ldr	r2, [r7, #28]
 800a638:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a650:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	22ff      	movs	r2, #255	; 0xff
 800a658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3724      	adds	r7, #36	; 0x24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd90      	pop	{r4, r7, pc}

0800a670 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a68a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a68c:	f7fb f93c 	bl	8005908 <HAL_GetTick>
 800a690:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a692:	e009      	b.n	800a6a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a694:	f7fb f938 	bl	8005908 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e007      	b.n	800a6b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0ee      	beq.n	800a694 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d119      	bne.n	800a70e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6e4:	f7fb f910 	bl	8005908 <HAL_GetTick>
 800a6e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a6ea:	e009      	b.n	800a700 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6ec:	f7fb f90c 	bl	8005908 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6fa:	d901      	bls.n	800a700 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e007      	b.n	800a710 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0ee      	beq.n	800a6ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a726:	e005      	b.n	800a734 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3301      	adds	r3, #1
 800a72c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	3b0a      	subs	r3, #10
 800a732:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	2b09      	cmp	r3, #9
 800a738:	d8f6      	bhi.n	800a728 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	b2da      	uxtb	r2, r3
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	4313      	orrs	r3, r2
 800a746:	b2db      	uxtb	r3, r3
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	7f1b      	ldrb	r3, [r3, #28]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d101      	bne.n	800a770 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e03e      	b.n	800a7ee <HAL_RTCEx_SetTimeStamp+0x9a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2202      	movs	r2, #2
 800a77a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a784:	4013      	ands	r3, r2
 800a786:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	22ca      	movs	r2, #202	; 0xca
 800a796:	625a      	str	r2, [r3, #36]	; 0x24
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2253      	movs	r2, #83	; 0x53
 800a79e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0206 	bic.w	r2, r2, #6
 800a7ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689a      	ldr	r2, [r3, #8]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	22ff      	movs	r2, #255	; 0xff
 800a7de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	fffff7f7 	.word	0xfffff7f7

0800a800 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e025      	b.n	800a860 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7fa ff19 	bl	8005660 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f002 f82f 	bl	800c8a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	461a      	mov	r2, r3
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	f002 f883 	bl	800c95c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a87a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d101      	bne.n	800a886 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a882:	2302      	movs	r3, #2
 800a884:	e021      	b.n	800a8ca <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d002      	beq.n	800a892 <HAL_SDRAM_SendCommand+0x2a>
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d118      	bne.n	800a8c4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2202      	movs	r2, #2
 800a896:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f002 f8c4 	bl	800ca30 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d104      	bne.n	800a8ba <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2205      	movs	r2, #5
 800a8b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8b8:	e006      	b.n	800a8c8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8c2:	e001      	b.n	800a8c8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e000      	b.n	800a8ca <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d101      	bne.n	800a8ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e016      	b.n	800a91a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d10f      	bne.n	800a918 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	f002 f8b6 	bl	800ca78 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	e000      	b.n	800a91a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e09d      	b.n	800aa70 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d108      	bne.n	800a94e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a944:	d009      	beq.n	800a95a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	61da      	str	r2, [r3, #28]
 800a94c:	e005      	b.n	800a95a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7fa fbd7 	bl	8005128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a990:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a99a:	d902      	bls.n	800a9a2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e002      	b.n	800a9a8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a9b0:	d007      	beq.n	800a9c2 <HAL_SPI_Init+0xa0>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9ba:	d002      	beq.n	800a9c2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa04:	ea42 0103 	orr.w	r1, r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	f003 0204 	and.w	r2, r3, #4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	431a      	orrs	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa3e:	ea42 0103 	orr.w	r1, r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	69da      	ldr	r2, [r3, #28]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e049      	b.n	800ab1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fa fba4 	bl	80051ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f000 fac0 	bl	800b03c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d001      	beq.n	800ab40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e054      	b.n	800abea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f042 0201 	orr.w	r2, r2, #1
 800ab56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d022      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab6a:	d01d      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a22      	ldr	r2, [pc, #136]	; (800abfc <HAL_TIM_Base_Start_IT+0xd4>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d018      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d013      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a1f      	ldr	r2, [pc, #124]	; (800ac04 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00e      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <HAL_TIM_Base_Start_IT+0xe0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d009      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a1c      	ldr	r2, [pc, #112]	; (800ac0c <HAL_TIM_Base_Start_IT+0xe4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d004      	beq.n	800aba8 <HAL_TIM_Base_Start_IT+0x80>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <HAL_TIM_Base_Start_IT+0xe8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d115      	bne.n	800abd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <HAL_TIM_Base_Start_IT+0xec>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b06      	cmp	r3, #6
 800abb8:	d015      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0xbe>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc0:	d011      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f042 0201 	orr.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd2:	e008      	b.n	800abe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e000      	b.n	800abe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40010400 	.word	0x40010400
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40001800 	.word	0x40001800
 800ac14:	00010007 	.word	0x00010007

0800ac18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d122      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d11b      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f06f 0202 	mvn.w	r2, #2
 800ac44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f9d0 	bl	800b000 <HAL_TIM_IC_CaptureCallback>
 800ac60:	e005      	b.n	800ac6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f9c2 	bl	800afec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f9d3 	bl	800b014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d122      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b04      	cmp	r3, #4
 800ac8e:	d11b      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0204 	mvn.w	r2, #4
 800ac98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f9a6 	bl	800b000 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f998 	bl	800afec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9a9 	bl	800b014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0208 	mvn.w	r2, #8
 800acec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2204      	movs	r2, #4
 800acf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f97c 	bl	800b000 <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f96e 	bl	800afec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f97f 	bl	800b014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0310 	and.w	r3, r3, #16
 800ad26:	2b10      	cmp	r3, #16
 800ad28:	d122      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d11b      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0210 	mvn.w	r2, #16
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2208      	movs	r2, #8
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f952 	bl	800b000 <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f944 	bl	800afec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f955 	bl	800b014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0201 	mvn.w	r2, #1
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7f8 f800 	bl	8002d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b80      	cmp	r3, #128	; 0x80
 800ada8:	d10e      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb4:	2b80      	cmp	r3, #128	; 0x80
 800adb6:	d107      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fb0c 	bl	800b3e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add6:	d10e      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d107      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 faff 	bl	800b3f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d10e      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d107      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f903 	bl	800b028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b20      	cmp	r3, #32
 800ae2e:	d10e      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d107      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f06f 0220 	mvn.w	r2, #32
 800ae46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fabf 	bl	800b3cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_TIM_ConfigClockSource+0x1c>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e0b4      	b.n	800afde <HAL_TIM_ConfigClockSource+0x186>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	4b56      	ldr	r3, [pc, #344]	; (800afe8 <HAL_TIM_ConfigClockSource+0x190>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeac:	d03e      	beq.n	800af2c <HAL_TIM_ConfigClockSource+0xd4>
 800aeae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeb2:	f200 8087 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aeb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeba:	f000 8086 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x172>
 800aebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec2:	d87f      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aec4:	2b70      	cmp	r3, #112	; 0x70
 800aec6:	d01a      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0xa6>
 800aec8:	2b70      	cmp	r3, #112	; 0x70
 800aeca:	d87b      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aecc:	2b60      	cmp	r3, #96	; 0x60
 800aece:	d050      	beq.n	800af72 <HAL_TIM_ConfigClockSource+0x11a>
 800aed0:	2b60      	cmp	r3, #96	; 0x60
 800aed2:	d877      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aed4:	2b50      	cmp	r3, #80	; 0x50
 800aed6:	d03c      	beq.n	800af52 <HAL_TIM_ConfigClockSource+0xfa>
 800aed8:	2b50      	cmp	r3, #80	; 0x50
 800aeda:	d873      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d058      	beq.n	800af92 <HAL_TIM_ConfigClockSource+0x13a>
 800aee0:	2b40      	cmp	r3, #64	; 0x40
 800aee2:	d86f      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aee4:	2b30      	cmp	r3, #48	; 0x30
 800aee6:	d064      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x15a>
 800aee8:	2b30      	cmp	r3, #48	; 0x30
 800aeea:	d86b      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d060      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x15a>
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	d867      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d05c      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x15a>
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	d05a      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x15a>
 800aefc:	e062      	b.n	800afc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6899      	ldr	r1, [r3, #8]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f000 f9af 	bl	800b270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	609a      	str	r2, [r3, #8]
      break;
 800af2a:	e04f      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	6899      	ldr	r1, [r3, #8]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f000 f998 	bl	800b270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689a      	ldr	r2, [r3, #8]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af4e:	609a      	str	r2, [r3, #8]
      break;
 800af50:	e03c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	6859      	ldr	r1, [r3, #4]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	461a      	mov	r2, r3
 800af60:	f000 f90c 	bl	800b17c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2150      	movs	r1, #80	; 0x50
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f965 	bl	800b23a <TIM_ITRx_SetConfig>
      break;
 800af70:	e02c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6859      	ldr	r1, [r3, #4]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	461a      	mov	r2, r3
 800af80:	f000 f92b 	bl	800b1da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2160      	movs	r1, #96	; 0x60
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f955 	bl	800b23a <TIM_ITRx_SetConfig>
      break;
 800af90:	e01c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	6859      	ldr	r1, [r3, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	461a      	mov	r2, r3
 800afa0:	f000 f8ec 	bl	800b17c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2140      	movs	r1, #64	; 0x40
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 f945 	bl	800b23a <TIM_ITRx_SetConfig>
      break;
 800afb0:	e00c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f000 f93c 	bl	800b23a <TIM_ITRx_SetConfig>
      break;
 800afc2:	e003      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
      break;
 800afc8:	e000      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800afca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	fffeff88 	.word	0xfffeff88

0800afec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a40      	ldr	r2, [pc, #256]	; (800b150 <TIM_Base_SetConfig+0x114>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d013      	beq.n	800b07c <TIM_Base_SetConfig+0x40>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d00f      	beq.n	800b07c <TIM_Base_SetConfig+0x40>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a3d      	ldr	r2, [pc, #244]	; (800b154 <TIM_Base_SetConfig+0x118>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d00b      	beq.n	800b07c <TIM_Base_SetConfig+0x40>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a3c      	ldr	r2, [pc, #240]	; (800b158 <TIM_Base_SetConfig+0x11c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d007      	beq.n	800b07c <TIM_Base_SetConfig+0x40>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a3b      	ldr	r2, [pc, #236]	; (800b15c <TIM_Base_SetConfig+0x120>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d003      	beq.n	800b07c <TIM_Base_SetConfig+0x40>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a3a      	ldr	r2, [pc, #232]	; (800b160 <TIM_Base_SetConfig+0x124>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d108      	bne.n	800b08e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2f      	ldr	r2, [pc, #188]	; (800b150 <TIM_Base_SetConfig+0x114>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d02b      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b09c:	d027      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a2c      	ldr	r2, [pc, #176]	; (800b154 <TIM_Base_SetConfig+0x118>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d023      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a2b      	ldr	r2, [pc, #172]	; (800b158 <TIM_Base_SetConfig+0x11c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d01f      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a2a      	ldr	r2, [pc, #168]	; (800b15c <TIM_Base_SetConfig+0x120>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d01b      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a29      	ldr	r2, [pc, #164]	; (800b160 <TIM_Base_SetConfig+0x124>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d017      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a28      	ldr	r2, [pc, #160]	; (800b164 <TIM_Base_SetConfig+0x128>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d013      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a27      	ldr	r2, [pc, #156]	; (800b168 <TIM_Base_SetConfig+0x12c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00f      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a26      	ldr	r2, [pc, #152]	; (800b16c <TIM_Base_SetConfig+0x130>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00b      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a25      	ldr	r2, [pc, #148]	; (800b170 <TIM_Base_SetConfig+0x134>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d007      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a24      	ldr	r2, [pc, #144]	; (800b174 <TIM_Base_SetConfig+0x138>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d003      	beq.n	800b0ee <TIM_Base_SetConfig+0xb2>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a23      	ldr	r2, [pc, #140]	; (800b178 <TIM_Base_SetConfig+0x13c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d108      	bne.n	800b100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	689a      	ldr	r2, [r3, #8]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a0a      	ldr	r2, [pc, #40]	; (800b150 <TIM_Base_SetConfig+0x114>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d003      	beq.n	800b134 <TIM_Base_SetConfig+0xf8>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a0c      	ldr	r2, [pc, #48]	; (800b160 <TIM_Base_SetConfig+0x124>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d103      	bne.n	800b13c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	615a      	str	r2, [r3, #20]
}
 800b142:	bf00      	nop
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	40010000 	.word	0x40010000
 800b154:	40000400 	.word	0x40000400
 800b158:	40000800 	.word	0x40000800
 800b15c:	40000c00 	.word	0x40000c00
 800b160:	40010400 	.word	0x40010400
 800b164:	40014000 	.word	0x40014000
 800b168:	40014400 	.word	0x40014400
 800b16c:	40014800 	.word	0x40014800
 800b170:	40001800 	.word	0x40001800
 800b174:	40001c00 	.word	0x40001c00
 800b178:	40002000 	.word	0x40002000

0800b17c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	f023 0201 	bic.w	r2, r3, #1
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f023 030a 	bic.w	r3, r3, #10
 800b1b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	621a      	str	r2, [r3, #32]
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b087      	sub	sp, #28
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	f023 0210 	bic.w	r2, r3, #16
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	031b      	lsls	r3, r3, #12
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4313      	orrs	r3, r2
 800b220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b085      	sub	sp, #20
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4313      	orrs	r3, r2
 800b258:	f043 0307 	orr.w	r3, r3, #7
 800b25c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	609a      	str	r2, [r3, #8]
}
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b28a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	021a      	lsls	r2, r3, #8
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	431a      	orrs	r2, r3
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	4313      	orrs	r3, r2
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	609a      	str	r2, [r3, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	371c      	adds	r7, #28
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d101      	bne.n	800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	e06d      	b.n	800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a30      	ldr	r2, [pc, #192]	; (800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d004      	beq.n	800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a2f      	ldr	r2, [pc, #188]	; (800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d108      	bne.n	800b30e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a20      	ldr	r2, [pc, #128]	; (800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d022      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33a:	d01d      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1d      	ldr	r2, [pc, #116]	; (800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d018      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a1c      	ldr	r2, [pc, #112]	; (800b3bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d013      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a1a      	ldr	r2, [pc, #104]	; (800b3c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00e      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a15      	ldr	r2, [pc, #84]	; (800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d009      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d004      	beq.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d10c      	bne.n	800b392 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b37e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	4313      	orrs	r3, r2
 800b388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	40010000 	.word	0x40010000
 800b3b4:	40010400 	.word	0x40010400
 800b3b8:	40000400 	.word	0x40000400
 800b3bc:	40000800 	.word	0x40000800
 800b3c0:	40000c00 	.word	0x40000c00
 800b3c4:	40014000 	.word	0x40014000
 800b3c8:	40001800 	.word	0x40001800

0800b3cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e040      	b.n	800b49c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7f9 ff70 	bl	8005310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2224      	movs	r2, #36	; 0x24
 800b434:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f022 0201 	bic.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fb64 	bl	800bb14 <UART_SetConfig>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e022      	b.n	800b49c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fdbc 	bl	800bfdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fe43 	bl	800c120 <UART_CheckIdleState>
 800b49a:	4603      	mov	r3, r0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b6:	2b20      	cmp	r3, #32
 800b4b8:	d13d      	bne.n	800b536 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <HAL_UART_Receive_IT+0x22>
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e036      	b.n	800b538 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_UART_Receive_IT+0x34>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e02f      	b.n	800b538 <HAL_UART_Receive_IT+0x94>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d018      	beq.n	800b526 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	613b      	str	r3, [r7, #16]
   return(result);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	623b      	str	r3, [r7, #32]
 800b514:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	69f9      	ldr	r1, [r7, #28]
 800b518:	6a3a      	ldr	r2, [r7, #32]
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1e6      	bne.n	800b4f4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	461a      	mov	r2, r3
 800b52a:	68b9      	ldr	r1, [r7, #8]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 feef 	bl	800c310 <UART_Start_Receive_IT>
 800b532:	4603      	mov	r3, r0
 800b534:	e000      	b.n	800b538 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b536:	2302      	movs	r3, #2
  }
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3728      	adds	r7, #40	; 0x28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b0ba      	sub	sp, #232	; 0xe8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b56a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b56e:	4013      	ands	r3, r2
 800b570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d115      	bne.n	800b5a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00f      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	2b00      	cmp	r3, #0
 800b592:	d009      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 828f 	beq.w	800babc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	4798      	blx	r3
      }
      return;
 800b5a6:	e289      	b.n	800babc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8117 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b5be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5c2:	4b85      	ldr	r3, [pc, #532]	; (800b7d8 <HAL_UART_IRQHandler+0x298>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 810a 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d011      	beq.n	800b5fc <HAL_UART_IRQHandler+0xbc>
 800b5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f2:	f043 0201 	orr.w	r2, r3, #1
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d011      	beq.n	800b62c <HAL_UART_IRQHandler+0xec>
 800b608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00b      	beq.n	800b62c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2202      	movs	r2, #2
 800b61a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b622:	f043 0204 	orr.w	r2, r3, #4
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b630:	f003 0304 	and.w	r3, r3, #4
 800b634:	2b00      	cmp	r3, #0
 800b636:	d011      	beq.n	800b65c <HAL_UART_IRQHandler+0x11c>
 800b638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2204      	movs	r2, #4
 800b64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b652:	f043 0202 	orr.w	r2, r3, #2
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d017      	beq.n	800b698 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66c:	f003 0320 	and.w	r3, r3, #32
 800b670:	2b00      	cmp	r3, #0
 800b672:	d105      	bne.n	800b680 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b678:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00b      	beq.n	800b698 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2208      	movs	r2, #8
 800b686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b68e:	f043 0208 	orr.w	r2, r3, #8
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b69c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d012      	beq.n	800b6ca <HAL_UART_IRQHandler+0x18a>
 800b6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00c      	beq.n	800b6ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c0:	f043 0220 	orr.w	r2, r3, #32
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 81f5 	beq.w	800bac0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6da:	f003 0320 	and.w	r3, r3, #32
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00d      	beq.n	800b6fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b712:	2b40      	cmp	r3, #64	; 0x40
 800b714:	d005      	beq.n	800b722 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b71a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d04f      	beq.n	800b7c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 febe 	bl	800c4a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b732:	2b40      	cmp	r3, #64	; 0x40
 800b734:	d141      	bne.n	800b7ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b744:	e853 3f00 	ldrex	r3, [r3]
 800b748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b74c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b76e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b77a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1d9      	bne.n	800b736 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	2b00      	cmp	r3, #0
 800b788:	d013      	beq.n	800b7b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b78e:	4a13      	ldr	r2, [pc, #76]	; (800b7dc <HAL_UART_IRQHandler+0x29c>)
 800b790:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b796:	4618      	mov	r0, r3
 800b798:	f7fb f956 	bl	8006a48 <HAL_DMA_Abort_IT>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d017      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b0:	e00f      	b.n	800b7d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f998 	bl	800bae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b8:	e00b      	b.n	800b7d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f994 	bl	800bae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c0:	e007      	b.n	800b7d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f990 	bl	800bae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b7d0:	e176      	b.n	800bac0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d2:	bf00      	nop
    return;
 800b7d4:	e174      	b.n	800bac0 <HAL_UART_IRQHandler+0x580>
 800b7d6:	bf00      	nop
 800b7d8:	04000120 	.word	0x04000120
 800b7dc:	0800c56b 	.word	0x0800c56b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	f040 8144 	bne.w	800ba72 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ee:	f003 0310 	and.w	r3, r3, #16
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 813d 	beq.w	800ba72 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 8136 	beq.w	800ba72 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2210      	movs	r2, #16
 800b80c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b818:	2b40      	cmp	r3, #64	; 0x40
 800b81a:	f040 80b2 	bne.w	800b982 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b82a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 8148 	beq.w	800bac4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b83a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b83e:	429a      	cmp	r2, r3
 800b840:	f080 8140 	bcs.w	800bac4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b84a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b858:	f000 8085 	beq.w	800b966 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	461a      	mov	r2, r3
 800b882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b88a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1da      	bne.n	800b85c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8b8:	f023 0301 	bic.w	r3, r3, #1
 800b8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e1      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3308      	adds	r3, #8
 800b902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b906:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b90c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e3      	bne.n	800b8e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b936:	f023 0310 	bic.w	r3, r3, #16
 800b93a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b948:	65bb      	str	r3, [r7, #88]	; 0x58
 800b94a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b94e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b950:	e841 2300 	strex	r3, r2, [r1]
 800b954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1e4      	bne.n	800b926 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b960:	4618      	mov	r0, r3
 800b962:	f7fb f801 	bl	8006968 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b972:	b29b      	uxth	r3, r3
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	b29b      	uxth	r3, r3
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f8be 	bl	800bafc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b980:	e0a0      	b.n	800bac4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b98e:	b29b      	uxth	r3, r3
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8092 	beq.w	800bac8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800b9a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 808d 	beq.w	800bac8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9d8:	e841 2300 	strex	r3, r2, [r1]
 800b9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e4      	bne.n	800b9ae <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	e853 3f00 	ldrex	r3, [r3]
 800b9f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3308      	adds	r3, #8
 800ba04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba08:	633a      	str	r2, [r7, #48]	; 0x30
 800ba0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba10:	e841 2300 	strex	r3, r2, [r1]
 800ba14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1e3      	bne.n	800b9e4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2220      	movs	r2, #32
 800ba20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f023 0310 	bic.w	r3, r3, #16
 800ba42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba50:	61fb      	str	r3, [r7, #28]
 800ba52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	69b9      	ldr	r1, [r7, #24]
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e4      	bne.n	800ba2e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f846 	bl	800bafc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba70:	e02a      	b.n	800bac8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00e      	beq.n	800ba9c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ba7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01c      	beq.n	800bacc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
    }
    return;
 800ba9a:	e017      	b.n	800bacc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d012      	beq.n	800bace <HAL_UART_IRQHandler+0x58e>
 800baa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00c      	beq.n	800bace <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fd6e 	bl	800c596 <UART_EndTransmit_IT>
    return;
 800baba:	e008      	b.n	800bace <HAL_UART_IRQHandler+0x58e>
      return;
 800babc:	bf00      	nop
 800babe:	e006      	b.n	800bace <HAL_UART_IRQHandler+0x58e>
    return;
 800bac0:	bf00      	nop
 800bac2:	e004      	b.n	800bace <HAL_UART_IRQHandler+0x58e>
      return;
 800bac4:	bf00      	nop
 800bac6:	e002      	b.n	800bace <HAL_UART_IRQHandler+0x58e>
      return;
 800bac8:	bf00      	nop
 800baca:	e000      	b.n	800bace <HAL_UART_IRQHandler+0x58e>
    return;
 800bacc:	bf00      	nop
  }

}
 800bace:	37e8      	adds	r7, #232	; 0xe8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	4ba6      	ldr	r3, [pc, #664]	; (800bdd8 <UART_SetConfig+0x2c4>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	6979      	ldr	r1, [r7, #20]
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a94      	ldr	r2, [pc, #592]	; (800bddc <UART_SetConfig+0x2c8>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d120      	bne.n	800bbd2 <UART_SetConfig+0xbe>
 800bb90:	4b93      	ldr	r3, [pc, #588]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb96:	f003 0303 	and.w	r3, r3, #3
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d816      	bhi.n	800bbcc <UART_SetConfig+0xb8>
 800bb9e:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <UART_SetConfig+0x90>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbbb 	.word	0x0800bbbb
 800bbb0:	0800bbc7 	.word	0x0800bbc7
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e150      	b.n	800be5c <UART_SetConfig+0x348>
 800bbba:	2302      	movs	r3, #2
 800bbbc:	77fb      	strb	r3, [r7, #31]
 800bbbe:	e14d      	b.n	800be5c <UART_SetConfig+0x348>
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	77fb      	strb	r3, [r7, #31]
 800bbc4:	e14a      	b.n	800be5c <UART_SetConfig+0x348>
 800bbc6:	2308      	movs	r3, #8
 800bbc8:	77fb      	strb	r3, [r7, #31]
 800bbca:	e147      	b.n	800be5c <UART_SetConfig+0x348>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	77fb      	strb	r3, [r7, #31]
 800bbd0:	e144      	b.n	800be5c <UART_SetConfig+0x348>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a83      	ldr	r2, [pc, #524]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d132      	bne.n	800bc42 <UART_SetConfig+0x12e>
 800bbdc:	4b80      	ldr	r3, [pc, #512]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe2:	f003 030c 	and.w	r3, r3, #12
 800bbe6:	2b0c      	cmp	r3, #12
 800bbe8:	d828      	bhi.n	800bc3c <UART_SetConfig+0x128>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0xdc>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc25 	.word	0x0800bc25
 800bbf4:	0800bc3d 	.word	0x0800bc3d
 800bbf8:	0800bc3d 	.word	0x0800bc3d
 800bbfc:	0800bc3d 	.word	0x0800bc3d
 800bc00:	0800bc31 	.word	0x0800bc31
 800bc04:	0800bc3d 	.word	0x0800bc3d
 800bc08:	0800bc3d 	.word	0x0800bc3d
 800bc0c:	0800bc3d 	.word	0x0800bc3d
 800bc10:	0800bc2b 	.word	0x0800bc2b
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc3d 	.word	0x0800bc3d
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc37 	.word	0x0800bc37
 800bc24:	2300      	movs	r3, #0
 800bc26:	77fb      	strb	r3, [r7, #31]
 800bc28:	e118      	b.n	800be5c <UART_SetConfig+0x348>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	77fb      	strb	r3, [r7, #31]
 800bc2e:	e115      	b.n	800be5c <UART_SetConfig+0x348>
 800bc30:	2304      	movs	r3, #4
 800bc32:	77fb      	strb	r3, [r7, #31]
 800bc34:	e112      	b.n	800be5c <UART_SetConfig+0x348>
 800bc36:	2308      	movs	r3, #8
 800bc38:	77fb      	strb	r3, [r7, #31]
 800bc3a:	e10f      	b.n	800be5c <UART_SetConfig+0x348>
 800bc3c:	2310      	movs	r3, #16
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e10c      	b.n	800be5c <UART_SetConfig+0x348>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a68      	ldr	r2, [pc, #416]	; (800bde8 <UART_SetConfig+0x2d4>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d120      	bne.n	800bc8e <UART_SetConfig+0x17a>
 800bc4c:	4b64      	ldr	r3, [pc, #400]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bc4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc56:	2b30      	cmp	r3, #48	; 0x30
 800bc58:	d013      	beq.n	800bc82 <UART_SetConfig+0x16e>
 800bc5a:	2b30      	cmp	r3, #48	; 0x30
 800bc5c:	d814      	bhi.n	800bc88 <UART_SetConfig+0x174>
 800bc5e:	2b20      	cmp	r3, #32
 800bc60:	d009      	beq.n	800bc76 <UART_SetConfig+0x162>
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d810      	bhi.n	800bc88 <UART_SetConfig+0x174>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <UART_SetConfig+0x15c>
 800bc6a:	2b10      	cmp	r3, #16
 800bc6c:	d006      	beq.n	800bc7c <UART_SetConfig+0x168>
 800bc6e:	e00b      	b.n	800bc88 <UART_SetConfig+0x174>
 800bc70:	2300      	movs	r3, #0
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e0f2      	b.n	800be5c <UART_SetConfig+0x348>
 800bc76:	2302      	movs	r3, #2
 800bc78:	77fb      	strb	r3, [r7, #31]
 800bc7a:	e0ef      	b.n	800be5c <UART_SetConfig+0x348>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	77fb      	strb	r3, [r7, #31]
 800bc80:	e0ec      	b.n	800be5c <UART_SetConfig+0x348>
 800bc82:	2308      	movs	r3, #8
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e0e9      	b.n	800be5c <UART_SetConfig+0x348>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	77fb      	strb	r3, [r7, #31]
 800bc8c:	e0e6      	b.n	800be5c <UART_SetConfig+0x348>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a56      	ldr	r2, [pc, #344]	; (800bdec <UART_SetConfig+0x2d8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d120      	bne.n	800bcda <UART_SetConfig+0x1c6>
 800bc98:	4b51      	ldr	r3, [pc, #324]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bca2:	2bc0      	cmp	r3, #192	; 0xc0
 800bca4:	d013      	beq.n	800bcce <UART_SetConfig+0x1ba>
 800bca6:	2bc0      	cmp	r3, #192	; 0xc0
 800bca8:	d814      	bhi.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcaa:	2b80      	cmp	r3, #128	; 0x80
 800bcac:	d009      	beq.n	800bcc2 <UART_SetConfig+0x1ae>
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	d810      	bhi.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <UART_SetConfig+0x1a8>
 800bcb6:	2b40      	cmp	r3, #64	; 0x40
 800bcb8:	d006      	beq.n	800bcc8 <UART_SetConfig+0x1b4>
 800bcba:	e00b      	b.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e0cc      	b.n	800be5c <UART_SetConfig+0x348>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	77fb      	strb	r3, [r7, #31]
 800bcc6:	e0c9      	b.n	800be5c <UART_SetConfig+0x348>
 800bcc8:	2304      	movs	r3, #4
 800bcca:	77fb      	strb	r3, [r7, #31]
 800bccc:	e0c6      	b.n	800be5c <UART_SetConfig+0x348>
 800bcce:	2308      	movs	r3, #8
 800bcd0:	77fb      	strb	r3, [r7, #31]
 800bcd2:	e0c3      	b.n	800be5c <UART_SetConfig+0x348>
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	77fb      	strb	r3, [r7, #31]
 800bcd8:	e0c0      	b.n	800be5c <UART_SetConfig+0x348>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a44      	ldr	r2, [pc, #272]	; (800bdf0 <UART_SetConfig+0x2dc>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d125      	bne.n	800bd30 <UART_SetConfig+0x21c>
 800bce4:	4b3e      	ldr	r3, [pc, #248]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf2:	d017      	beq.n	800bd24 <UART_SetConfig+0x210>
 800bcf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf8:	d817      	bhi.n	800bd2a <UART_SetConfig+0x216>
 800bcfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcfe:	d00b      	beq.n	800bd18 <UART_SetConfig+0x204>
 800bd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd04:	d811      	bhi.n	800bd2a <UART_SetConfig+0x216>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <UART_SetConfig+0x1fe>
 800bd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0e:	d006      	beq.n	800bd1e <UART_SetConfig+0x20a>
 800bd10:	e00b      	b.n	800bd2a <UART_SetConfig+0x216>
 800bd12:	2300      	movs	r3, #0
 800bd14:	77fb      	strb	r3, [r7, #31]
 800bd16:	e0a1      	b.n	800be5c <UART_SetConfig+0x348>
 800bd18:	2302      	movs	r3, #2
 800bd1a:	77fb      	strb	r3, [r7, #31]
 800bd1c:	e09e      	b.n	800be5c <UART_SetConfig+0x348>
 800bd1e:	2304      	movs	r3, #4
 800bd20:	77fb      	strb	r3, [r7, #31]
 800bd22:	e09b      	b.n	800be5c <UART_SetConfig+0x348>
 800bd24:	2308      	movs	r3, #8
 800bd26:	77fb      	strb	r3, [r7, #31]
 800bd28:	e098      	b.n	800be5c <UART_SetConfig+0x348>
 800bd2a:	2310      	movs	r3, #16
 800bd2c:	77fb      	strb	r3, [r7, #31]
 800bd2e:	e095      	b.n	800be5c <UART_SetConfig+0x348>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a2f      	ldr	r2, [pc, #188]	; (800bdf4 <UART_SetConfig+0x2e0>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d125      	bne.n	800bd86 <UART_SetConfig+0x272>
 800bd3a:	4b29      	ldr	r3, [pc, #164]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd48:	d017      	beq.n	800bd7a <UART_SetConfig+0x266>
 800bd4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd4e:	d817      	bhi.n	800bd80 <UART_SetConfig+0x26c>
 800bd50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd54:	d00b      	beq.n	800bd6e <UART_SetConfig+0x25a>
 800bd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5a:	d811      	bhi.n	800bd80 <UART_SetConfig+0x26c>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <UART_SetConfig+0x254>
 800bd60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd64:	d006      	beq.n	800bd74 <UART_SetConfig+0x260>
 800bd66:	e00b      	b.n	800bd80 <UART_SetConfig+0x26c>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e076      	b.n	800be5c <UART_SetConfig+0x348>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e073      	b.n	800be5c <UART_SetConfig+0x348>
 800bd74:	2304      	movs	r3, #4
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e070      	b.n	800be5c <UART_SetConfig+0x348>
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e06d      	b.n	800be5c <UART_SetConfig+0x348>
 800bd80:	2310      	movs	r3, #16
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e06a      	b.n	800be5c <UART_SetConfig+0x348>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a1b      	ldr	r2, [pc, #108]	; (800bdf8 <UART_SetConfig+0x2e4>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d138      	bne.n	800be02 <UART_SetConfig+0x2ee>
 800bd90:	4b13      	ldr	r3, [pc, #76]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bd9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd9e:	d017      	beq.n	800bdd0 <UART_SetConfig+0x2bc>
 800bda0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bda4:	d82a      	bhi.n	800bdfc <UART_SetConfig+0x2e8>
 800bda6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdaa:	d00b      	beq.n	800bdc4 <UART_SetConfig+0x2b0>
 800bdac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdb0:	d824      	bhi.n	800bdfc <UART_SetConfig+0x2e8>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <UART_SetConfig+0x2aa>
 800bdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdba:	d006      	beq.n	800bdca <UART_SetConfig+0x2b6>
 800bdbc:	e01e      	b.n	800bdfc <UART_SetConfig+0x2e8>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e04b      	b.n	800be5c <UART_SetConfig+0x348>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e048      	b.n	800be5c <UART_SetConfig+0x348>
 800bdca:	2304      	movs	r3, #4
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e045      	b.n	800be5c <UART_SetConfig+0x348>
 800bdd0:	2308      	movs	r3, #8
 800bdd2:	77fb      	strb	r3, [r7, #31]
 800bdd4:	e042      	b.n	800be5c <UART_SetConfig+0x348>
 800bdd6:	bf00      	nop
 800bdd8:	efff69f3 	.word	0xefff69f3
 800bddc:	40011000 	.word	0x40011000
 800bde0:	40023800 	.word	0x40023800
 800bde4:	40004400 	.word	0x40004400
 800bde8:	40004800 	.word	0x40004800
 800bdec:	40004c00 	.word	0x40004c00
 800bdf0:	40005000 	.word	0x40005000
 800bdf4:	40011400 	.word	0x40011400
 800bdf8:	40007800 	.word	0x40007800
 800bdfc:	2310      	movs	r3, #16
 800bdfe:	77fb      	strb	r3, [r7, #31]
 800be00:	e02c      	b.n	800be5c <UART_SetConfig+0x348>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a72      	ldr	r2, [pc, #456]	; (800bfd0 <UART_SetConfig+0x4bc>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d125      	bne.n	800be58 <UART_SetConfig+0x344>
 800be0c:	4b71      	ldr	r3, [pc, #452]	; (800bfd4 <UART_SetConfig+0x4c0>)
 800be0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be1a:	d017      	beq.n	800be4c <UART_SetConfig+0x338>
 800be1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be20:	d817      	bhi.n	800be52 <UART_SetConfig+0x33e>
 800be22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be26:	d00b      	beq.n	800be40 <UART_SetConfig+0x32c>
 800be28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2c:	d811      	bhi.n	800be52 <UART_SetConfig+0x33e>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <UART_SetConfig+0x326>
 800be32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be36:	d006      	beq.n	800be46 <UART_SetConfig+0x332>
 800be38:	e00b      	b.n	800be52 <UART_SetConfig+0x33e>
 800be3a:	2300      	movs	r3, #0
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e00d      	b.n	800be5c <UART_SetConfig+0x348>
 800be40:	2302      	movs	r3, #2
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e00a      	b.n	800be5c <UART_SetConfig+0x348>
 800be46:	2304      	movs	r3, #4
 800be48:	77fb      	strb	r3, [r7, #31]
 800be4a:	e007      	b.n	800be5c <UART_SetConfig+0x348>
 800be4c:	2308      	movs	r3, #8
 800be4e:	77fb      	strb	r3, [r7, #31]
 800be50:	e004      	b.n	800be5c <UART_SetConfig+0x348>
 800be52:	2310      	movs	r3, #16
 800be54:	77fb      	strb	r3, [r7, #31]
 800be56:	e001      	b.n	800be5c <UART_SetConfig+0x348>
 800be58:	2310      	movs	r3, #16
 800be5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be64:	d15b      	bne.n	800bf1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800be66:	7ffb      	ldrb	r3, [r7, #31]
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d828      	bhi.n	800bebe <UART_SetConfig+0x3aa>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <UART_SetConfig+0x360>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	0800bebf 	.word	0x0800bebf
 800be84:	0800beaf 	.word	0x0800beaf
 800be88:	0800bebf 	.word	0x0800bebf
 800be8c:	0800bebf 	.word	0x0800bebf
 800be90:	0800bebf 	.word	0x0800bebf
 800be94:	0800beb7 	.word	0x0800beb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be98:	f7fd fba4 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800be9c:	61b8      	str	r0, [r7, #24]
        break;
 800be9e:	e013      	b.n	800bec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bea0:	f7fd fbb4 	bl	800960c <HAL_RCC_GetPCLK2Freq>
 800bea4:	61b8      	str	r0, [r7, #24]
        break;
 800bea6:	e00f      	b.n	800bec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bea8:	4b4b      	ldr	r3, [pc, #300]	; (800bfd8 <UART_SetConfig+0x4c4>)
 800beaa:	61bb      	str	r3, [r7, #24]
        break;
 800beac:	e00c      	b.n	800bec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beae:	f7fd fac7 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 800beb2:	61b8      	str	r0, [r7, #24]
        break;
 800beb4:	e008      	b.n	800bec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beba:	61bb      	str	r3, [r7, #24]
        break;
 800bebc:	e004      	b.n	800bec8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	77bb      	strb	r3, [r7, #30]
        break;
 800bec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d074      	beq.n	800bfb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	005a      	lsls	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	441a      	add	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b0f      	cmp	r3, #15
 800bee8:	d916      	bls.n	800bf18 <UART_SetConfig+0x404>
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef0:	d212      	bcs.n	800bf18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f023 030f 	bic.w	r3, r3, #15
 800befa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	89fb      	ldrh	r3, [r7, #14]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	89fa      	ldrh	r2, [r7, #14]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	e04f      	b.n	800bfb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	77bb      	strb	r3, [r7, #30]
 800bf1c:	e04c      	b.n	800bfb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf1e:	7ffb      	ldrb	r3, [r7, #31]
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d828      	bhi.n	800bf76 <UART_SetConfig+0x462>
 800bf24:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <UART_SetConfig+0x418>)
 800bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2a:	bf00      	nop
 800bf2c:	0800bf51 	.word	0x0800bf51
 800bf30:	0800bf59 	.word	0x0800bf59
 800bf34:	0800bf61 	.word	0x0800bf61
 800bf38:	0800bf77 	.word	0x0800bf77
 800bf3c:	0800bf67 	.word	0x0800bf67
 800bf40:	0800bf77 	.word	0x0800bf77
 800bf44:	0800bf77 	.word	0x0800bf77
 800bf48:	0800bf77 	.word	0x0800bf77
 800bf4c:	0800bf6f 	.word	0x0800bf6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf50:	f7fd fb48 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800bf54:	61b8      	str	r0, [r7, #24]
        break;
 800bf56:	e013      	b.n	800bf80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf58:	f7fd fb58 	bl	800960c <HAL_RCC_GetPCLK2Freq>
 800bf5c:	61b8      	str	r0, [r7, #24]
        break;
 800bf5e:	e00f      	b.n	800bf80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf60:	4b1d      	ldr	r3, [pc, #116]	; (800bfd8 <UART_SetConfig+0x4c4>)
 800bf62:	61bb      	str	r3, [r7, #24]
        break;
 800bf64:	e00c      	b.n	800bf80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf66:	f7fd fa6b 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 800bf6a:	61b8      	str	r0, [r7, #24]
        break;
 800bf6c:	e008      	b.n	800bf80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf72:	61bb      	str	r3, [r7, #24]
        break;
 800bf74:	e004      	b.n	800bf80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	77bb      	strb	r3, [r7, #30]
        break;
 800bf7e:	bf00      	nop
    }

    if (pclk != 0U)
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	085a      	lsrs	r2, r3, #1
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	441a      	add	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b0f      	cmp	r3, #15
 800bf9e:	d909      	bls.n	800bfb4 <UART_SetConfig+0x4a0>
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa6:	d205      	bcs.n	800bfb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60da      	str	r2, [r3, #12]
 800bfb2:	e001      	b.n	800bfb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bfc4:	7fbb      	ldrb	r3, [r7, #30]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	40007c00 	.word	0x40007c00
 800bfd4:	40023800 	.word	0x40023800
 800bfd8:	00f42400 	.word	0x00f42400

0800bfdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00a      	beq.n	800c006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00a      	beq.n	800c04a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	f003 0308 	and.w	r3, r3, #8
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	430a      	orrs	r2, r1
 800c08c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01a      	beq.n	800c0f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0da:	d10a      	bne.n	800c0f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00a      	beq.n	800c114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	430a      	orrs	r2, r1
 800c112:	605a      	str	r2, [r3, #4]
  }
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af02      	add	r7, sp, #8
 800c126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c130:	f7f9 fbea 	bl	8005908 <HAL_GetTick>
 800c134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0308 	and.w	r3, r3, #8
 800c140:	2b08      	cmp	r3, #8
 800c142:	d10e      	bne.n	800c162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f817 	bl	800c186 <UART_WaitOnFlagUntilTimeout>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e00d      	b.n	800c17e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b09c      	sub	sp, #112	; 0x70
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	603b      	str	r3, [r7, #0]
 800c192:	4613      	mov	r3, r2
 800c194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c196:	e0a5      	b.n	800c2e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	f000 80a1 	beq.w	800c2e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1a2:	f7f9 fbb1 	bl	8005908 <HAL_GetTick>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d302      	bcc.n	800c1b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c1b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d13e      	bne.n	800c236 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e6      	bne.n	800c1b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	f023 0301 	bic.w	r3, r3, #1
 800c200:	663b      	str	r3, [r7, #96]	; 0x60
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c20a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c20c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e5      	bne.n	800c1ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2220      	movs	r2, #32
 800c222:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2220      	movs	r2, #32
 800c228:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e067      	b.n	800c306 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d04f      	beq.n	800c2e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c24e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c252:	d147      	bne.n	800c2e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c25c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c272:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	461a      	mov	r2, r3
 800c27a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c27c:	637b      	str	r3, [r7, #52]	; 0x34
 800c27e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e6      	bne.n	800c25e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3308      	adds	r3, #8
 800c296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	e853 3f00 	ldrex	r3, [r3]
 800c29e:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	f023 0301 	bic.w	r3, r3, #1
 800c2a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2b0:	623a      	str	r2, [r7, #32]
 800c2b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	69f9      	ldr	r1, [r7, #28]
 800c2b6:	6a3a      	ldr	r2, [r7, #32]
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e5      	bne.n	800c290 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2220      	movs	r2, #32
 800c2d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e010      	b.n	800c306 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	69da      	ldr	r2, [r3, #28]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	bf0c      	ite	eq
 800c2f4:	2301      	moveq	r3, #1
 800c2f6:	2300      	movne	r3, #0
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	f43f af4a 	beq.w	800c198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3770      	adds	r7, #112	; 0x70
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c310:	b480      	push	{r7}
 800c312:	b097      	sub	sp, #92	; 0x5c
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	88fa      	ldrh	r2, [r7, #6]
 800c328:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	88fa      	ldrh	r2, [r7, #6]
 800c330:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c342:	d10e      	bne.n	800c362 <UART_Start_Receive_IT+0x52>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d105      	bne.n	800c358 <UART_Start_Receive_IT+0x48>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c352:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c356:	e02d      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	22ff      	movs	r2, #255	; 0xff
 800c35c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c360:	e028      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10d      	bne.n	800c386 <UART_Start_Receive_IT+0x76>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d104      	bne.n	800c37c <UART_Start_Receive_IT+0x6c>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	22ff      	movs	r2, #255	; 0xff
 800c376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c37a:	e01b      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	227f      	movs	r2, #127	; 0x7f
 800c380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c384:	e016      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c38e:	d10d      	bne.n	800c3ac <UART_Start_Receive_IT+0x9c>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d104      	bne.n	800c3a2 <UART_Start_Receive_IT+0x92>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	227f      	movs	r2, #127	; 0x7f
 800c39c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3a0:	e008      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	223f      	movs	r2, #63	; 0x3f
 800c3a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3aa:	e003      	b.n	800c3b4 <UART_Start_Receive_IT+0xa4>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2222      	movs	r2, #34	; 0x22
 800c3c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	f043 0301 	orr.w	r3, r3, #1
 800c3d8:	657b      	str	r3, [r7, #84]	; 0x54
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c3e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e5      	bne.n	800c3c2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3fe:	d107      	bne.n	800c410 <UART_Start_Receive_IT+0x100>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4a24      	ldr	r2, [pc, #144]	; (800c49c <UART_Start_Receive_IT+0x18c>)
 800c40c:	665a      	str	r2, [r3, #100]	; 0x64
 800c40e:	e002      	b.n	800c416 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4a23      	ldr	r2, [pc, #140]	; (800c4a0 <UART_Start_Receive_IT+0x190>)
 800c414:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d019      	beq.n	800c45a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	461a      	mov	r2, r3
 800c442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c444:	637b      	str	r3, [r7, #52]	; 0x34
 800c446:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c44a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e6      	bne.n	800c426 <UART_Start_Receive_IT+0x116>
 800c458:	e018      	b.n	800c48c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	613b      	str	r3, [r7, #16]
   return(result);
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f043 0320 	orr.w	r3, r3, #32
 800c46e:	653b      	str	r3, [r7, #80]	; 0x50
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c478:	623b      	str	r3, [r7, #32]
 800c47a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	69f9      	ldr	r1, [r7, #28]
 800c47e:	6a3a      	ldr	r2, [r7, #32]
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	61bb      	str	r3, [r7, #24]
   return(result);
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e6      	bne.n	800c45a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	375c      	adds	r7, #92	; 0x5c
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	0800c747 	.word	0x0800c747
 800c4a0:	0800c5eb 	.word	0x0800c5eb

0800c4a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b095      	sub	sp, #84	; 0x54
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c4cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e6      	bne.n	800c4ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e5      	bne.n	800c4de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c516:	2b01      	cmp	r3, #1
 800c518:	d118      	bne.n	800c54c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	60bb      	str	r3, [r7, #8]
   return(result);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f023 0310 	bic.w	r3, r3, #16
 800c52e:	647b      	str	r3, [r7, #68]	; 0x44
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c538:	61bb      	str	r3, [r7, #24]
 800c53a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6979      	ldr	r1, [r7, #20]
 800c53e:	69ba      	ldr	r2, [r7, #24]
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	613b      	str	r3, [r7, #16]
   return(result);
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e6      	bne.n	800c51a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2220      	movs	r2, #32
 800c550:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c55e:	bf00      	nop
 800c560:	3754      	adds	r7, #84	; 0x54
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff faad 	bl	800bae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c58e:	bf00      	nop
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b2:	61fb      	str	r3, [r7, #28]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	61bb      	str	r3, [r7, #24]
 800c5be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e6      	bne.n	800c59e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff fa79 	bl	800bad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e2:	bf00      	nop
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b096      	sub	sp, #88	; 0x58
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c600:	2b22      	cmp	r3, #34	; 0x22
 800c602:	f040 8094 	bne.w	800c72e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c610:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c614:	b2d9      	uxtb	r1, r3
 800c616:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c620:	400a      	ands	r2, r1
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c636:	b29b      	uxth	r3, r3
 800c638:	3b01      	subs	r3, #1
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c648:	b29b      	uxth	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d177      	bne.n	800c73e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	e853 3f00 	ldrex	r3, [r3]
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c662:	653b      	str	r3, [r7, #80]	; 0x50
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	461a      	mov	r2, r3
 800c66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66c:	647b      	str	r3, [r7, #68]	; 0x44
 800c66e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e6      	bne.n	800c64e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3308      	adds	r3, #8
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	623b      	str	r3, [r7, #32]
   return(result);
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	f023 0301 	bic.w	r3, r3, #1
 800c696:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3308      	adds	r3, #8
 800c69e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6a0:	633a      	str	r2, [r7, #48]	; 0x30
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a8:	e841 2300 	strex	r3, r2, [r1]
 800c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e5      	bne.n	800c680 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2220      	movs	r2, #32
 800c6b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d12e      	bne.n	800c726 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f023 0310 	bic.w	r3, r3, #16
 800c6e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	69b9      	ldr	r1, [r7, #24]
 800c6f2:	69fa      	ldr	r2, [r7, #28]
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e6      	bne.n	800c6ce <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	f003 0310 	and.w	r3, r3, #16
 800c70a:	2b10      	cmp	r3, #16
 800c70c:	d103      	bne.n	800c716 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2210      	movs	r2, #16
 800c714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff f9ec 	bl	800bafc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c724:	e00b      	b.n	800c73e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7f5 fca4 	bl	8002074 <HAL_UART_RxCpltCallback>
}
 800c72c:	e007      	b.n	800c73e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f042 0208 	orr.w	r2, r2, #8
 800c73c:	619a      	str	r2, [r3, #24]
}
 800c73e:	bf00      	nop
 800c740:	3758      	adds	r7, #88	; 0x58
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b096      	sub	sp, #88	; 0x58
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c754:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c75c:	2b22      	cmp	r3, #34	; 0x22
 800c75e:	f040 8094 	bne.w	800c88a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c770:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c772:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c776:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c77a:	4013      	ands	r3, r2
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c780:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c786:	1c9a      	adds	r2, r3, #2
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c792:	b29b      	uxth	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d177      	bne.n	800c89a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b2:	e853 3f00 	ldrex	r3, [r3]
 800c7b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c8:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7d0:	e841 2300 	strex	r3, r2, [r1]
 800c7d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e6      	bne.n	800c7aa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	f023 0301 	bic.w	r3, r3, #1
 800c7f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e5      	bne.n	800c7dc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c820:	2b01      	cmp	r3, #1
 800c822:	d12e      	bne.n	800c882 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	e853 3f00 	ldrex	r3, [r3]
 800c836:	60bb      	str	r3, [r7, #8]
   return(result);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f023 0310 	bic.w	r3, r3, #16
 800c83e:	647b      	str	r3, [r7, #68]	; 0x44
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	461a      	mov	r2, r3
 800c846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c848:	61bb      	str	r3, [r7, #24]
 800c84a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6979      	ldr	r1, [r7, #20]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	613b      	str	r3, [r7, #16]
   return(result);
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e6      	bne.n	800c82a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	f003 0310 	and.w	r3, r3, #16
 800c866:	2b10      	cmp	r3, #16
 800c868:	d103      	bne.n	800c872 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2210      	movs	r2, #16
 800c870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff f93e 	bl	800bafc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c880:	e00b      	b.n	800c89a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7f5 fbf6 	bl	8002074 <HAL_UART_RxCpltCallback>
}
 800c888:	e007      	b.n	800c89a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f042 0208 	orr.w	r2, r2, #8
 800c898:	619a      	str	r2, [r3, #24]
}
 800c89a:	bf00      	nop
 800c89c:	3758      	adds	r7, #88	; 0x58
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d121      	bne.n	800c8fa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b27      	ldr	r3, [pc, #156]	; (800c958 <FMC_SDRAM_Init+0xb4>)
 800c8bc:	4013      	ands	r3, r2
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	6851      	ldr	r1, [r2, #4]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	6892      	ldr	r2, [r2, #8]
 800c8c6:	4311      	orrs	r1, r2
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	68d2      	ldr	r2, [r2, #12]
 800c8cc:	4311      	orrs	r1, r2
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	6912      	ldr	r2, [r2, #16]
 800c8d2:	4311      	orrs	r1, r2
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	6952      	ldr	r2, [r2, #20]
 800c8d8:	4311      	orrs	r1, r2
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	6992      	ldr	r2, [r2, #24]
 800c8de:	4311      	orrs	r1, r2
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	69d2      	ldr	r2, [r2, #28]
 800c8e4:	4311      	orrs	r1, r2
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	6a12      	ldr	r2, [r2, #32]
 800c8ea:	4311      	orrs	r1, r2
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c8f0:	430a      	orrs	r2, r1
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	e026      	b.n	800c948 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	69d9      	ldr	r1, [r3, #28]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	4319      	orrs	r1, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c910:	430b      	orrs	r3, r1
 800c912:	431a      	orrs	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	4b0e      	ldr	r3, [pc, #56]	; (800c958 <FMC_SDRAM_Init+0xb4>)
 800c91e:	4013      	ands	r3, r2
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	6851      	ldr	r1, [r2, #4]
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	6892      	ldr	r2, [r2, #8]
 800c928:	4311      	orrs	r1, r2
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	68d2      	ldr	r2, [r2, #12]
 800c92e:	4311      	orrs	r1, r2
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	6912      	ldr	r2, [r2, #16]
 800c934:	4311      	orrs	r1, r2
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	6952      	ldr	r2, [r2, #20]
 800c93a:	4311      	orrs	r1, r2
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	6992      	ldr	r2, [r2, #24]
 800c940:	430a      	orrs	r2, r1
 800c942:	431a      	orrs	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	ffff8000 	.word	0xffff8000

0800c95c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d128      	bne.n	800c9c0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	1e59      	subs	r1, r3, #1
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	3b01      	subs	r3, #1
 800c982:	011b      	lsls	r3, r3, #4
 800c984:	4319      	orrs	r1, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	4319      	orrs	r1, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	3b01      	subs	r3, #1
 800c996:	031b      	lsls	r3, r3, #12
 800c998:	4319      	orrs	r1, r3
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	4319      	orrs	r1, r3
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	051b      	lsls	r3, r3, #20
 800c9ac:	4319      	orrs	r1, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	061b      	lsls	r3, r3, #24
 800c9b6:	430b      	orrs	r3, r1
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	609a      	str	r2, [r3, #8]
 800c9be:	e02d      	b.n	800ca1c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <FMC_SDRAM_Timing_Init+0xd0>)
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	68d2      	ldr	r2, [r2, #12]
 800c9cc:	3a01      	subs	r2, #1
 800c9ce:	0311      	lsls	r1, r2, #12
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	6952      	ldr	r2, [r2, #20]
 800c9d4:	3a01      	subs	r2, #1
 800c9d6:	0512      	lsls	r2, r2, #20
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	1e59      	subs	r1, r3, #1
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	011b      	lsls	r3, r3, #4
 800c9f6:	4319      	orrs	r1, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	4319      	orrs	r1, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	041b      	lsls	r3, r3, #16
 800ca0a:	4319      	orrs	r1, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	430b      	orrs	r3, r1
 800ca16:	431a      	orrs	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	ff0f0fff 	.word	0xff0f0fff

0800ca30 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	691a      	ldr	r2, [r3, #16]
 800ca40:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <FMC_SDRAM_SendCommand+0x44>)
 800ca42:	4013      	ands	r3, r2
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	6811      	ldr	r1, [r2, #0]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	6852      	ldr	r2, [r2, #4]
 800ca4c:	4311      	orrs	r1, r2
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	6892      	ldr	r2, [r2, #8]
 800ca52:	3a01      	subs	r2, #1
 800ca54:	0152      	lsls	r2, r2, #5
 800ca56:	4311      	orrs	r1, r2
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	68d2      	ldr	r2, [r2, #12]
 800ca5c:	0252      	lsls	r2, r2, #9
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	431a      	orrs	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	ffc00000 	.word	0xffc00000

0800ca78 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	695a      	ldr	r2, [r3, #20]
 800ca86:	4b07      	ldr	r3, [pc, #28]	; (800caa4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	0052      	lsls	r2, r2, #1
 800ca8e:	431a      	orrs	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	ffffc001 	.word	0xffffc001

0800caa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caba:	2b84      	cmp	r3, #132	; 0x84
 800cabc:	d005      	beq.n	800caca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cabe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	3303      	adds	r3, #3
 800cac8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800caca:	68fb      	ldr	r3, [r7, #12]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cade:	f3ef 8305 	mrs	r3, IPSR
 800cae2:	607b      	str	r3, [r7, #4]
  return(result);
 800cae4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bf14      	ite	ne
 800caea:	2301      	movne	r3, #1
 800caec:	2300      	moveq	r3, #0
 800caee:	b2db      	uxtb	r3, r3
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cb00:	f001 fc58 	bl	800e3b4 <vTaskStartScheduler>
  
  return osOK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cb0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0c:	b089      	sub	sp, #36	; 0x24
 800cb0e:	af04      	add	r7, sp, #16
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	695b      	ldr	r3, [r3, #20]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d020      	beq.n	800cb5e <osThreadCreate+0x54>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01c      	beq.n	800cb5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685c      	ldr	r4, [r3, #4]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681d      	ldr	r5, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691e      	ldr	r6, [r3, #16]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff ffb6 	bl	800caa8 <makeFreeRtosPriority>
 800cb3c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb46:	9202      	str	r2, [sp, #8]
 800cb48:	9301      	str	r3, [sp, #4]
 800cb4a:	9100      	str	r1, [sp, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4629      	mov	r1, r5
 800cb52:	4620      	mov	r0, r4
 800cb54:	f001 f930 	bl	800ddb8 <xTaskCreateStatic>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	e01c      	b.n	800cb98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685c      	ldr	r4, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb6a:	b29e      	uxth	r6, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff ff98 	bl	800caa8 <makeFreeRtosPriority>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	f107 030c 	add.w	r3, r7, #12
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	9200      	str	r2, [sp, #0]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	4632      	mov	r2, r6
 800cb86:	4629      	mov	r1, r5
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 f978 	bl	800de7e <xTaskCreate>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d001      	beq.n	800cb98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e000      	b.n	800cb9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cb98:	68fb      	ldr	r3, [r7, #12]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cba2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <osDelay+0x16>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	e000      	b.n	800cbba <osDelay+0x18>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f001 fbc4 	bl	800e348 <vTaskDelay>
  
  return osOK;
 800cbc0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	f000 faea 	bl	800d1ba <xQueueCreateMutexStatic>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	e003      	b.n	800cbf2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cbea:	2001      	movs	r0, #1
 800cbec:	f000 facd 	bl	800d18a <xQueueCreateMutex>
 800cbf0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
	...

0800cbfc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cc06:	2300      	movs	r3, #0
 800cc08:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <osMutexWait+0x18>
    return osErrorParameter;
 800cc10:	2380      	movs	r3, #128	; 0x80
 800cc12:	e03a      	b.n	800cc8a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d103      	bne.n	800cc28 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cc20:	f04f 33ff 	mov.w	r3, #4294967295
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	e009      	b.n	800cc3c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d006      	beq.n	800cc3c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <osMutexWait+0x40>
      ticks = 1;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cc3c:	f7ff ff4c 	bl	800cad8 <inHandlerMode>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d017      	beq.n	800cc76 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cc46:	f107 0308 	add.w	r3, r7, #8
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 ff04 	bl	800da5c <xQueueReceiveFromISR>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d001      	beq.n	800cc5e <osMutexWait+0x62>
      return osErrorOS;
 800cc5a:	23ff      	movs	r3, #255	; 0xff
 800cc5c:	e015      	b.n	800cc8a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d011      	beq.n	800cc88 <osMutexWait+0x8c>
 800cc64:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <osMutexWait+0x98>)
 800cc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	e008      	b.n	800cc88 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cc76:	68f9      	ldr	r1, [r7, #12]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fddb 	bl	800d834 <xQueueSemaphoreTake>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d001      	beq.n	800cc88 <osMutexWait+0x8c>
    return osErrorOS;
 800cc84:	23ff      	movs	r3, #255	; 0xff
 800cc86:	e000      	b.n	800cc8a <osMutexWait+0x8e>
  }
  
  return osOK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	e000ed04 	.word	0xe000ed04

0800cc98 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cca8:	f7ff ff16 	bl	800cad8 <inHandlerMode>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d016      	beq.n	800cce0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ccb2:	f107 0308 	add.w	r3, r7, #8
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fc3f 	bl	800d53c <xQueueGiveFromISR>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d001      	beq.n	800ccc8 <osMutexRelease+0x30>
      return osErrorOS;
 800ccc4:	23ff      	movs	r3, #255	; 0xff
 800ccc6:	e017      	b.n	800ccf8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d013      	beq.n	800ccf6 <osMutexRelease+0x5e>
 800ccce:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <osMutexRelease+0x68>)
 800ccd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	e00a      	b.n	800ccf6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cce0:	2300      	movs	r3, #0
 800cce2:	2200      	movs	r2, #0
 800cce4:	2100      	movs	r1, #0
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fa82 	bl	800d1f0 <xQueueGenericSend>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d001      	beq.n	800ccf6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ccf2:	23ff      	movs	r3, #255	; 0xff
 800ccf4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	e000ed04 	.word	0xe000ed04

0800cd04 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d011      	beq.n	800cd3a <osMessageCreate+0x36>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00d      	beq.n	800cd3a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6859      	ldr	r1, [r3, #4]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689a      	ldr	r2, [r3, #8]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	2400      	movs	r4, #0
 800cd30:	9400      	str	r4, [sp, #0]
 800cd32:	f000 f92d 	bl	800cf90 <xQueueGenericCreateStatic>
 800cd36:	4603      	mov	r3, r0
 800cd38:	e008      	b.n	800cd4c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	4619      	mov	r1, r3
 800cd46:	f000 f9a5 	bl	800d094 <xQueueGenericCreate>
 800cd4a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd90      	pop	{r4, r7, pc}

0800cd54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f103 0208 	add.w	r2, r3, #8
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f103 0208 	add.w	r2, r3, #8
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f103 0208 	add.w	r2, r3, #8
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd88:	bf00      	nop
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	601a      	str	r2, [r3, #0]
}
 800cdea:	bf00      	nop
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d103      	bne.n	800ce16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	e00c      	b.n	800ce30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	60fb      	str	r3, [r7, #12]
 800ce1c:	e002      	b.n	800ce24 <vListInsert+0x2e>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d2f6      	bcs.n	800ce1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	601a      	str	r2, [r3, #0]
}
 800ce5c:	bf00      	nop
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	6892      	ldr	r2, [r2, #8]
 800ce7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	6852      	ldr	r2, [r2, #4]
 800ce88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d103      	bne.n	800ce9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689a      	ldr	r2, [r3, #8]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	1e5a      	subs	r2, r3, #1
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10c      	bne.n	800ceea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	b672      	cpsid	i
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	b662      	cpsie	i
 800cee4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ceea:	f002 f9e7 	bl	800f2bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef6:	68f9      	ldr	r1, [r7, #12]
 800cef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cefa:	fb01 f303 	mul.w	r3, r1, r3
 800cefe:	441a      	add	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	68f9      	ldr	r1, [r7, #12]
 800cf1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf20:	fb01 f303 	mul.w	r3, r1, r3
 800cf24:	441a      	add	r2, r3
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	22ff      	movs	r2, #255	; 0xff
 800cf2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	22ff      	movs	r2, #255	; 0xff
 800cf36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d114      	bne.n	800cf6a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d01a      	beq.n	800cf7e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 fc9f 	bl	800e890 <xTaskRemoveFromEventList>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d012      	beq.n	800cf7e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <xQueueGenericReset+0xd0>)
 800cf5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf5e:	601a      	str	r2, [r3, #0]
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	e009      	b.n	800cf7e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fef0 	bl	800cd54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3324      	adds	r3, #36	; 0x24
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff feeb 	bl	800cd54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf7e:	f002 f9d1 	bl	800f324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf82:	2301      	movs	r3, #1
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08e      	sub	sp, #56	; 0x38
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10c      	bne.n	800cfbe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	b672      	cpsid	i
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	b662      	cpsie	i
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10c      	bne.n	800cfde <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	b672      	cpsid	i
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	b662      	cpsie	i
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <xQueueGenericCreateStatic+0x5a>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <xQueueGenericCreateStatic+0x5e>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <xQueueGenericCreateStatic+0x60>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10c      	bne.n	800d00e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	b672      	cpsid	i
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	b662      	cpsie	i
 800d008:	623b      	str	r3, [r7, #32]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d102      	bne.n	800d01a <xQueueGenericCreateStatic+0x8a>
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <xQueueGenericCreateStatic+0x8e>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <xQueueGenericCreateStatic+0x90>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10c      	bne.n	800d03e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	b672      	cpsid	i
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	b662      	cpsie	i
 800d038:	61fb      	str	r3, [r7, #28]
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d03e:	2348      	movs	r3, #72	; 0x48
 800d040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b48      	cmp	r3, #72	; 0x48
 800d046:	d00c      	beq.n	800d062 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	b672      	cpsid	i
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	b662      	cpsie	i
 800d05c:	61bb      	str	r3, [r7, #24]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d062:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00d      	beq.n	800d08a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	2201      	movs	r2, #1
 800d072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d076:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	4613      	mov	r3, r2
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68b9      	ldr	r1, [r7, #8]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 f847 	bl	800d118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3730      	adds	r7, #48	; 0x30
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08a      	sub	sp, #40	; 0x28
 800d098:	af02      	add	r7, sp, #8
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10c      	bne.n	800d0c2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	b672      	cpsid	i
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	b662      	cpsie	i
 800d0bc:	613b      	str	r3, [r7, #16]
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	61fb      	str	r3, [r7, #28]
 800d0cc:	e004      	b.n	800d0d8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
 800d0d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	3348      	adds	r3, #72	; 0x48
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f002 fa19 	bl	800f514 <pvPortMalloc>
 800d0e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d011      	beq.n	800d10e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	3348      	adds	r3, #72	; 0x48
 800d0f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0fc:	79fa      	ldrb	r2, [r7, #7]
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4613      	mov	r3, r2
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f000 f805 	bl	800d118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d10e:	69bb      	ldr	r3, [r7, #24]
	}
 800d110:	4618      	mov	r0, r3
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	69ba      	ldr	r2, [r7, #24]
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e002      	b.n	800d13a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d146:	2101      	movs	r1, #1
 800d148:	69b8      	ldr	r0, [r7, #24]
 800d14a:	f7ff feb7 	bl	800cebc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d14e:	bf00      	nop
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00e      	beq.n	800d182 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d176:	2300      	movs	r3, #0
 800d178:	2200      	movs	r2, #0
 800d17a:	2100      	movs	r1, #0
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f837 	bl	800d1f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	4603      	mov	r3, r0
 800d192:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d194:	2301      	movs	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
 800d198:	2300      	movs	r3, #0
 800d19a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	6939      	ldr	r1, [r7, #16]
 800d1a2:	6978      	ldr	r0, [r7, #20]
 800d1a4:	f7ff ff76 	bl	800d094 <xQueueGenericCreate>
 800d1a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff ffd3 	bl	800d156 <prvInitialiseMutex>

		return xNewQueue;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b088      	sub	sp, #32
 800d1be:	af02      	add	r7, sp, #8
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	6039      	str	r1, [r7, #0]
 800d1c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	6939      	ldr	r1, [r7, #16]
 800d1d8:	6978      	ldr	r0, [r7, #20]
 800d1da:	f7ff fed9 	bl	800cf90 <xQueueGenericCreateStatic>
 800d1de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff ffb8 	bl	800d156 <prvInitialiseMutex>

		return xNewQueue;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
	}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08e      	sub	sp, #56	; 0x38
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1fe:	2300      	movs	r3, #0
 800d200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10c      	bne.n	800d226 <xQueueGenericSend+0x36>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	b672      	cpsid	i
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	b662      	cpsie	i
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d103      	bne.n	800d234 <xQueueGenericSend+0x44>
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d230:	2b00      	cmp	r3, #0
 800d232:	d101      	bne.n	800d238 <xQueueGenericSend+0x48>
 800d234:	2301      	movs	r3, #1
 800d236:	e000      	b.n	800d23a <xQueueGenericSend+0x4a>
 800d238:	2300      	movs	r3, #0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10c      	bne.n	800d258 <xQueueGenericSend+0x68>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	b672      	cpsid	i
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	b662      	cpsie	i
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d103      	bne.n	800d266 <xQueueGenericSend+0x76>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	2b01      	cmp	r3, #1
 800d264:	d101      	bne.n	800d26a <xQueueGenericSend+0x7a>
 800d266:	2301      	movs	r3, #1
 800d268:	e000      	b.n	800d26c <xQueueGenericSend+0x7c>
 800d26a:	2300      	movs	r3, #0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10c      	bne.n	800d28a <xQueueGenericSend+0x9a>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d274:	b672      	cpsid	i
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	b662      	cpsie	i
 800d284:	623b      	str	r3, [r7, #32]
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d28a:	f001 fcc9 	bl	800ec20 <xTaskGetSchedulerState>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d102      	bne.n	800d29a <xQueueGenericSend+0xaa>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d101      	bne.n	800d29e <xQueueGenericSend+0xae>
 800d29a:	2301      	movs	r3, #1
 800d29c:	e000      	b.n	800d2a0 <xQueueGenericSend+0xb0>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10c      	bne.n	800d2be <xQueueGenericSend+0xce>
	__asm volatile
 800d2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a8:	b672      	cpsid	i
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	b662      	cpsie	i
 800d2b8:	61fb      	str	r3, [r7, #28]
}
 800d2ba:	bf00      	nop
 800d2bc:	e7fe      	b.n	800d2bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2be:	f001 fffd 	bl	800f2bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d302      	bcc.n	800d2d4 <xQueueGenericSend+0xe4>
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d129      	bne.n	800d328 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2da:	f000 fc5d 	bl	800db98 <prvCopyDataToQueue>
 800d2de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d010      	beq.n	800d30a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	3324      	adds	r3, #36	; 0x24
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 facf 	bl	800e890 <xTaskRemoveFromEventList>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d013      	beq.n	800d320 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2f8:	4b3f      	ldr	r3, [pc, #252]	; (800d3f8 <xQueueGenericSend+0x208>)
 800d2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	e00a      	b.n	800d320 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d007      	beq.n	800d320 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d310:	4b39      	ldr	r3, [pc, #228]	; (800d3f8 <xQueueGenericSend+0x208>)
 800d312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d320:	f002 f800 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d324:	2301      	movs	r3, #1
 800d326:	e063      	b.n	800d3f0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d103      	bne.n	800d336 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d32e:	f001 fff9 	bl	800f324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d332:	2300      	movs	r3, #0
 800d334:	e05c      	b.n	800d3f0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d33c:	f107 0314 	add.w	r3, r7, #20
 800d340:	4618      	mov	r0, r3
 800d342:	f001 fb09 	bl	800e958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d346:	2301      	movs	r3, #1
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d34a:	f001 ffeb 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d34e:	f001 f89f 	bl	800e490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d352:	f001 ffb3 	bl	800f2bc <vPortEnterCritical>
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d35c:	b25b      	sxtb	r3, r3
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d362:	d103      	bne.n	800d36c <xQueueGenericSend+0x17c>
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d372:	b25b      	sxtb	r3, r3
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d103      	bne.n	800d382 <xQueueGenericSend+0x192>
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d382:	f001 ffcf 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d386:	1d3a      	adds	r2, r7, #4
 800d388:	f107 0314 	add.w	r3, r7, #20
 800d38c:	4611      	mov	r1, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f001 faf8 	bl	800e984 <xTaskCheckForTimeOut>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d124      	bne.n	800d3e4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d39a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d39c:	f000 fcf4 	bl	800dd88 <prvIsQueueFull>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d018      	beq.n	800d3d8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 fa48 	bl	800e844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3b6:	f000 fc7f 	bl	800dcb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3ba:	f001 f877 	bl	800e4ac <xTaskResumeAll>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f47f af7c 	bne.w	800d2be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <xQueueGenericSend+0x208>)
 800d3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	e772      	b.n	800d2be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3da:	f000 fc6d 	bl	800dcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3de:	f001 f865 	bl	800e4ac <xTaskResumeAll>
 800d3e2:	e76c      	b.n	800d2be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e6:	f000 fc67 	bl	800dcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ea:	f001 f85f 	bl	800e4ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3738      	adds	r7, #56	; 0x38
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08e      	sub	sp, #56	; 0x38
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	b672      	cpsid	i
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	b662      	cpsie	i
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d42a:	bf00      	nop
 800d42c:	e7fe      	b.n	800d42c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d103      	bne.n	800d43c <xQueueGenericSendFromISR+0x40>
 800d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <xQueueGenericSendFromISR+0x44>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e000      	b.n	800d442 <xQueueGenericSendFromISR+0x46>
 800d440:	2300      	movs	r3, #0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10c      	bne.n	800d460 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	b672      	cpsid	i
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	b662      	cpsie	i
 800d45a:	623b      	str	r3, [r7, #32]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2b02      	cmp	r3, #2
 800d464:	d103      	bne.n	800d46e <xQueueGenericSendFromISR+0x72>
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d101      	bne.n	800d472 <xQueueGenericSendFromISR+0x76>
 800d46e:	2301      	movs	r3, #1
 800d470:	e000      	b.n	800d474 <xQueueGenericSendFromISR+0x78>
 800d472:	2300      	movs	r3, #0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10c      	bne.n	800d492 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	b672      	cpsid	i
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	b662      	cpsie	i
 800d48c:	61fb      	str	r3, [r7, #28]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d492:	f001 fffb 	bl	800f48c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d496:	f3ef 8211 	mrs	r2, BASEPRI
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	b672      	cpsid	i
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	b662      	cpsie	i
 800d4ae:	61ba      	str	r2, [r7, #24]
 800d4b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d302      	bcc.n	800d4c8 <xQueueGenericSendFromISR+0xcc>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d12c      	bne.n	800d522 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	68b9      	ldr	r1, [r7, #8]
 800d4d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4d8:	f000 fb5e 	bl	800db98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e4:	d112      	bne.n	800d50c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d016      	beq.n	800d51c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	3324      	adds	r3, #36	; 0x24
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f001 f9cc 	bl	800e890 <xTaskRemoveFromEventList>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00e      	beq.n	800d51c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00b      	beq.n	800d51c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	e007      	b.n	800d51c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d50c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d510:	3301      	adds	r3, #1
 800d512:	b2db      	uxtb	r3, r3
 800d514:	b25a      	sxtb	r2, r3
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d51c:	2301      	movs	r3, #1
 800d51e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d520:	e001      	b.n	800d526 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d522:	2300      	movs	r3, #0
 800d524:	637b      	str	r3, [r7, #52]	; 0x34
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d530:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d534:	4618      	mov	r0, r3
 800d536:	3738      	adds	r7, #56	; 0x38
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08e      	sub	sp, #56	; 0x38
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10c      	bne.n	800d56a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	b672      	cpsid	i
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	b662      	cpsie	i
 800d564:	623b      	str	r3, [r7, #32]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00c      	beq.n	800d58c <xQueueGiveFromISR+0x50>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	b672      	cpsid	i
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	b662      	cpsie	i
 800d586:	61fb      	str	r3, [r7, #28]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d103      	bne.n	800d59c <xQueueGiveFromISR+0x60>
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <xQueueGiveFromISR+0x64>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e000      	b.n	800d5a2 <xQueueGiveFromISR+0x66>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10c      	bne.n	800d5c0 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	b672      	cpsid	i
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	b662      	cpsie	i
 800d5ba:	61bb      	str	r3, [r7, #24]
}
 800d5bc:	bf00      	nop
 800d5be:	e7fe      	b.n	800d5be <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5c0:	f001 ff64 	bl	800f48c <vPortValidateInterruptPriority>
	__asm volatile
 800d5c4:	f3ef 8211 	mrs	r2, BASEPRI
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	b672      	cpsid	i
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	b662      	cpsie	i
 800d5dc:	617a      	str	r2, [r7, #20]
 800d5de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d5e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d22b      	bcs.n	800d64c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d112      	bne.n	800d636 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	2b00      	cmp	r3, #0
 800d616:	d016      	beq.n	800d646 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	3324      	adds	r3, #36	; 0x24
 800d61c:	4618      	mov	r0, r3
 800d61e:	f001 f937 	bl	800e890 <xTaskRemoveFromEventList>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00e      	beq.n	800d646 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2201      	movs	r2, #1
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e007      	b.n	800d646 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d63a:	3301      	adds	r3, #1
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	b25a      	sxtb	r2, r3
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d646:	2301      	movs	r3, #1
 800d648:	637b      	str	r3, [r7, #52]	; 0x34
 800d64a:	e001      	b.n	800d650 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d64c:	2300      	movs	r3, #0
 800d64e:	637b      	str	r3, [r7, #52]	; 0x34
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f383 8811 	msr	BASEPRI, r3
}
 800d65a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3738      	adds	r7, #56	; 0x38
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08c      	sub	sp, #48	; 0x30
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d674:	2300      	movs	r3, #0
 800d676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10c      	bne.n	800d69c <xQueueReceive+0x34>
	__asm volatile
 800d682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d686:	b672      	cpsid	i
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	b662      	cpsie	i
 800d696:	623b      	str	r3, [r7, #32]
}
 800d698:	bf00      	nop
 800d69a:	e7fe      	b.n	800d69a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d103      	bne.n	800d6aa <xQueueReceive+0x42>
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <xQueueReceive+0x46>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <xQueueReceive+0x48>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10c      	bne.n	800d6ce <xQueueReceive+0x66>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	b672      	cpsid	i
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	b662      	cpsie	i
 800d6c8:	61fb      	str	r3, [r7, #28]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6ce:	f001 faa7 	bl	800ec20 <xTaskGetSchedulerState>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <xQueueReceive+0x76>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <xQueueReceive+0x7a>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <xQueueReceive+0x7c>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10c      	bne.n	800d702 <xQueueReceive+0x9a>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	b672      	cpsid	i
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	b662      	cpsie	i
 800d6fc:	61bb      	str	r3, [r7, #24]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d702:	f001 fddb 	bl	800f2bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d01f      	beq.n	800d752 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d712:	68b9      	ldr	r1, [r7, #8]
 800d714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d716:	f000 faa9 	bl	800dc6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	1e5a      	subs	r2, r3, #1
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00f      	beq.n	800d74a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	3310      	adds	r3, #16
 800d72e:	4618      	mov	r0, r3
 800d730:	f001 f8ae 	bl	800e890 <xTaskRemoveFromEventList>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d007      	beq.n	800d74a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d73a:	4b3d      	ldr	r3, [pc, #244]	; (800d830 <xQueueReceive+0x1c8>)
 800d73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d74a:	f001 fdeb 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d74e:	2301      	movs	r3, #1
 800d750:	e069      	b.n	800d826 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d103      	bne.n	800d760 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d758:	f001 fde4 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d75c:	2300      	movs	r3, #0
 800d75e:	e062      	b.n	800d826 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d766:	f107 0310 	add.w	r3, r7, #16
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 f8f4 	bl	800e958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d770:	2301      	movs	r3, #1
 800d772:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d774:	f001 fdd6 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d778:	f000 fe8a 	bl	800e490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d77c:	f001 fd9e 	bl	800f2bc <vPortEnterCritical>
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d786:	b25b      	sxtb	r3, r3
 800d788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78c:	d103      	bne.n	800d796 <xQueueReceive+0x12e>
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d79c:	b25b      	sxtb	r3, r3
 800d79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a2:	d103      	bne.n	800d7ac <xQueueReceive+0x144>
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7ac:	f001 fdba 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7b0:	1d3a      	adds	r2, r7, #4
 800d7b2:	f107 0310 	add.w	r3, r7, #16
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f001 f8e3 	bl	800e984 <xTaskCheckForTimeOut>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d123      	bne.n	800d80c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7c6:	f000 fac9 	bl	800dd5c <prvIsQueueEmpty>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d017      	beq.n	800d800 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d2:	3324      	adds	r3, #36	; 0x24
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f001 f833 	bl	800e844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7e0:	f000 fa6a 	bl	800dcb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e4:	f000 fe62 	bl	800e4ac <xTaskResumeAll>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d189      	bne.n	800d702 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d7ee:	4b10      	ldr	r3, [pc, #64]	; (800d830 <xQueueReceive+0x1c8>)
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	e780      	b.n	800d702 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d802:	f000 fa59 	bl	800dcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d806:	f000 fe51 	bl	800e4ac <xTaskResumeAll>
 800d80a:	e77a      	b.n	800d702 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d80e:	f000 fa53 	bl	800dcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d812:	f000 fe4b 	bl	800e4ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d818:	f000 faa0 	bl	800dd5c <prvIsQueueEmpty>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f43f af6f 	beq.w	800d702 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d826:	4618      	mov	r0, r3
 800d828:	3730      	adds	r7, #48	; 0x30
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	; 0x38
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d83e:	2300      	movs	r3, #0
 800d840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d846:	2300      	movs	r3, #0
 800d848:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10c      	bne.n	800d86a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	b672      	cpsid	i
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	b662      	cpsie	i
 800d864:	623b      	str	r3, [r7, #32]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00c      	beq.n	800d88c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	b672      	cpsid	i
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	b662      	cpsie	i
 800d886:	61fb      	str	r3, [r7, #28]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d88c:	f001 f9c8 	bl	800ec20 <xTaskGetSchedulerState>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <xQueueSemaphoreTake+0x68>
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <xQueueSemaphoreTake+0x6c>
 800d89c:	2301      	movs	r3, #1
 800d89e:	e000      	b.n	800d8a2 <xQueueSemaphoreTake+0x6e>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10c      	bne.n	800d8c0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	b672      	cpsid	i
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	b662      	cpsie	i
 800d8ba:	61bb      	str	r3, [r7, #24]
}
 800d8bc:	bf00      	nop
 800d8be:	e7fe      	b.n	800d8be <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8c0:	f001 fcfc 	bl	800f2bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d024      	beq.n	800d91a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	1e5a      	subs	r2, r3, #1
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d8e0:	f001 fb64 	bl	800efac <pvTaskIncrementMutexHeldCount>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00f      	beq.n	800d912 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	3310      	adds	r3, #16
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 ffca 	bl	800e890 <xTaskRemoveFromEventList>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d007      	beq.n	800d912 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d902:	4b55      	ldr	r3, [pc, #340]	; (800da58 <xQueueSemaphoreTake+0x224>)
 800d904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d912:	f001 fd07 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d916:	2301      	movs	r3, #1
 800d918:	e099      	b.n	800da4e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d113      	bne.n	800d948 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00c      	beq.n	800d940 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	b672      	cpsid	i
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	b662      	cpsie	i
 800d93a:	617b      	str	r3, [r7, #20]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d940:	f001 fcf0 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d944:	2300      	movs	r3, #0
 800d946:	e082      	b.n	800da4e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d106      	bne.n	800d95c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d94e:	f107 030c 	add.w	r3, r7, #12
 800d952:	4618      	mov	r0, r3
 800d954:	f001 f800 	bl	800e958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d958:	2301      	movs	r3, #1
 800d95a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d95c:	f001 fce2 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d960:	f000 fd96 	bl	800e490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d964:	f001 fcaa 	bl	800f2bc <vPortEnterCritical>
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96e:	b25b      	sxtb	r3, r3
 800d970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d974:	d103      	bne.n	800d97e <xQueueSemaphoreTake+0x14a>
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d984:	b25b      	sxtb	r3, r3
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d103      	bne.n	800d994 <xQueueSemaphoreTake+0x160>
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d994:	f001 fcc6 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d998:	463a      	mov	r2, r7
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	4611      	mov	r1, r2
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 ffef 	bl	800e984 <xTaskCheckForTimeOut>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d132      	bne.n	800da12 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ae:	f000 f9d5 	bl	800dd5c <prvIsQueueEmpty>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d026      	beq.n	800da06 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d109      	bne.n	800d9d4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d9c0:	f001 fc7c 	bl	800f2bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f001 f947 	bl	800ec5c <xTaskPriorityInherit>
 800d9ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d9d0:	f001 fca8 	bl	800f324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	3324      	adds	r3, #36	; 0x24
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 ff31 	bl	800e844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e4:	f000 f968 	bl	800dcb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9e8:	f000 fd60 	bl	800e4ac <xTaskResumeAll>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f47f af66 	bne.w	800d8c0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d9f4:	4b18      	ldr	r3, [pc, #96]	; (800da58 <xQueueSemaphoreTake+0x224>)
 800d9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	e75c      	b.n	800d8c0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da08:	f000 f956 	bl	800dcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da0c:	f000 fd4e 	bl	800e4ac <xTaskResumeAll>
 800da10:	e756      	b.n	800d8c0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da14:	f000 f950 	bl	800dcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da18:	f000 fd48 	bl	800e4ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da1e:	f000 f99d 	bl	800dd5c <prvIsQueueEmpty>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	f43f af4b 	beq.w	800d8c0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00d      	beq.n	800da4c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800da30:	f001 fc44 	bl	800f2bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da36:	f000 f897 	bl	800db68 <prvGetDisinheritPriorityAfterTimeout>
 800da3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da42:	4618      	mov	r0, r3
 800da44:	f001 fa14 	bl	800ee70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da48:	f001 fc6c 	bl	800f324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3738      	adds	r7, #56	; 0x38
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08e      	sub	sp, #56	; 0x38
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10c      	bne.n	800da8c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da76:	b672      	cpsid	i
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	b662      	cpsie	i
 800da86:	623b      	str	r3, [r7, #32]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <xQueueReceiveFromISR+0x3e>
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <xQueueReceiveFromISR+0x42>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e000      	b.n	800daa0 <xQueueReceiveFromISR+0x44>
 800da9e:	2300      	movs	r3, #0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10c      	bne.n	800dabe <xQueueReceiveFromISR+0x62>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	b672      	cpsid	i
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	b662      	cpsie	i
 800dab8:	61fb      	str	r3, [r7, #28]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dabe:	f001 fce5 	bl	800f48c <vPortValidateInterruptPriority>
	__asm volatile
 800dac2:	f3ef 8211 	mrs	r2, BASEPRI
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	b672      	cpsid	i
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	b662      	cpsie	i
 800dada:	61ba      	str	r2, [r7, #24]
 800dadc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daea:	2b00      	cmp	r3, #0
 800daec:	d02f      	beq.n	800db4e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800daf8:	68b9      	ldr	r1, [r7, #8]
 800dafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dafc:	f000 f8b6 	bl	800dc6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	1e5a      	subs	r2, r3, #1
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d112      	bne.n	800db38 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d016      	beq.n	800db48 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	3310      	adds	r3, #16
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 feb6 	bl	800e890 <xTaskRemoveFromEventList>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00e      	beq.n	800db48 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	e007      	b.n	800db48 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db3c:	3301      	adds	r3, #1
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	b25a      	sxtb	r2, r3
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800db48:	2301      	movs	r3, #1
 800db4a:	637b      	str	r3, [r7, #52]	; 0x34
 800db4c:	e001      	b.n	800db52 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800db4e:	2300      	movs	r3, #0
 800db50:	637b      	str	r3, [r7, #52]	; 0x34
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f383 8811 	msr	BASEPRI, r3
}
 800db5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db60:	4618      	mov	r0, r3
 800db62:	3738      	adds	r7, #56	; 0x38
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f1c3 0307 	rsb	r3, r3, #7
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	e001      	b.n	800db8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db86:	2300      	movs	r3, #0
 800db88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db8a:	68fb      	ldr	r3, [r7, #12]
	}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3714      	adds	r7, #20
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dba4:	2300      	movs	r3, #0
 800dba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10d      	bne.n	800dbd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d14d      	bne.n	800dc5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f001 f8ca 	bl	800ed5c <xTaskPriorityDisinherit>
 800dbc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	609a      	str	r2, [r3, #8]
 800dbd0:	e043      	b.n	800dc5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d119      	bne.n	800dc0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6858      	ldr	r0, [r3, #4]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	68b9      	ldr	r1, [r7, #8]
 800dbe4:	f001 fea6 	bl	800f934 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf0:	441a      	add	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	685a      	ldr	r2, [r3, #4]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d32b      	bcc.n	800dc5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	605a      	str	r2, [r3, #4]
 800dc0a:	e026      	b.n	800dc5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	68d8      	ldr	r0, [r3, #12]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc14:	461a      	mov	r2, r3
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	f001 fe8c 	bl	800f934 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	68da      	ldr	r2, [r3, #12]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc24:	425b      	negs	r3, r3
 800dc26:	441a      	add	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d207      	bcs.n	800dc48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	689a      	ldr	r2, [r3, #8]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc40:	425b      	negs	r3, r3
 800dc42:	441a      	add	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d105      	bne.n	800dc5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	3b01      	subs	r3, #1
 800dc58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dc62:	697b      	ldr	r3, [r7, #20]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d018      	beq.n	800dcb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	68da      	ldr	r2, [r3, #12]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc86:	441a      	add	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68da      	ldr	r2, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d303      	bcc.n	800dca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	68d9      	ldr	r1, [r3, #12]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6838      	ldr	r0, [r7, #0]
 800dcac:	f001 fe42 	bl	800f934 <memcpy>
	}
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dcc0:	f001 fafc 	bl	800f2bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dccc:	e011      	b.n	800dcf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d012      	beq.n	800dcfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3324      	adds	r3, #36	; 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fdd8 	bl	800e890 <xTaskRemoveFromEventList>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d001      	beq.n	800dcea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dce6:	f000 feb3 	bl	800ea50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcea:	7bfb      	ldrb	r3, [r7, #15]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	dce9      	bgt.n	800dcce <prvUnlockQueue+0x16>
 800dcfa:	e000      	b.n	800dcfe <prvUnlockQueue+0x46>
					break;
 800dcfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	22ff      	movs	r2, #255	; 0xff
 800dd02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd06:	f001 fb0d 	bl	800f324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd0a:	f001 fad7 	bl	800f2bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd16:	e011      	b.n	800dd3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d012      	beq.n	800dd46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3310      	adds	r3, #16
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 fdb3 	bl	800e890 <xTaskRemoveFromEventList>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd30:	f000 fe8e 	bl	800ea50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	dce9      	bgt.n	800dd18 <prvUnlockQueue+0x60>
 800dd44:	e000      	b.n	800dd48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	22ff      	movs	r2, #255	; 0xff
 800dd4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd50:	f001 fae8 	bl	800f324 <vPortExitCritical>
}
 800dd54:	bf00      	nop
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd64:	f001 faaa 	bl	800f2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	e001      	b.n	800dd7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd76:	2300      	movs	r3, #0
 800dd78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd7a:	f001 fad3 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd90:	f001 fa94 	bl	800f2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d102      	bne.n	800dda6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dda0:	2301      	movs	r3, #1
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	e001      	b.n	800ddaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddaa:	f001 fabb 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800ddae:	68fb      	ldr	r3, [r7, #12]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08e      	sub	sp, #56	; 0x38
 800ddbc:	af04      	add	r7, sp, #16
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10c      	bne.n	800dde6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	b672      	cpsid	i
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	b662      	cpsie	i
 800dde0:	623b      	str	r3, [r7, #32]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10c      	bne.n	800de06 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	b672      	cpsid	i
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	b662      	cpsie	i
 800de00:	61fb      	str	r3, [r7, #28]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de06:	23b4      	movs	r3, #180	; 0xb4
 800de08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2bb4      	cmp	r3, #180	; 0xb4
 800de0e:	d00c      	beq.n	800de2a <xTaskCreateStatic+0x72>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	b672      	cpsid	i
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	b662      	cpsie	i
 800de24:	61bb      	str	r3, [r7, #24]
}
 800de26:	bf00      	nop
 800de28:	e7fe      	b.n	800de28 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d01e      	beq.n	800de70 <xTaskCreateStatic+0xb8>
 800de32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01b      	beq.n	800de70 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	2202      	movs	r2, #2
 800de46:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de4a:	2300      	movs	r3, #0
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	f107 0314 	add.w	r3, r7, #20
 800de56:	9301      	str	r3, [sp, #4]
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f850 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de6a:	f000 f8ed 	bl	800e048 <prvAddNewTaskToReadyList>
 800de6e:	e001      	b.n	800de74 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de74:	697b      	ldr	r3, [r7, #20]
	}
 800de76:	4618      	mov	r0, r3
 800de78:	3728      	adds	r7, #40	; 0x28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b08c      	sub	sp, #48	; 0x30
 800de82:	af04      	add	r7, sp, #16
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	4613      	mov	r3, r2
 800de8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4618      	mov	r0, r3
 800de94:	f001 fb3e 	bl	800f514 <pvPortMalloc>
 800de98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00e      	beq.n	800debe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dea0:	20b4      	movs	r0, #180	; 0xb4
 800dea2:	f001 fb37 	bl	800f514 <pvPortMalloc>
 800dea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d003      	beq.n	800deb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	631a      	str	r2, [r3, #48]	; 0x30
 800deb4:	e005      	b.n	800dec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f001 fbf6 	bl	800f6a8 <vPortFree>
 800debc:	e001      	b.n	800dec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d017      	beq.n	800def8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ded0:	88fa      	ldrh	r2, [r7, #6]
 800ded2:	2300      	movs	r3, #0
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	9302      	str	r3, [sp, #8]
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 f80e 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deec:	69f8      	ldr	r0, [r7, #28]
 800deee:	f000 f8ab 	bl	800e048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800def2:	2301      	movs	r3, #1
 800def4:	61bb      	str	r3, [r7, #24]
 800def6:	e002      	b.n	800defe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800def8:	f04f 33ff 	mov.w	r3, #4294967295
 800defc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800defe:	69bb      	ldr	r3, [r7, #24]
	}
 800df00:	4618      	mov	r0, r3
 800df02:	3720      	adds	r7, #32
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df20:	440b      	add	r3, r1
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	f023 0307 	bic.w	r3, r3, #7
 800df2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	f003 0307 	and.w	r3, r3, #7
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00c      	beq.n	800df54 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	b672      	cpsid	i
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	b662      	cpsie	i
 800df4e:	617b      	str	r3, [r7, #20]
}
 800df50:	bf00      	nop
 800df52:	e7fe      	b.n	800df52 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d01f      	beq.n	800df9a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df5a:	2300      	movs	r3, #0
 800df5c:	61fb      	str	r3, [r7, #28]
 800df5e:	e012      	b.n	800df86 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	4413      	add	r3, r2
 800df66:	7819      	ldrb	r1, [r3, #0]
 800df68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	4413      	add	r3, r2
 800df6e:	3334      	adds	r3, #52	; 0x34
 800df70:	460a      	mov	r2, r1
 800df72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4413      	add	r3, r2
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	3301      	adds	r3, #1
 800df84:	61fb      	str	r3, [r7, #28]
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	2b0f      	cmp	r3, #15
 800df8a:	d9e9      	bls.n	800df60 <prvInitialiseNewTask+0x58>
 800df8c:	e000      	b.n	800df90 <prvInitialiseNewTask+0x88>
			{
				break;
 800df8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df98:	e003      	b.n	800dfa2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	2b06      	cmp	r3, #6
 800dfa6:	d901      	bls.n	800dfac <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfa8:	2306      	movs	r3, #6
 800dfaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	2200      	movs	r2, #0
 800dfbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fee6 	bl	800cd94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfca:	3318      	adds	r3, #24
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe fee1 	bl	800cd94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	f1c3 0207 	rsb	r2, r3, #7
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	2200      	movs	r2, #0
 800dfec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffa:	334c      	adds	r3, #76	; 0x4c
 800dffc:	2260      	movs	r2, #96	; 0x60
 800dffe:	2100      	movs	r1, #0
 800e000:	4618      	mov	r0, r3
 800e002:	f001 fca5 	bl	800f950 <memset>
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	4a0c      	ldr	r2, [pc, #48]	; (800e03c <prvInitialiseNewTask+0x134>)
 800e00a:	651a      	str	r2, [r3, #80]	; 0x50
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	4a0c      	ldr	r2, [pc, #48]	; (800e040 <prvInitialiseNewTask+0x138>)
 800e010:	655a      	str	r2, [r3, #84]	; 0x54
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	4a0b      	ldr	r2, [pc, #44]	; (800e044 <prvInitialiseNewTask+0x13c>)
 800e016:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	68f9      	ldr	r1, [r7, #12]
 800e01c:	69b8      	ldr	r0, [r7, #24]
 800e01e:	f001 f83f 	bl	800f0a0 <pxPortInitialiseStack>
 800e022:	4602      	mov	r2, r0
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e032:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e034:	bf00      	nop
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08071da8 	.word	0x08071da8
 800e040:	08071dc8 	.word	0x08071dc8
 800e044:	08071d88 	.word	0x08071d88

0800e048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e050:	f001 f934 	bl	800f2bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e054:	4b2a      	ldr	r3, [pc, #168]	; (800e100 <prvAddNewTaskToReadyList+0xb8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3301      	adds	r3, #1
 800e05a:	4a29      	ldr	r2, [pc, #164]	; (800e100 <prvAddNewTaskToReadyList+0xb8>)
 800e05c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e05e:	4b29      	ldr	r3, [pc, #164]	; (800e104 <prvAddNewTaskToReadyList+0xbc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d109      	bne.n	800e07a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e066:	4a27      	ldr	r2, [pc, #156]	; (800e104 <prvAddNewTaskToReadyList+0xbc>)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e06c:	4b24      	ldr	r3, [pc, #144]	; (800e100 <prvAddNewTaskToReadyList+0xb8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d110      	bne.n	800e096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e074:	f000 fd10 	bl	800ea98 <prvInitialiseTaskLists>
 800e078:	e00d      	b.n	800e096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e07a:	4b23      	ldr	r3, [pc, #140]	; (800e108 <prvAddNewTaskToReadyList+0xc0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d109      	bne.n	800e096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e082:	4b20      	ldr	r3, [pc, #128]	; (800e104 <prvAddNewTaskToReadyList+0xbc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d802      	bhi.n	800e096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e090:	4a1c      	ldr	r2, [pc, #112]	; (800e104 <prvAddNewTaskToReadyList+0xbc>)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e096:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <prvAddNewTaskToReadyList+0xc4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	3301      	adds	r3, #1
 800e09c:	4a1b      	ldr	r2, [pc, #108]	; (800e10c <prvAddNewTaskToReadyList+0xc4>)
 800e09e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	409a      	lsls	r2, r3
 800e0a8:	4b19      	ldr	r3, [pc, #100]	; (800e110 <prvAddNewTaskToReadyList+0xc8>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	4a18      	ldr	r2, [pc, #96]	; (800e110 <prvAddNewTaskToReadyList+0xc8>)
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4a15      	ldr	r2, [pc, #84]	; (800e114 <prvAddNewTaskToReadyList+0xcc>)
 800e0c0:	441a      	add	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	f7fe fe70 	bl	800cdae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0ce:	f001 f929 	bl	800f324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	; (800e108 <prvAddNewTaskToReadyList+0xc0>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00e      	beq.n	800e0f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0da:	4b0a      	ldr	r3, [pc, #40]	; (800e104 <prvAddNewTaskToReadyList+0xbc>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d207      	bcs.n	800e0f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0e8:	4b0b      	ldr	r3, [pc, #44]	; (800e118 <prvAddNewTaskToReadyList+0xd0>)
 800e0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20000e84 	.word	0x20000e84
 800e104:	20000d84 	.word	0x20000d84
 800e108:	20000e90 	.word	0x20000e90
 800e10c:	20000ea0 	.word	0x20000ea0
 800e110:	20000e8c 	.word	0x20000e8c
 800e114:	20000d88 	.word	0x20000d88
 800e118:	e000ed04 	.word	0xe000ed04

0800e11c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e124:	f001 f8ca 	bl	800f2bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d102      	bne.n	800e134 <vTaskDelete+0x18>
 800e12e:	4b3a      	ldr	r3, [pc, #232]	; (800e218 <vTaskDelete+0xfc>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	e000      	b.n	800e136 <vTaskDelete+0x1a>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3304      	adds	r3, #4
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fe93 	bl	800ce68 <uxListRemove>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d115      	bne.n	800e174 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14c:	4933      	ldr	r1, [pc, #204]	; (800e21c <vTaskDelete+0x100>)
 800e14e:	4613      	mov	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4413      	add	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	440b      	add	r3, r1
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d10a      	bne.n	800e174 <vTaskDelete+0x58>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	2201      	movs	r2, #1
 800e164:	fa02 f303 	lsl.w	r3, r2, r3
 800e168:	43da      	mvns	r2, r3
 800e16a:	4b2d      	ldr	r3, [pc, #180]	; (800e220 <vTaskDelete+0x104>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4013      	ands	r3, r2
 800e170:	4a2b      	ldr	r2, [pc, #172]	; (800e220 <vTaskDelete+0x104>)
 800e172:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d004      	beq.n	800e186 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	3318      	adds	r3, #24
 800e180:	4618      	mov	r0, r3
 800e182:	f7fe fe71 	bl	800ce68 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e186:	4b27      	ldr	r3, [pc, #156]	; (800e224 <vTaskDelete+0x108>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	4a25      	ldr	r2, [pc, #148]	; (800e224 <vTaskDelete+0x108>)
 800e18e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e190:	4b21      	ldr	r3, [pc, #132]	; (800e218 <vTaskDelete+0xfc>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	429a      	cmp	r2, r3
 800e198:	d10b      	bne.n	800e1b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4821      	ldr	r0, [pc, #132]	; (800e228 <vTaskDelete+0x10c>)
 800e1a2:	f7fe fe04 	bl	800cdae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e1a6:	4b21      	ldr	r3, [pc, #132]	; (800e22c <vTaskDelete+0x110>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	4a1f      	ldr	r2, [pc, #124]	; (800e22c <vTaskDelete+0x110>)
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	e009      	b.n	800e1c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e1b2:	4b1f      	ldr	r3, [pc, #124]	; (800e230 <vTaskDelete+0x114>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	4a1d      	ldr	r2, [pc, #116]	; (800e230 <vTaskDelete+0x114>)
 800e1ba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f000 fcd9 	bl	800eb74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e1c2:	f000 fd0d 	bl	800ebe0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e1c6:	f001 f8ad 	bl	800f324 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e1ca:	4b1a      	ldr	r3, [pc, #104]	; (800e234 <vTaskDelete+0x118>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d01d      	beq.n	800e20e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800e1d2:	4b11      	ldr	r3, [pc, #68]	; (800e218 <vTaskDelete+0xfc>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d118      	bne.n	800e20e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e1dc:	4b16      	ldr	r3, [pc, #88]	; (800e238 <vTaskDelete+0x11c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <vTaskDelete+0xe2>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e8:	b672      	cpsid	i
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	b662      	cpsie	i
 800e1f8:	60bb      	str	r3, [r7, #8]
}
 800e1fa:	bf00      	nop
 800e1fc:	e7fe      	b.n	800e1fc <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800e1fe:	4b0f      	ldr	r3, [pc, #60]	; (800e23c <vTaskDelete+0x120>)
 800e200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20000d84 	.word	0x20000d84
 800e21c:	20000d88 	.word	0x20000d88
 800e220:	20000e8c 	.word	0x20000e8c
 800e224:	20000ea0 	.word	0x20000ea0
 800e228:	20000e58 	.word	0x20000e58
 800e22c:	20000e6c 	.word	0x20000e6c
 800e230:	20000e84 	.word	0x20000e84
 800e234:	20000e90 	.word	0x20000e90
 800e238:	20000eac 	.word	0x20000eac
 800e23c:	e000ed04 	.word	0xe000ed04

0800e240 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08a      	sub	sp, #40	; 0x28
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10c      	bne.n	800e26e <vTaskDelayUntil+0x2e>
	__asm volatile
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	b672      	cpsid	i
 800e25a:	f383 8811 	msr	BASEPRI, r3
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f3bf 8f4f 	dsb	sy
 800e266:	b662      	cpsie	i
 800e268:	617b      	str	r3, [r7, #20]
}
 800e26a:	bf00      	nop
 800e26c:	e7fe      	b.n	800e26c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10c      	bne.n	800e28e <vTaskDelayUntil+0x4e>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e278:	b672      	cpsid	i
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	b662      	cpsie	i
 800e288:	613b      	str	r3, [r7, #16]
}
 800e28a:	bf00      	nop
 800e28c:	e7fe      	b.n	800e28c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800e28e:	4b2b      	ldr	r3, [pc, #172]	; (800e33c <vTaskDelayUntil+0xfc>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00c      	beq.n	800e2b0 <vTaskDelayUntil+0x70>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	b672      	cpsid	i
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	b662      	cpsie	i
 800e2aa:	60fb      	str	r3, [r7, #12]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800e2b0:	f000 f8ee 	bl	800e490 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e2b4:	4b22      	ldr	r3, [pc, #136]	; (800e340 <vTaskDelayUntil+0x100>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6a3a      	ldr	r2, [r7, #32]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d20b      	bcs.n	800e2e6 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	69fa      	ldr	r2, [r7, #28]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d211      	bcs.n	800e2fc <vTaskDelayUntil+0xbc>
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d90d      	bls.n	800e2fc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e4:	e00a      	b.n	800e2fc <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69fa      	ldr	r2, [r7, #28]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d303      	bcc.n	800e2f8 <vTaskDelayUntil+0xb8>
 800e2f0:	69fa      	ldr	r2, [r7, #28]
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d901      	bls.n	800e2fc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d006      	beq.n	800e316 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e308:	69fa      	ldr	r2, [r7, #28]
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	1ad3      	subs	r3, r2, r3
 800e30e:	2100      	movs	r1, #0
 800e310:	4618      	mov	r0, r3
 800e312:	f000 fe5f 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e316:	f000 f8c9 	bl	800e4ac <xTaskResumeAll>
 800e31a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d107      	bne.n	800e332 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800e322:	4b08      	ldr	r3, [pc, #32]	; (800e344 <vTaskDelayUntil+0x104>)
 800e324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e332:	bf00      	nop
 800e334:	3728      	adds	r7, #40	; 0x28
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20000eac 	.word	0x20000eac
 800e340:	20000e88 	.word	0x20000e88
 800e344:	e000ed04 	.word	0xe000ed04

0800e348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e350:	2300      	movs	r3, #0
 800e352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d019      	beq.n	800e38e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <vTaskDelay+0x64>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00c      	beq.n	800e37c <vTaskDelay+0x34>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	b672      	cpsid	i
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	b662      	cpsie	i
 800e376:	60bb      	str	r3, [r7, #8]
}
 800e378:	bf00      	nop
 800e37a:	e7fe      	b.n	800e37a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e37c:	f000 f888 	bl	800e490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e380:	2100      	movs	r1, #0
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fe26 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e388:	f000 f890 	bl	800e4ac <xTaskResumeAll>
 800e38c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d107      	bne.n	800e3a4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e394:	4b06      	ldr	r3, [pc, #24]	; (800e3b0 <vTaskDelay+0x68>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3a4:	bf00      	nop
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	20000eac 	.word	0x20000eac
 800e3b0:	e000ed04 	.word	0xe000ed04

0800e3b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	; 0x28
 800e3b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3c2:	463a      	mov	r2, r7
 800e3c4:	1d39      	adds	r1, r7, #4
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7f2 f8f2 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	460a      	mov	r2, r1
 800e3e2:	4923      	ldr	r1, [pc, #140]	; (800e470 <vTaskStartScheduler+0xbc>)
 800e3e4:	4823      	ldr	r0, [pc, #140]	; (800e474 <vTaskStartScheduler+0xc0>)
 800e3e6:	f7ff fce7 	bl	800ddb8 <xTaskCreateStatic>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	4a22      	ldr	r2, [pc, #136]	; (800e478 <vTaskStartScheduler+0xc4>)
 800e3ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3f0:	4b21      	ldr	r3, [pc, #132]	; (800e478 <vTaskStartScheduler+0xc4>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	e001      	b.n	800e402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d11d      	bne.n	800e444 <vTaskStartScheduler+0x90>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	b672      	cpsid	i
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	b662      	cpsie	i
 800e41c:	613b      	str	r3, [r7, #16]
}
 800e41e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e420:	4b16      	ldr	r3, [pc, #88]	; (800e47c <vTaskStartScheduler+0xc8>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	334c      	adds	r3, #76	; 0x4c
 800e426:	4a16      	ldr	r2, [pc, #88]	; (800e480 <vTaskStartScheduler+0xcc>)
 800e428:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e42a:	4b16      	ldr	r3, [pc, #88]	; (800e484 <vTaskStartScheduler+0xd0>)
 800e42c:	f04f 32ff 	mov.w	r2, #4294967295
 800e430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <vTaskStartScheduler+0xd4>)
 800e434:	2201      	movs	r2, #1
 800e436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e438:	4b14      	ldr	r3, [pc, #80]	; (800e48c <vTaskStartScheduler+0xd8>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e43e:	f000 febf 	bl	800f1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e442:	e010      	b.n	800e466 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44a:	d10c      	bne.n	800e466 <vTaskStartScheduler+0xb2>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	b672      	cpsid	i
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	b662      	cpsie	i
 800e460:	60fb      	str	r3, [r7, #12]
}
 800e462:	bf00      	nop
 800e464:	e7fe      	b.n	800e464 <vTaskStartScheduler+0xb0>
}
 800e466:	bf00      	nop
 800e468:	3718      	adds	r7, #24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	080103fc 	.word	0x080103fc
 800e474:	0800ea69 	.word	0x0800ea69
 800e478:	20000ea8 	.word	0x20000ea8
 800e47c:	20000d84 	.word	0x20000d84
 800e480:	200000d8 	.word	0x200000d8
 800e484:	20000ea4 	.word	0x20000ea4
 800e488:	20000e90 	.word	0x20000e90
 800e48c:	20000e88 	.word	0x20000e88

0800e490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e490:	b480      	push	{r7}
 800e492:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e494:	4b04      	ldr	r3, [pc, #16]	; (800e4a8 <vTaskSuspendAll+0x18>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3301      	adds	r3, #1
 800e49a:	4a03      	ldr	r2, [pc, #12]	; (800e4a8 <vTaskSuspendAll+0x18>)
 800e49c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e49e:	bf00      	nop
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	20000eac 	.word	0x20000eac

0800e4ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4ba:	4b42      	ldr	r3, [pc, #264]	; (800e5c4 <xTaskResumeAll+0x118>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10c      	bne.n	800e4dc <xTaskResumeAll+0x30>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c6:	b672      	cpsid	i
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	b662      	cpsie	i
 800e4d6:	603b      	str	r3, [r7, #0]
}
 800e4d8:	bf00      	nop
 800e4da:	e7fe      	b.n	800e4da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4dc:	f000 feee 	bl	800f2bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4e0:	4b38      	ldr	r3, [pc, #224]	; (800e5c4 <xTaskResumeAll+0x118>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	4a37      	ldr	r2, [pc, #220]	; (800e5c4 <xTaskResumeAll+0x118>)
 800e4e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4ea:	4b36      	ldr	r3, [pc, #216]	; (800e5c4 <xTaskResumeAll+0x118>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d161      	bne.n	800e5b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4f2:	4b35      	ldr	r3, [pc, #212]	; (800e5c8 <xTaskResumeAll+0x11c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d05d      	beq.n	800e5b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4fa:	e02e      	b.n	800e55a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4fc:	4b33      	ldr	r3, [pc, #204]	; (800e5cc <xTaskResumeAll+0x120>)
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3318      	adds	r3, #24
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fcad 	bl	800ce68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3304      	adds	r3, #4
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe fca8 	bl	800ce68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e51c:	2201      	movs	r2, #1
 800e51e:	409a      	lsls	r2, r3
 800e520:	4b2b      	ldr	r3, [pc, #172]	; (800e5d0 <xTaskResumeAll+0x124>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4313      	orrs	r3, r2
 800e526:	4a2a      	ldr	r2, [pc, #168]	; (800e5d0 <xTaskResumeAll+0x124>)
 800e528:	6013      	str	r3, [r2, #0]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52e:	4613      	mov	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4a27      	ldr	r2, [pc, #156]	; (800e5d4 <xTaskResumeAll+0x128>)
 800e538:	441a      	add	r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	3304      	adds	r3, #4
 800e53e:	4619      	mov	r1, r3
 800e540:	4610      	mov	r0, r2
 800e542:	f7fe fc34 	bl	800cdae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54a:	4b23      	ldr	r3, [pc, #140]	; (800e5d8 <xTaskResumeAll+0x12c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e550:	429a      	cmp	r2, r3
 800e552:	d302      	bcc.n	800e55a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e554:	4b21      	ldr	r3, [pc, #132]	; (800e5dc <xTaskResumeAll+0x130>)
 800e556:	2201      	movs	r2, #1
 800e558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e55a:	4b1c      	ldr	r3, [pc, #112]	; (800e5cc <xTaskResumeAll+0x120>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1cc      	bne.n	800e4fc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e568:	f000 fb3a 	bl	800ebe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e56c:	4b1c      	ldr	r3, [pc, #112]	; (800e5e0 <xTaskResumeAll+0x134>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d010      	beq.n	800e59a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e578:	f000 f846 	bl	800e608 <xTaskIncrementTick>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e582:	4b16      	ldr	r3, [pc, #88]	; (800e5dc <xTaskResumeAll+0x130>)
 800e584:	2201      	movs	r2, #1
 800e586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3b01      	subs	r3, #1
 800e58c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1f1      	bne.n	800e578 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e594:	4b12      	ldr	r3, [pc, #72]	; (800e5e0 <xTaskResumeAll+0x134>)
 800e596:	2200      	movs	r2, #0
 800e598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <xTaskResumeAll+0x130>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e5a6:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <xTaskResumeAll+0x138>)
 800e5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5b6:	f000 feb5 	bl	800f324 <vPortExitCritical>

	return xAlreadyYielded;
 800e5ba:	68bb      	ldr	r3, [r7, #8]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20000eac 	.word	0x20000eac
 800e5c8:	20000e84 	.word	0x20000e84
 800e5cc:	20000e44 	.word	0x20000e44
 800e5d0:	20000e8c 	.word	0x20000e8c
 800e5d4:	20000d88 	.word	0x20000d88
 800e5d8:	20000d84 	.word	0x20000d84
 800e5dc:	20000e98 	.word	0x20000e98
 800e5e0:	20000e94 	.word	0x20000e94
 800e5e4:	e000ed04 	.word	0xe000ed04

0800e5e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <xTaskGetTickCount+0x1c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5f4:	687b      	ldr	r3, [r7, #4]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	20000e88 	.word	0x20000e88

0800e608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e612:	4b4f      	ldr	r3, [pc, #316]	; (800e750 <xTaskIncrementTick+0x148>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f040 808a 	bne.w	800e730 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e61c:	4b4d      	ldr	r3, [pc, #308]	; (800e754 <xTaskIncrementTick+0x14c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3301      	adds	r3, #1
 800e622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e624:	4a4b      	ldr	r2, [pc, #300]	; (800e754 <xTaskIncrementTick+0x14c>)
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d122      	bne.n	800e676 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e630:	4b49      	ldr	r3, [pc, #292]	; (800e758 <xTaskIncrementTick+0x150>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00c      	beq.n	800e654 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63e:	b672      	cpsid	i
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	b662      	cpsie	i
 800e64e:	603b      	str	r3, [r7, #0]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <xTaskIncrementTick+0x4a>
 800e654:	4b40      	ldr	r3, [pc, #256]	; (800e758 <xTaskIncrementTick+0x150>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	60fb      	str	r3, [r7, #12]
 800e65a:	4b40      	ldr	r3, [pc, #256]	; (800e75c <xTaskIncrementTick+0x154>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a3e      	ldr	r2, [pc, #248]	; (800e758 <xTaskIncrementTick+0x150>)
 800e660:	6013      	str	r3, [r2, #0]
 800e662:	4a3e      	ldr	r2, [pc, #248]	; (800e75c <xTaskIncrementTick+0x154>)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	4b3d      	ldr	r3, [pc, #244]	; (800e760 <xTaskIncrementTick+0x158>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3301      	adds	r3, #1
 800e66e:	4a3c      	ldr	r2, [pc, #240]	; (800e760 <xTaskIncrementTick+0x158>)
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	f000 fab5 	bl	800ebe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e676:	4b3b      	ldr	r3, [pc, #236]	; (800e764 <xTaskIncrementTick+0x15c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d348      	bcc.n	800e712 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e680:	4b35      	ldr	r3, [pc, #212]	; (800e758 <xTaskIncrementTick+0x150>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d104      	bne.n	800e694 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68a:	4b36      	ldr	r3, [pc, #216]	; (800e764 <xTaskIncrementTick+0x15c>)
 800e68c:	f04f 32ff 	mov.w	r2, #4294967295
 800e690:	601a      	str	r2, [r3, #0]
					break;
 800e692:	e03e      	b.n	800e712 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e694:	4b30      	ldr	r3, [pc, #192]	; (800e758 <xTaskIncrementTick+0x150>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d203      	bcs.n	800e6b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6ac:	4a2d      	ldr	r2, [pc, #180]	; (800e764 <xTaskIncrementTick+0x15c>)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6b2:	e02e      	b.n	800e712 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fbd5 	bl	800ce68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d004      	beq.n	800e6d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	3318      	adds	r3, #24
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fbcc 	bl	800ce68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	409a      	lsls	r2, r3
 800e6d8:	4b23      	ldr	r3, [pc, #140]	; (800e768 <xTaskIncrementTick+0x160>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	4a22      	ldr	r2, [pc, #136]	; (800e768 <xTaskIncrementTick+0x160>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4a1f      	ldr	r2, [pc, #124]	; (800e76c <xTaskIncrementTick+0x164>)
 800e6f0:	441a      	add	r2, r3
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	f7fe fb58 	bl	800cdae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	4b1b      	ldr	r3, [pc, #108]	; (800e770 <xTaskIncrementTick+0x168>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	429a      	cmp	r2, r3
 800e70a:	d3b9      	bcc.n	800e680 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e710:	e7b6      	b.n	800e680 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e712:	4b17      	ldr	r3, [pc, #92]	; (800e770 <xTaskIncrementTick+0x168>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	4914      	ldr	r1, [pc, #80]	; (800e76c <xTaskIncrementTick+0x164>)
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d907      	bls.n	800e73a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e72a:	2301      	movs	r3, #1
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	e004      	b.n	800e73a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e730:	4b10      	ldr	r3, [pc, #64]	; (800e774 <xTaskIncrementTick+0x16c>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a0f      	ldr	r2, [pc, #60]	; (800e774 <xTaskIncrementTick+0x16c>)
 800e738:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e73a:	4b0f      	ldr	r3, [pc, #60]	; (800e778 <xTaskIncrementTick+0x170>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e746:	697b      	ldr	r3, [r7, #20]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20000eac 	.word	0x20000eac
 800e754:	20000e88 	.word	0x20000e88
 800e758:	20000e3c 	.word	0x20000e3c
 800e75c:	20000e40 	.word	0x20000e40
 800e760:	20000e9c 	.word	0x20000e9c
 800e764:	20000ea4 	.word	0x20000ea4
 800e768:	20000e8c 	.word	0x20000e8c
 800e76c:	20000d88 	.word	0x20000d88
 800e770:	20000d84 	.word	0x20000d84
 800e774:	20000e94 	.word	0x20000e94
 800e778:	20000e98 	.word	0x20000e98

0800e77c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b087      	sub	sp, #28
 800e780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e782:	4b2a      	ldr	r3, [pc, #168]	; (800e82c <vTaskSwitchContext+0xb0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e78a:	4b29      	ldr	r3, [pc, #164]	; (800e830 <vTaskSwitchContext+0xb4>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e790:	e046      	b.n	800e820 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e792:	4b27      	ldr	r3, [pc, #156]	; (800e830 <vTaskSwitchContext+0xb4>)
 800e794:	2200      	movs	r2, #0
 800e796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e798:	4b26      	ldr	r3, [pc, #152]	; (800e834 <vTaskSwitchContext+0xb8>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	fab3 f383 	clz	r3, r3
 800e7a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e7a6:	7afb      	ldrb	r3, [r7, #11]
 800e7a8:	f1c3 031f 	rsb	r3, r3, #31
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	4922      	ldr	r1, [pc, #136]	; (800e838 <vTaskSwitchContext+0xbc>)
 800e7b0:	697a      	ldr	r2, [r7, #20]
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	440b      	add	r3, r1
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10c      	bne.n	800e7dc <vTaskSwitchContext+0x60>
	__asm volatile
 800e7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c6:	b672      	cpsid	i
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	b662      	cpsie	i
 800e7d6:	607b      	str	r3, [r7, #4]
}
 800e7d8:	bf00      	nop
 800e7da:	e7fe      	b.n	800e7da <vTaskSwitchContext+0x5e>
 800e7dc:	697a      	ldr	r2, [r7, #20]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4a14      	ldr	r2, [pc, #80]	; (800e838 <vTaskSwitchContext+0xbc>)
 800e7e8:	4413      	add	r3, r2
 800e7ea:	613b      	str	r3, [r7, #16]
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	605a      	str	r2, [r3, #4]
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d104      	bne.n	800e80c <vTaskSwitchContext+0x90>
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	605a      	str	r2, [r3, #4]
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	4a0a      	ldr	r2, [pc, #40]	; (800e83c <vTaskSwitchContext+0xc0>)
 800e814:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e816:	4b09      	ldr	r3, [pc, #36]	; (800e83c <vTaskSwitchContext+0xc0>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	334c      	adds	r3, #76	; 0x4c
 800e81c:	4a08      	ldr	r2, [pc, #32]	; (800e840 <vTaskSwitchContext+0xc4>)
 800e81e:	6013      	str	r3, [r2, #0]
}
 800e820:	bf00      	nop
 800e822:	371c      	adds	r7, #28
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	20000eac 	.word	0x20000eac
 800e830:	20000e98 	.word	0x20000e98
 800e834:	20000e8c 	.word	0x20000e8c
 800e838:	20000d88 	.word	0x20000d88
 800e83c:	20000d84 	.word	0x20000d84
 800e840:	200000d8 	.word	0x200000d8

0800e844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10c      	bne.n	800e86e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e858:	b672      	cpsid	i
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	b662      	cpsie	i
 800e868:	60fb      	str	r3, [r7, #12]
}
 800e86a:	bf00      	nop
 800e86c:	e7fe      	b.n	800e86c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e86e:	4b07      	ldr	r3, [pc, #28]	; (800e88c <vTaskPlaceOnEventList+0x48>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3318      	adds	r3, #24
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7fe fabd 	bl	800cdf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e87c:	2101      	movs	r1, #1
 800e87e:	6838      	ldr	r0, [r7, #0]
 800e880:	f000 fba8 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
}
 800e884:	bf00      	nop
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	20000d84 	.word	0x20000d84

0800e890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10c      	bne.n	800e8c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8aa:	b672      	cpsid	i
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	b662      	cpsie	i
 800e8ba:	60fb      	str	r3, [r7, #12]
}
 800e8bc:	bf00      	nop
 800e8be:	e7fe      	b.n	800e8be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	3318      	adds	r3, #24
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe facf 	bl	800ce68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ca:	4b1d      	ldr	r3, [pc, #116]	; (800e940 <xTaskRemoveFromEventList+0xb0>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d11c      	bne.n	800e90c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe fac6 	bl	800ce68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	409a      	lsls	r2, r3
 800e8e4:	4b17      	ldr	r3, [pc, #92]	; (800e944 <xTaskRemoveFromEventList+0xb4>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	4a16      	ldr	r2, [pc, #88]	; (800e944 <xTaskRemoveFromEventList+0xb4>)
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4a13      	ldr	r2, [pc, #76]	; (800e948 <xTaskRemoveFromEventList+0xb8>)
 800e8fc:	441a      	add	r2, r3
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	3304      	adds	r3, #4
 800e902:	4619      	mov	r1, r3
 800e904:	4610      	mov	r0, r2
 800e906:	f7fe fa52 	bl	800cdae <vListInsertEnd>
 800e90a:	e005      	b.n	800e918 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	3318      	adds	r3, #24
 800e910:	4619      	mov	r1, r3
 800e912:	480e      	ldr	r0, [pc, #56]	; (800e94c <xTaskRemoveFromEventList+0xbc>)
 800e914:	f7fe fa4b 	bl	800cdae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91c:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <xTaskRemoveFromEventList+0xc0>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e922:	429a      	cmp	r2, r3
 800e924:	d905      	bls.n	800e932 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e926:	2301      	movs	r3, #1
 800e928:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <xTaskRemoveFromEventList+0xc4>)
 800e92c:	2201      	movs	r2, #1
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	e001      	b.n	800e936 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e936:	697b      	ldr	r3, [r7, #20]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20000eac 	.word	0x20000eac
 800e944:	20000e8c 	.word	0x20000e8c
 800e948:	20000d88 	.word	0x20000d88
 800e94c:	20000e44 	.word	0x20000e44
 800e950:	20000d84 	.word	0x20000d84
 800e954:	20000e98 	.word	0x20000e98

0800e958 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e960:	4b06      	ldr	r3, [pc, #24]	; (800e97c <vTaskInternalSetTimeOutState+0x24>)
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e968:	4b05      	ldr	r3, [pc, #20]	; (800e980 <vTaskInternalSetTimeOutState+0x28>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	605a      	str	r2, [r3, #4]
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	20000e9c 	.word	0x20000e9c
 800e980:	20000e88 	.word	0x20000e88

0800e984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b088      	sub	sp, #32
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10c      	bne.n	800e9ae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e998:	b672      	cpsid	i
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	b662      	cpsie	i
 800e9a8:	613b      	str	r3, [r7, #16]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10c      	bne.n	800e9ce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b8:	b672      	cpsid	i
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	b662      	cpsie	i
 800e9c8:	60fb      	str	r3, [r7, #12]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e9ce:	f000 fc75 	bl	800f2bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9d2:	4b1d      	ldr	r3, [pc, #116]	; (800ea48 <xTaskCheckForTimeOut+0xc4>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	69ba      	ldr	r2, [r7, #24]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d102      	bne.n	800e9f2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	61fb      	str	r3, [r7, #28]
 800e9f0:	e023      	b.n	800ea3a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	4b15      	ldr	r3, [pc, #84]	; (800ea4c <xTaskCheckForTimeOut+0xc8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d007      	beq.n	800ea0e <xTaskCheckForTimeOut+0x8a>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d302      	bcc.n	800ea0e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e015      	b.n	800ea3a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d20b      	bcs.n	800ea30 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	1ad2      	subs	r2, r2, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ff97 	bl	800e958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61fb      	str	r3, [r7, #28]
 800ea2e:	e004      	b.n	800ea3a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea3a:	f000 fc73 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800ea3e:	69fb      	ldr	r3, [r7, #28]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3720      	adds	r7, #32
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20000e88 	.word	0x20000e88
 800ea4c:	20000e9c 	.word	0x20000e9c

0800ea50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea54:	4b03      	ldr	r3, [pc, #12]	; (800ea64 <vTaskMissedYield+0x14>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	20000e98 	.word	0x20000e98

0800ea68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea70:	f000 f852 	bl	800eb18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea74:	4b06      	ldr	r3, [pc, #24]	; (800ea90 <prvIdleTask+0x28>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d9f9      	bls.n	800ea70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea7c:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <prvIdleTask+0x2c>)
 800ea7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	f3bf 8f4f 	dsb	sy
 800ea88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea8c:	e7f0      	b.n	800ea70 <prvIdleTask+0x8>
 800ea8e:	bf00      	nop
 800ea90:	20000d88 	.word	0x20000d88
 800ea94:	e000ed04 	.word	0xe000ed04

0800ea98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	e00c      	b.n	800eabe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4a12      	ldr	r2, [pc, #72]	; (800eaf8 <prvInitialiseTaskLists+0x60>)
 800eab0:	4413      	add	r3, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fe f94e 	bl	800cd54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3301      	adds	r3, #1
 800eabc:	607b      	str	r3, [r7, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d9ef      	bls.n	800eaa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eac4:	480d      	ldr	r0, [pc, #52]	; (800eafc <prvInitialiseTaskLists+0x64>)
 800eac6:	f7fe f945 	bl	800cd54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaca:	480d      	ldr	r0, [pc, #52]	; (800eb00 <prvInitialiseTaskLists+0x68>)
 800eacc:	f7fe f942 	bl	800cd54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ead0:	480c      	ldr	r0, [pc, #48]	; (800eb04 <prvInitialiseTaskLists+0x6c>)
 800ead2:	f7fe f93f 	bl	800cd54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ead6:	480c      	ldr	r0, [pc, #48]	; (800eb08 <prvInitialiseTaskLists+0x70>)
 800ead8:	f7fe f93c 	bl	800cd54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eadc:	480b      	ldr	r0, [pc, #44]	; (800eb0c <prvInitialiseTaskLists+0x74>)
 800eade:	f7fe f939 	bl	800cd54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <prvInitialiseTaskLists+0x78>)
 800eae4:	4a05      	ldr	r2, [pc, #20]	; (800eafc <prvInitialiseTaskLists+0x64>)
 800eae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eae8:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <prvInitialiseTaskLists+0x7c>)
 800eaea:	4a05      	ldr	r2, [pc, #20]	; (800eb00 <prvInitialiseTaskLists+0x68>)
 800eaec:	601a      	str	r2, [r3, #0]
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20000d88 	.word	0x20000d88
 800eafc:	20000e14 	.word	0x20000e14
 800eb00:	20000e28 	.word	0x20000e28
 800eb04:	20000e44 	.word	0x20000e44
 800eb08:	20000e58 	.word	0x20000e58
 800eb0c:	20000e70 	.word	0x20000e70
 800eb10:	20000e3c 	.word	0x20000e3c
 800eb14:	20000e40 	.word	0x20000e40

0800eb18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb1e:	e019      	b.n	800eb54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb20:	f000 fbcc 	bl	800f2bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb24:	4b10      	ldr	r3, [pc, #64]	; (800eb68 <prvCheckTasksWaitingTermination+0x50>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe f999 	bl	800ce68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4a0b      	ldr	r2, [pc, #44]	; (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb40:	4b0b      	ldr	r3, [pc, #44]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	4a0a      	ldr	r2, [pc, #40]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb4a:	f000 fbeb 	bl	800f324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f810 	bl	800eb74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb54:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e1      	bne.n	800eb20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb5c:	bf00      	nop
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20000e58 	.word	0x20000e58
 800eb6c:	20000e84 	.word	0x20000e84
 800eb70:	20000e6c 	.word	0x20000e6c

0800eb74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	334c      	adds	r3, #76	; 0x4c
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 ff8f 	bl	800faa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d108      	bne.n	800eba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 fd87 	bl	800f6a8 <vPortFree>
				vPortFree( pxTCB );
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fd84 	bl	800f6a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eba0:	e01a      	b.n	800ebd8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d103      	bne.n	800ebb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 fd7b 	bl	800f6a8 <vPortFree>
	}
 800ebb2:	e011      	b.n	800ebd8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d00c      	beq.n	800ebd8 <prvDeleteTCB+0x64>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	b672      	cpsid	i
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	b662      	cpsie	i
 800ebd2:	60fb      	str	r3, [r7, #12]
}
 800ebd4:	bf00      	nop
 800ebd6:	e7fe      	b.n	800ebd6 <prvDeleteTCB+0x62>
	}
 800ebd8:	bf00      	nop
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <prvResetNextTaskUnblockTime+0x38>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <prvResetNextTaskUnblockTime+0x3c>)
 800ebf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebf8:	e008      	b.n	800ec0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <prvResetNextTaskUnblockTime+0x38>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a04      	ldr	r2, [pc, #16]	; (800ec1c <prvResetNextTaskUnblockTime+0x3c>)
 800ec0a:	6013      	str	r3, [r2, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	20000e3c 	.word	0x20000e3c
 800ec1c:	20000ea4 	.word	0x20000ea4

0800ec20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec26:	4b0b      	ldr	r3, [pc, #44]	; (800ec54 <xTaskGetSchedulerState+0x34>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d102      	bne.n	800ec34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	607b      	str	r3, [r7, #4]
 800ec32:	e008      	b.n	800ec46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec34:	4b08      	ldr	r3, [pc, #32]	; (800ec58 <xTaskGetSchedulerState+0x38>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d102      	bne.n	800ec42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	607b      	str	r3, [r7, #4]
 800ec40:	e001      	b.n	800ec46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec42:	2300      	movs	r3, #0
 800ec44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec46:	687b      	ldr	r3, [r7, #4]
	}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	20000e90 	.word	0x20000e90
 800ec58:	20000eac 	.word	0x20000eac

0800ec5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d069      	beq.n	800ed46 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec76:	4b36      	ldr	r3, [pc, #216]	; (800ed50 <xTaskPriorityInherit+0xf4>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d259      	bcs.n	800ed34 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	db06      	blt.n	800ec96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec88:	4b31      	ldr	r3, [pc, #196]	; (800ed50 <xTaskPriorityInherit+0xf4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8e:	f1c3 0207 	rsb	r2, r3, #7
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6959      	ldr	r1, [r3, #20]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4a2b      	ldr	r2, [pc, #172]	; (800ed54 <xTaskPriorityInherit+0xf8>)
 800eca8:	4413      	add	r3, r2
 800ecaa:	4299      	cmp	r1, r3
 800ecac:	d13a      	bne.n	800ed24 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe f8d8 	bl	800ce68 <uxListRemove>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d115      	bne.n	800ecea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc2:	4924      	ldr	r1, [pc, #144]	; (800ed54 <xTaskPriorityInherit+0xf8>)
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4413      	add	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	440b      	add	r3, r1
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <xTaskPriorityInherit+0x8e>
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd8:	2201      	movs	r2, #1
 800ecda:	fa02 f303 	lsl.w	r3, r2, r3
 800ecde:	43da      	mvns	r2, r3
 800ece0:	4b1d      	ldr	r3, [pc, #116]	; (800ed58 <xTaskPriorityInherit+0xfc>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4013      	ands	r3, r2
 800ece6:	4a1c      	ldr	r2, [pc, #112]	; (800ed58 <xTaskPriorityInherit+0xfc>)
 800ece8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecea:	4b19      	ldr	r3, [pc, #100]	; (800ed50 <xTaskPriorityInherit+0xf4>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	409a      	lsls	r2, r3
 800ecfc:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <xTaskPriorityInherit+0xfc>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	4a15      	ldr	r2, [pc, #84]	; (800ed58 <xTaskPriorityInherit+0xfc>)
 800ed04:	6013      	str	r3, [r2, #0]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4a10      	ldr	r2, [pc, #64]	; (800ed54 <xTaskPriorityInherit+0xf8>)
 800ed14:	441a      	add	r2, r3
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	3304      	adds	r3, #4
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	f7fe f846 	bl	800cdae <vListInsertEnd>
 800ed22:	e004      	b.n	800ed2e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed24:	4b0a      	ldr	r3, [pc, #40]	; (800ed50 <xTaskPriorityInherit+0xf4>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	60fb      	str	r3, [r7, #12]
 800ed32:	e008      	b.n	800ed46 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed38:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <xTaskPriorityInherit+0xf4>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d201      	bcs.n	800ed46 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed42:	2301      	movs	r3, #1
 800ed44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed46:	68fb      	ldr	r3, [r7, #12]
	}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20000d84 	.word	0x20000d84
 800ed54:	20000d88 	.word	0x20000d88
 800ed58:	20000e8c 	.word	0x20000e8c

0800ed5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d072      	beq.n	800ee58 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed72:	4b3c      	ldr	r3, [pc, #240]	; (800ee64 <xTaskPriorityDisinherit+0x108>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d00c      	beq.n	800ed96 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	b672      	cpsid	i
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	b662      	cpsie	i
 800ed90:	60fb      	str	r3, [r7, #12]
}
 800ed92:	bf00      	nop
 800ed94:	e7fe      	b.n	800ed94 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10c      	bne.n	800edb8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda2:	b672      	cpsid	i
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	b662      	cpsie	i
 800edb2:	60bb      	str	r3, [r7, #8]
}
 800edb4:	bf00      	nop
 800edb6:	e7fe      	b.n	800edb6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edbc:	1e5a      	subs	r2, r3, #1
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edca:	429a      	cmp	r2, r3
 800edcc:	d044      	beq.n	800ee58 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d140      	bne.n	800ee58 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	3304      	adds	r3, #4
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe f844 	bl	800ce68 <uxListRemove>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d115      	bne.n	800ee12 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edea:	491f      	ldr	r1, [pc, #124]	; (800ee68 <xTaskPriorityDisinherit+0x10c>)
 800edec:	4613      	mov	r3, r2
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	4413      	add	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	440b      	add	r3, r1
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10a      	bne.n	800ee12 <xTaskPriorityDisinherit+0xb6>
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	2201      	movs	r2, #1
 800ee02:	fa02 f303 	lsl.w	r3, r2, r3
 800ee06:	43da      	mvns	r2, r3
 800ee08:	4b18      	ldr	r3, [pc, #96]	; (800ee6c <xTaskPriorityDisinherit+0x110>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	4a17      	ldr	r2, [pc, #92]	; (800ee6c <xTaskPriorityDisinherit+0x110>)
 800ee10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1e:	f1c3 0207 	rsb	r2, r3, #7
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	409a      	lsls	r2, r3
 800ee2e:	4b0f      	ldr	r3, [pc, #60]	; (800ee6c <xTaskPriorityDisinherit+0x110>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4313      	orrs	r3, r2
 800ee34:	4a0d      	ldr	r2, [pc, #52]	; (800ee6c <xTaskPriorityDisinherit+0x110>)
 800ee36:	6013      	str	r3, [r2, #0]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4a08      	ldr	r2, [pc, #32]	; (800ee68 <xTaskPriorityDisinherit+0x10c>)
 800ee46:	441a      	add	r2, r3
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fd ffad 	bl	800cdae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee54:	2301      	movs	r3, #1
 800ee56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee58:	697b      	ldr	r3, [r7, #20]
	}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20000d84 	.word	0x20000d84
 800ee68:	20000d88 	.word	0x20000d88
 800ee6c:	20000e8c 	.word	0x20000e8c

0800ee70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 8087 	beq.w	800ef98 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10c      	bne.n	800eeac <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	b672      	cpsid	i
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	b662      	cpsie	i
 800eea6:	60fb      	str	r3, [r7, #12]
}
 800eea8:	bf00      	nop
 800eeaa:	e7fe      	b.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d902      	bls.n	800eebc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	61fb      	str	r3, [r7, #28]
 800eeba:	e002      	b.n	800eec2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eec0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec6:	69fa      	ldr	r2, [r7, #28]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d065      	beq.n	800ef98 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eed0:	697a      	ldr	r2, [r7, #20]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d160      	bne.n	800ef98 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eed6:	4b32      	ldr	r3, [pc, #200]	; (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	69ba      	ldr	r2, [r7, #24]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d10c      	bne.n	800eefa <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	b672      	cpsid	i
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	b662      	cpsie	i
 800eef4:	60bb      	str	r3, [r7, #8]
}
 800eef6:	bf00      	nop
 800eef8:	e7fe      	b.n	800eef8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	69fa      	ldr	r2, [r7, #28]
 800ef04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	699b      	ldr	r3, [r3, #24]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	db04      	blt.n	800ef18 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	f1c3 0207 	rsb	r2, r3, #7
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	6959      	ldr	r1, [r3, #20]
 800ef1c:	693a      	ldr	r2, [r7, #16]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	4413      	add	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4a1f      	ldr	r2, [pc, #124]	; (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef28:	4413      	add	r3, r2
 800ef2a:	4299      	cmp	r1, r3
 800ef2c:	d134      	bne.n	800ef98 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	3304      	adds	r3, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd ff98 	bl	800ce68 <uxListRemove>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d115      	bne.n	800ef6a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef42:	4918      	ldr	r1, [pc, #96]	; (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	440b      	add	r3, r1
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10a      	bne.n	800ef6a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef58:	2201      	movs	r2, #1
 800ef5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef5e:	43da      	mvns	r2, r3
 800ef60:	4b11      	ldr	r3, [pc, #68]	; (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4013      	ands	r3, r2
 800ef66:	4a10      	ldr	r2, [pc, #64]	; (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6e:	2201      	movs	r2, #1
 800ef70:	409a      	lsls	r2, r3
 800ef72:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	4a0b      	ldr	r2, [pc, #44]	; (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef80:	4613      	mov	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4a06      	ldr	r2, [pc, #24]	; (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef8a:	441a      	add	r2, r3
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	4619      	mov	r1, r3
 800ef92:	4610      	mov	r0, r2
 800ef94:	f7fd ff0b 	bl	800cdae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef98:	bf00      	nop
 800ef9a:	3720      	adds	r7, #32
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20000d84 	.word	0x20000d84
 800efa4:	20000d88 	.word	0x20000d88
 800efa8:	20000e8c 	.word	0x20000e8c

0800efac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efac:	b480      	push	{r7}
 800efae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efb0:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d004      	beq.n	800efc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efb8:	4b05      	ldr	r3, [pc, #20]	; (800efd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800efbe:	3201      	adds	r2, #1
 800efc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800efc2:	4b03      	ldr	r3, [pc, #12]	; (800efd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800efc4:	681b      	ldr	r3, [r3, #0]
	}
 800efc6:	4618      	mov	r0, r3
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20000d84 	.word	0x20000d84

0800efd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efde:	4b29      	ldr	r3, [pc, #164]	; (800f084 <prvAddCurrentTaskToDelayedList+0xb0>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efe4:	4b28      	ldr	r3, [pc, #160]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3304      	adds	r3, #4
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd ff3c 	bl	800ce68 <uxListRemove>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10b      	bne.n	800f00e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eff6:	4b24      	ldr	r3, [pc, #144]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800effc:	2201      	movs	r2, #1
 800effe:	fa02 f303 	lsl.w	r3, r2, r3
 800f002:	43da      	mvns	r2, r3
 800f004:	4b21      	ldr	r3, [pc, #132]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4013      	ands	r3, r2
 800f00a:	4a20      	ldr	r2, [pc, #128]	; (800f08c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f00c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f014:	d10a      	bne.n	800f02c <prvAddCurrentTaskToDelayedList+0x58>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d007      	beq.n	800f02c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f01c:	4b1a      	ldr	r3, [pc, #104]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	3304      	adds	r3, #4
 800f022:	4619      	mov	r1, r3
 800f024:	481a      	ldr	r0, [pc, #104]	; (800f090 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f026:	f7fd fec2 	bl	800cdae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f02a:	e026      	b.n	800f07a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4413      	add	r3, r2
 800f032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f034:	4b14      	ldr	r3, [pc, #80]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	429a      	cmp	r2, r3
 800f042:	d209      	bcs.n	800f058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f044:	4b13      	ldr	r3, [pc, #76]	; (800f094 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3304      	adds	r3, #4
 800f04e:	4619      	mov	r1, r3
 800f050:	4610      	mov	r0, r2
 800f052:	f7fd fed0 	bl	800cdf6 <vListInsert>
}
 800f056:	e010      	b.n	800f07a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f058:	4b0f      	ldr	r3, [pc, #60]	; (800f098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	3304      	adds	r3, #4
 800f062:	4619      	mov	r1, r3
 800f064:	4610      	mov	r0, r2
 800f066:	f7fd fec6 	bl	800cdf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f06a:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	429a      	cmp	r2, r3
 800f072:	d202      	bcs.n	800f07a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f074:	4a09      	ldr	r2, [pc, #36]	; (800f09c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6013      	str	r3, [r2, #0]
}
 800f07a:	bf00      	nop
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	20000e88 	.word	0x20000e88
 800f088:	20000d84 	.word	0x20000d84
 800f08c:	20000e8c 	.word	0x20000e8c
 800f090:	20000e70 	.word	0x20000e70
 800f094:	20000e40 	.word	0x20000e40
 800f098:	20000e3c 	.word	0x20000e3c
 800f09c:	20000ea4 	.word	0x20000ea4

0800f0a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3b04      	subs	r3, #4
 800f0b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3b04      	subs	r3, #4
 800f0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	f023 0201 	bic.w	r2, r3, #1
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3b04      	subs	r3, #4
 800f0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0d0:	4a0c      	ldr	r2, [pc, #48]	; (800f104 <pxPortInitialiseStack+0x64>)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	3b14      	subs	r3, #20
 800f0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3b04      	subs	r3, #4
 800f0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f06f 0202 	mvn.w	r2, #2
 800f0ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	3b20      	subs	r3, #32
 800f0f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	0800f109 	.word	0x0800f109

0800f108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f112:	4b14      	ldr	r3, [pc, #80]	; (800f164 <prvTaskExitError+0x5c>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11a:	d00c      	beq.n	800f136 <prvTaskExitError+0x2e>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	b672      	cpsid	i
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	b662      	cpsie	i
 800f130:	60fb      	str	r3, [r7, #12]
}
 800f132:	bf00      	nop
 800f134:	e7fe      	b.n	800f134 <prvTaskExitError+0x2c>
	__asm volatile
 800f136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13a:	b672      	cpsid	i
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	b662      	cpsie	i
 800f14a:	60bb      	str	r3, [r7, #8]
}
 800f14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f14e:	bf00      	nop
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d0fc      	beq.n	800f150 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	200000d4 	.word	0x200000d4
	...

0800f170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f170:	4b07      	ldr	r3, [pc, #28]	; (800f190 <pxCurrentTCBConst2>)
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	6808      	ldr	r0, [r1, #0]
 800f176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17a:	f380 8809 	msr	PSP, r0
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8811 	msr	BASEPRI, r0
 800f18a:	4770      	bx	lr
 800f18c:	f3af 8000 	nop.w

0800f190 <pxCurrentTCBConst2>:
 800f190:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop

0800f198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f198:	4808      	ldr	r0, [pc, #32]	; (800f1bc <prvPortStartFirstTask+0x24>)
 800f19a:	6800      	ldr	r0, [r0, #0]
 800f19c:	6800      	ldr	r0, [r0, #0]
 800f19e:	f380 8808 	msr	MSP, r0
 800f1a2:	f04f 0000 	mov.w	r0, #0
 800f1a6:	f380 8814 	msr	CONTROL, r0
 800f1aa:	b662      	cpsie	i
 800f1ac:	b661      	cpsie	f
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	df00      	svc	0
 800f1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1ba:	bf00      	nop
 800f1bc:	e000ed08 	.word	0xe000ed08

0800f1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1c6:	4b37      	ldr	r3, [pc, #220]	; (800f2a4 <xPortStartScheduler+0xe4>)
 800f1c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	22ff      	movs	r2, #255	; 0xff
 800f1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	4b2f      	ldr	r3, [pc, #188]	; (800f2a8 <xPortStartScheduler+0xe8>)
 800f1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ee:	4b2f      	ldr	r3, [pc, #188]	; (800f2ac <xPortStartScheduler+0xec>)
 800f1f0:	2207      	movs	r2, #7
 800f1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1f4:	e009      	b.n	800f20a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f1f6:	4b2d      	ldr	r3, [pc, #180]	; (800f2ac <xPortStartScheduler+0xec>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	4a2b      	ldr	r2, [pc, #172]	; (800f2ac <xPortStartScheduler+0xec>)
 800f1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f212:	2b80      	cmp	r3, #128	; 0x80
 800f214:	d0ef      	beq.n	800f1f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f216:	4b25      	ldr	r3, [pc, #148]	; (800f2ac <xPortStartScheduler+0xec>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f1c3 0307 	rsb	r3, r3, #7
 800f21e:	2b04      	cmp	r3, #4
 800f220:	d00c      	beq.n	800f23c <xPortStartScheduler+0x7c>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	b672      	cpsid	i
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	b662      	cpsie	i
 800f236:	60bb      	str	r3, [r7, #8]
}
 800f238:	bf00      	nop
 800f23a:	e7fe      	b.n	800f23a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f23c:	4b1b      	ldr	r3, [pc, #108]	; (800f2ac <xPortStartScheduler+0xec>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	021b      	lsls	r3, r3, #8
 800f242:	4a1a      	ldr	r2, [pc, #104]	; (800f2ac <xPortStartScheduler+0xec>)
 800f244:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f246:	4b19      	ldr	r3, [pc, #100]	; (800f2ac <xPortStartScheduler+0xec>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f24e:	4a17      	ldr	r2, [pc, #92]	; (800f2ac <xPortStartScheduler+0xec>)
 800f250:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	b2da      	uxtb	r2, r3
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f25a:	4b15      	ldr	r3, [pc, #84]	; (800f2b0 <xPortStartScheduler+0xf0>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a14      	ldr	r2, [pc, #80]	; (800f2b0 <xPortStartScheduler+0xf0>)
 800f260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f264:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f266:	4b12      	ldr	r3, [pc, #72]	; (800f2b0 <xPortStartScheduler+0xf0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4a11      	ldr	r2, [pc, #68]	; (800f2b0 <xPortStartScheduler+0xf0>)
 800f26c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f270:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f272:	f000 f8dd 	bl	800f430 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f276:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <xPortStartScheduler+0xf4>)
 800f278:	2200      	movs	r2, #0
 800f27a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f27c:	f000 f8fc 	bl	800f478 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f280:	4b0d      	ldr	r3, [pc, #52]	; (800f2b8 <xPortStartScheduler+0xf8>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a0c      	ldr	r2, [pc, #48]	; (800f2b8 <xPortStartScheduler+0xf8>)
 800f286:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f28a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f28c:	f7ff ff84 	bl	800f198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f290:	f7ff fa74 	bl	800e77c <vTaskSwitchContext>
	prvTaskExitError();
 800f294:	f7ff ff38 	bl	800f108 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	e000e400 	.word	0xe000e400
 800f2a8:	20000eb0 	.word	0x20000eb0
 800f2ac:	20000eb4 	.word	0x20000eb4
 800f2b0:	e000ed20 	.word	0xe000ed20
 800f2b4:	200000d4 	.word	0x200000d4
 800f2b8:	e000ef34 	.word	0xe000ef34

0800f2bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	b672      	cpsid	i
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	b662      	cpsie	i
 800f2d6:	607b      	str	r3, [r7, #4]
}
 800f2d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2da:	4b10      	ldr	r3, [pc, #64]	; (800f31c <vPortEnterCritical+0x60>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	4a0e      	ldr	r2, [pc, #56]	; (800f31c <vPortEnterCritical+0x60>)
 800f2e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2e4:	4b0d      	ldr	r3, [pc, #52]	; (800f31c <vPortEnterCritical+0x60>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d111      	bne.n	800f310 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2ec:	4b0c      	ldr	r3, [pc, #48]	; (800f320 <vPortEnterCritical+0x64>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00c      	beq.n	800f310 <vPortEnterCritical+0x54>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	b672      	cpsid	i
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	b662      	cpsie	i
 800f30a:	603b      	str	r3, [r7, #0]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <vPortEnterCritical+0x52>
	}
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	200000d4 	.word	0x200000d4
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f32a:	4b13      	ldr	r3, [pc, #76]	; (800f378 <vPortExitCritical+0x54>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10c      	bne.n	800f34c <vPortExitCritical+0x28>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	b672      	cpsid	i
 800f338:	f383 8811 	msr	BASEPRI, r3
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f3bf 8f4f 	dsb	sy
 800f344:	b662      	cpsie	i
 800f346:	607b      	str	r3, [r7, #4]
}
 800f348:	bf00      	nop
 800f34a:	e7fe      	b.n	800f34a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f34c:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <vPortExitCritical+0x54>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	3b01      	subs	r3, #1
 800f352:	4a09      	ldr	r2, [pc, #36]	; (800f378 <vPortExitCritical+0x54>)
 800f354:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f356:	4b08      	ldr	r3, [pc, #32]	; (800f378 <vPortExitCritical+0x54>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d105      	bne.n	800f36a <vPortExitCritical+0x46>
 800f35e:	2300      	movs	r3, #0
 800f360:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	f383 8811 	msr	BASEPRI, r3
}
 800f368:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f36a:	bf00      	nop
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	200000d4 	.word	0x200000d4
 800f37c:	00000000 	.word	0x00000000

0800f380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f380:	f3ef 8009 	mrs	r0, PSP
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <pxCurrentTCBConst>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	f01e 0f10 	tst.w	lr, #16
 800f390:	bf08      	it	eq
 800f392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	6010      	str	r0, [r2, #0]
 800f39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3a4:	b672      	cpsid	i
 800f3a6:	f380 8811 	msr	BASEPRI, r0
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	b662      	cpsie	i
 800f3b4:	f7ff f9e2 	bl	800e77c <vTaskSwitchContext>
 800f3b8:	f04f 0000 	mov.w	r0, #0
 800f3bc:	f380 8811 	msr	BASEPRI, r0
 800f3c0:	bc09      	pop	{r0, r3}
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	6808      	ldr	r0, [r1, #0]
 800f3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ca:	f01e 0f10 	tst.w	lr, #16
 800f3ce:	bf08      	it	eq
 800f3d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3d4:	f380 8809 	msr	PSP, r0
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop

0800f3e0 <pxCurrentTCBConst>:
 800f3e0:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3e4:	bf00      	nop
 800f3e6:	bf00      	nop

0800f3e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f2:	b672      	cpsid	i
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	b662      	cpsie	i
 800f402:	607b      	str	r3, [r7, #4]
}
 800f404:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f406:	f7ff f8ff 	bl	800e608 <xTaskIncrementTick>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d003      	beq.n	800f418 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f410:	4b06      	ldr	r3, [pc, #24]	; (800f42c <SysTick_Handler+0x44>)
 800f412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f416:	601a      	str	r2, [r3, #0]
 800f418:	2300      	movs	r3, #0
 800f41a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	f383 8811 	msr	BASEPRI, r3
}
 800f422:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	e000ed04 	.word	0xe000ed04

0800f430 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f430:	b480      	push	{r7}
 800f432:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f434:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <vPortSetupTimerInterrupt+0x34>)
 800f436:	2200      	movs	r2, #0
 800f438:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <vPortSetupTimerInterrupt+0x38>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <vPortSetupTimerInterrupt+0x3c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a0a      	ldr	r2, [pc, #40]	; (800f470 <vPortSetupTimerInterrupt+0x40>)
 800f446:	fba2 2303 	umull	r2, r3, r2, r3
 800f44a:	099b      	lsrs	r3, r3, #6
 800f44c:	4a09      	ldr	r2, [pc, #36]	; (800f474 <vPortSetupTimerInterrupt+0x44>)
 800f44e:	3b01      	subs	r3, #1
 800f450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f452:	4b04      	ldr	r3, [pc, #16]	; (800f464 <vPortSetupTimerInterrupt+0x34>)
 800f454:	2207      	movs	r2, #7
 800f456:	601a      	str	r2, [r3, #0]
}
 800f458:	bf00      	nop
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	e000e010 	.word	0xe000e010
 800f468:	e000e018 	.word	0xe000e018
 800f46c:	200000c8 	.word	0x200000c8
 800f470:	10624dd3 	.word	0x10624dd3
 800f474:	e000e014 	.word	0xe000e014

0800f478 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f478:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f488 <vPortEnableVFP+0x10>
 800f47c:	6801      	ldr	r1, [r0, #0]
 800f47e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f482:	6001      	str	r1, [r0, #0]
 800f484:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f486:	bf00      	nop
 800f488:	e000ed88 	.word	0xe000ed88

0800f48c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f492:	f3ef 8305 	mrs	r3, IPSR
 800f496:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b0f      	cmp	r3, #15
 800f49c:	d916      	bls.n	800f4cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f49e:	4a19      	ldr	r2, [pc, #100]	; (800f504 <vPortValidateInterruptPriority+0x78>)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4a8:	4b17      	ldr	r3, [pc, #92]	; (800f508 <vPortValidateInterruptPriority+0x7c>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	7afa      	ldrb	r2, [r7, #11]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d20c      	bcs.n	800f4cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b6:	b672      	cpsid	i
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	b662      	cpsie	i
 800f4c6:	607b      	str	r3, [r7, #4]
}
 800f4c8:	bf00      	nop
 800f4ca:	e7fe      	b.n	800f4ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4cc:	4b0f      	ldr	r3, [pc, #60]	; (800f50c <vPortValidateInterruptPriority+0x80>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4d4:	4b0e      	ldr	r3, [pc, #56]	; (800f510 <vPortValidateInterruptPriority+0x84>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d90c      	bls.n	800f4f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e0:	b672      	cpsid	i
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	b662      	cpsie	i
 800f4f0:	603b      	str	r3, [r7, #0]
}
 800f4f2:	bf00      	nop
 800f4f4:	e7fe      	b.n	800f4f4 <vPortValidateInterruptPriority+0x68>
	}
 800f4f6:	bf00      	nop
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	e000e3f0 	.word	0xe000e3f0
 800f508:	20000eb0 	.word	0x20000eb0
 800f50c:	e000ed0c 	.word	0xe000ed0c
 800f510:	20000eb4 	.word	0x20000eb4

0800f514 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f51c:	2300      	movs	r3, #0
 800f51e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f520:	f7fe ffb6 	bl	800e490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f524:	4b5b      	ldr	r3, [pc, #364]	; (800f694 <pvPortMalloc+0x180>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d101      	bne.n	800f530 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f52c:	f000 f91a 	bl	800f764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f530:	4b59      	ldr	r3, [pc, #356]	; (800f698 <pvPortMalloc+0x184>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4013      	ands	r3, r2
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f040 8092 	bne.w	800f662 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d01f      	beq.n	800f584 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f544:	2208      	movs	r2, #8
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4413      	add	r3, r2
 800f54a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f003 0307 	and.w	r3, r3, #7
 800f552:	2b00      	cmp	r3, #0
 800f554:	d016      	beq.n	800f584 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f023 0307 	bic.w	r3, r3, #7
 800f55c:	3308      	adds	r3, #8
 800f55e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f003 0307 	and.w	r3, r3, #7
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00c      	beq.n	800f584 <pvPortMalloc+0x70>
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	b672      	cpsid	i
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	b662      	cpsie	i
 800f57e:	617b      	str	r3, [r7, #20]
}
 800f580:	bf00      	nop
 800f582:	e7fe      	b.n	800f582 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d06b      	beq.n	800f662 <pvPortMalloc+0x14e>
 800f58a:	4b44      	ldr	r3, [pc, #272]	; (800f69c <pvPortMalloc+0x188>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	d866      	bhi.n	800f662 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f594:	4b42      	ldr	r3, [pc, #264]	; (800f6a0 <pvPortMalloc+0x18c>)
 800f596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f598:	4b41      	ldr	r3, [pc, #260]	; (800f6a0 <pvPortMalloc+0x18c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59e:	e004      	b.n	800f5aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d903      	bls.n	800f5bc <pvPortMalloc+0xa8>
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1f1      	bne.n	800f5a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5bc:	4b35      	ldr	r3, [pc, #212]	; (800f694 <pvPortMalloc+0x180>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d04d      	beq.n	800f662 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5c6:	6a3b      	ldr	r3, [r7, #32]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2208      	movs	r2, #8
 800f5cc:	4413      	add	r3, r2
 800f5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	2308      	movs	r3, #8
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d921      	bls.n	800f62c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f003 0307 	and.w	r3, r3, #7
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00c      	beq.n	800f614 <pvPortMalloc+0x100>
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	b672      	cpsid	i
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	b662      	cpsie	i
 800f60e:	613b      	str	r3, [r7, #16]
}
 800f610:	bf00      	nop
 800f612:	e7fe      	b.n	800f612 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	1ad2      	subs	r2, r2, r3
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f626:	69b8      	ldr	r0, [r7, #24]
 800f628:	f000 f8fe 	bl	800f828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f62c:	4b1b      	ldr	r3, [pc, #108]	; (800f69c <pvPortMalloc+0x188>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	4a19      	ldr	r2, [pc, #100]	; (800f69c <pvPortMalloc+0x188>)
 800f638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f63a:	4b18      	ldr	r3, [pc, #96]	; (800f69c <pvPortMalloc+0x188>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	4b19      	ldr	r3, [pc, #100]	; (800f6a4 <pvPortMalloc+0x190>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	429a      	cmp	r2, r3
 800f644:	d203      	bcs.n	800f64e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f646:	4b15      	ldr	r3, [pc, #84]	; (800f69c <pvPortMalloc+0x188>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a16      	ldr	r2, [pc, #88]	; (800f6a4 <pvPortMalloc+0x190>)
 800f64c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f650:	685a      	ldr	r2, [r3, #4]
 800f652:	4b11      	ldr	r3, [pc, #68]	; (800f698 <pvPortMalloc+0x184>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	431a      	orrs	r2, r3
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	2200      	movs	r2, #0
 800f660:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f662:	f7fe ff23 	bl	800e4ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	f003 0307 	and.w	r3, r3, #7
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00c      	beq.n	800f68a <pvPortMalloc+0x176>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	b672      	cpsid	i
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	b662      	cpsie	i
 800f684:	60fb      	str	r3, [r7, #12]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <pvPortMalloc+0x174>
	return pvReturn;
 800f68a:	69fb      	ldr	r3, [r7, #28]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3728      	adds	r7, #40	; 0x28
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	20004ac0 	.word	0x20004ac0
 800f698:	20004acc 	.word	0x20004acc
 800f69c:	20004ac4 	.word	0x20004ac4
 800f6a0:	20004ab8 	.word	0x20004ab8
 800f6a4:	20004ac8 	.word	0x20004ac8

0800f6a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d04c      	beq.n	800f754 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6ba:	2308      	movs	r3, #8
 800f6bc:	425b      	negs	r3, r3
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	4b23      	ldr	r3, [pc, #140]	; (800f75c <vPortFree+0xb4>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10c      	bne.n	800f6f0 <vPortFree+0x48>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	b672      	cpsid	i
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	b662      	cpsie	i
 800f6ea:	60fb      	str	r3, [r7, #12]
}
 800f6ec:	bf00      	nop
 800f6ee:	e7fe      	b.n	800f6ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00c      	beq.n	800f712 <vPortFree+0x6a>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fc:	b672      	cpsid	i
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	b662      	cpsie	i
 800f70c:	60bb      	str	r3, [r7, #8]
}
 800f70e:	bf00      	nop
 800f710:	e7fe      	b.n	800f710 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	4b11      	ldr	r3, [pc, #68]	; (800f75c <vPortFree+0xb4>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4013      	ands	r3, r2
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d019      	beq.n	800f754 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d115      	bne.n	800f754 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	4b0b      	ldr	r3, [pc, #44]	; (800f75c <vPortFree+0xb4>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	43db      	mvns	r3, r3
 800f732:	401a      	ands	r2, r3
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f738:	f7fe feaa 	bl	800e490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	4b07      	ldr	r3, [pc, #28]	; (800f760 <vPortFree+0xb8>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4413      	add	r3, r2
 800f746:	4a06      	ldr	r2, [pc, #24]	; (800f760 <vPortFree+0xb8>)
 800f748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f74a:	6938      	ldr	r0, [r7, #16]
 800f74c:	f000 f86c 	bl	800f828 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f750:	f7fe feac 	bl	800e4ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f754:	bf00      	nop
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20004acc 	.word	0x20004acc
 800f760:	20004ac4 	.word	0x20004ac4

0800f764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f76a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f76e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f770:	4b27      	ldr	r3, [pc, #156]	; (800f810 <prvHeapInit+0xac>)
 800f772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3307      	adds	r3, #7
 800f782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	4a1f      	ldr	r2, [pc, #124]	; (800f810 <prvHeapInit+0xac>)
 800f794:	4413      	add	r3, r2
 800f796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f79c:	4a1d      	ldr	r2, [pc, #116]	; (800f814 <prvHeapInit+0xb0>)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7a2:	4b1c      	ldr	r3, [pc, #112]	; (800f814 <prvHeapInit+0xb0>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7b0:	2208      	movs	r2, #8
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f023 0307 	bic.w	r3, r3, #7
 800f7be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4a15      	ldr	r2, [pc, #84]	; (800f818 <prvHeapInit+0xb4>)
 800f7c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7c6:	4b14      	ldr	r3, [pc, #80]	; (800f818 <prvHeapInit+0xb4>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ce:	4b12      	ldr	r3, [pc, #72]	; (800f818 <prvHeapInit+0xb4>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7e4:	4b0c      	ldr	r3, [pc, #48]	; (800f818 <prvHeapInit+0xb4>)
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	4a0a      	ldr	r2, [pc, #40]	; (800f81c <prvHeapInit+0xb8>)
 800f7f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4a09      	ldr	r2, [pc, #36]	; (800f820 <prvHeapInit+0xbc>)
 800f7fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7fc:	4b09      	ldr	r3, [pc, #36]	; (800f824 <prvHeapInit+0xc0>)
 800f7fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f802:	601a      	str	r2, [r3, #0]
}
 800f804:	bf00      	nop
 800f806:	3714      	adds	r7, #20
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr
 800f810:	20000eb8 	.word	0x20000eb8
 800f814:	20004ab8 	.word	0x20004ab8
 800f818:	20004ac0 	.word	0x20004ac0
 800f81c:	20004ac8 	.word	0x20004ac8
 800f820:	20004ac4 	.word	0x20004ac4
 800f824:	20004acc 	.word	0x20004acc

0800f828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f830:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <prvInsertBlockIntoFreeList+0xac>)
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	e002      	b.n	800f83c <prvInsertBlockIntoFreeList+0x14>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	429a      	cmp	r2, r3
 800f844:	d8f7      	bhi.n	800f836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4413      	add	r3, r2
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	429a      	cmp	r2, r3
 800f856:	d108      	bne.n	800f86a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	441a      	add	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	441a      	add	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d118      	bne.n	800f8b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	4b15      	ldr	r3, [pc, #84]	; (800f8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	d00d      	beq.n	800f8a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	441a      	add	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	e008      	b.n	800f8b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	e003      	b.n	800f8b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d002      	beq.n	800f8c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8c6:	bf00      	nop
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	20004ab8 	.word	0x20004ab8
 800f8d8:	20004ac0 	.word	0x20004ac0

0800f8dc <__errno>:
 800f8dc:	4b01      	ldr	r3, [pc, #4]	; (800f8e4 <__errno+0x8>)
 800f8de:	6818      	ldr	r0, [r3, #0]
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	200000d8 	.word	0x200000d8

0800f8e8 <__libc_init_array>:
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	4d0d      	ldr	r5, [pc, #52]	; (800f920 <__libc_init_array+0x38>)
 800f8ec:	4c0d      	ldr	r4, [pc, #52]	; (800f924 <__libc_init_array+0x3c>)
 800f8ee:	1b64      	subs	r4, r4, r5
 800f8f0:	10a4      	asrs	r4, r4, #2
 800f8f2:	2600      	movs	r6, #0
 800f8f4:	42a6      	cmp	r6, r4
 800f8f6:	d109      	bne.n	800f90c <__libc_init_array+0x24>
 800f8f8:	4d0b      	ldr	r5, [pc, #44]	; (800f928 <__libc_init_array+0x40>)
 800f8fa:	4c0c      	ldr	r4, [pc, #48]	; (800f92c <__libc_init_array+0x44>)
 800f8fc:	f000 fcf8 	bl	80102f0 <_init>
 800f900:	1b64      	subs	r4, r4, r5
 800f902:	10a4      	asrs	r4, r4, #2
 800f904:	2600      	movs	r6, #0
 800f906:	42a6      	cmp	r6, r4
 800f908:	d105      	bne.n	800f916 <__libc_init_array+0x2e>
 800f90a:	bd70      	pop	{r4, r5, r6, pc}
 800f90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f910:	4798      	blx	r3
 800f912:	3601      	adds	r6, #1
 800f914:	e7ee      	b.n	800f8f4 <__libc_init_array+0xc>
 800f916:	f855 3b04 	ldr.w	r3, [r5], #4
 800f91a:	4798      	blx	r3
 800f91c:	3601      	adds	r6, #1
 800f91e:	e7f2      	b.n	800f906 <__libc_init_array+0x1e>
 800f920:	08071e24 	.word	0x08071e24
 800f924:	08071e24 	.word	0x08071e24
 800f928:	08071e24 	.word	0x08071e24
 800f92c:	08071e28 	.word	0x08071e28

0800f930 <__retarget_lock_acquire_recursive>:
 800f930:	4770      	bx	lr

0800f932 <__retarget_lock_release_recursive>:
 800f932:	4770      	bx	lr

0800f934 <memcpy>:
 800f934:	440a      	add	r2, r1
 800f936:	4291      	cmp	r1, r2
 800f938:	f100 33ff 	add.w	r3, r0, #4294967295
 800f93c:	d100      	bne.n	800f940 <memcpy+0xc>
 800f93e:	4770      	bx	lr
 800f940:	b510      	push	{r4, lr}
 800f942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f94a:	4291      	cmp	r1, r2
 800f94c:	d1f9      	bne.n	800f942 <memcpy+0xe>
 800f94e:	bd10      	pop	{r4, pc}

0800f950 <memset>:
 800f950:	4402      	add	r2, r0
 800f952:	4603      	mov	r3, r0
 800f954:	4293      	cmp	r3, r2
 800f956:	d100      	bne.n	800f95a <memset+0xa>
 800f958:	4770      	bx	lr
 800f95a:	f803 1b01 	strb.w	r1, [r3], #1
 800f95e:	e7f9      	b.n	800f954 <memset+0x4>

0800f960 <sbrk_aligned>:
 800f960:	b570      	push	{r4, r5, r6, lr}
 800f962:	4e0e      	ldr	r6, [pc, #56]	; (800f99c <sbrk_aligned+0x3c>)
 800f964:	460c      	mov	r4, r1
 800f966:	6831      	ldr	r1, [r6, #0]
 800f968:	4605      	mov	r5, r0
 800f96a:	b911      	cbnz	r1, 800f972 <sbrk_aligned+0x12>
 800f96c:	f000 f8f6 	bl	800fb5c <_sbrk_r>
 800f970:	6030      	str	r0, [r6, #0]
 800f972:	4621      	mov	r1, r4
 800f974:	4628      	mov	r0, r5
 800f976:	f000 f8f1 	bl	800fb5c <_sbrk_r>
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	d00a      	beq.n	800f994 <sbrk_aligned+0x34>
 800f97e:	1cc4      	adds	r4, r0, #3
 800f980:	f024 0403 	bic.w	r4, r4, #3
 800f984:	42a0      	cmp	r0, r4
 800f986:	d007      	beq.n	800f998 <sbrk_aligned+0x38>
 800f988:	1a21      	subs	r1, r4, r0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f000 f8e6 	bl	800fb5c <_sbrk_r>
 800f990:	3001      	adds	r0, #1
 800f992:	d101      	bne.n	800f998 <sbrk_aligned+0x38>
 800f994:	f04f 34ff 	mov.w	r4, #4294967295
 800f998:	4620      	mov	r0, r4
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	20004ad8 	.word	0x20004ad8

0800f9a0 <_malloc_r>:
 800f9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a4:	1ccd      	adds	r5, r1, #3
 800f9a6:	f025 0503 	bic.w	r5, r5, #3
 800f9aa:	3508      	adds	r5, #8
 800f9ac:	2d0c      	cmp	r5, #12
 800f9ae:	bf38      	it	cc
 800f9b0:	250c      	movcc	r5, #12
 800f9b2:	2d00      	cmp	r5, #0
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	db01      	blt.n	800f9bc <_malloc_r+0x1c>
 800f9b8:	42a9      	cmp	r1, r5
 800f9ba:	d905      	bls.n	800f9c8 <_malloc_r+0x28>
 800f9bc:	230c      	movs	r3, #12
 800f9be:	603b      	str	r3, [r7, #0]
 800f9c0:	2600      	movs	r6, #0
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c8:	4e2e      	ldr	r6, [pc, #184]	; (800fa84 <_malloc_r+0xe4>)
 800f9ca:	f000 f8f7 	bl	800fbbc <__malloc_lock>
 800f9ce:	6833      	ldr	r3, [r6, #0]
 800f9d0:	461c      	mov	r4, r3
 800f9d2:	bb34      	cbnz	r4, 800fa22 <_malloc_r+0x82>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f7ff ffc2 	bl	800f960 <sbrk_aligned>
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	4604      	mov	r4, r0
 800f9e0:	d14d      	bne.n	800fa7e <_malloc_r+0xde>
 800f9e2:	6834      	ldr	r4, [r6, #0]
 800f9e4:	4626      	mov	r6, r4
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	d140      	bne.n	800fa6c <_malloc_r+0xcc>
 800f9ea:	6823      	ldr	r3, [r4, #0]
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	eb04 0803 	add.w	r8, r4, r3
 800f9f4:	f000 f8b2 	bl	800fb5c <_sbrk_r>
 800f9f8:	4580      	cmp	r8, r0
 800f9fa:	d13a      	bne.n	800fa72 <_malloc_r+0xd2>
 800f9fc:	6821      	ldr	r1, [r4, #0]
 800f9fe:	3503      	adds	r5, #3
 800fa00:	1a6d      	subs	r5, r5, r1
 800fa02:	f025 0503 	bic.w	r5, r5, #3
 800fa06:	3508      	adds	r5, #8
 800fa08:	2d0c      	cmp	r5, #12
 800fa0a:	bf38      	it	cc
 800fa0c:	250c      	movcc	r5, #12
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4638      	mov	r0, r7
 800fa12:	f7ff ffa5 	bl	800f960 <sbrk_aligned>
 800fa16:	3001      	adds	r0, #1
 800fa18:	d02b      	beq.n	800fa72 <_malloc_r+0xd2>
 800fa1a:	6823      	ldr	r3, [r4, #0]
 800fa1c:	442b      	add	r3, r5
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	e00e      	b.n	800fa40 <_malloc_r+0xa0>
 800fa22:	6822      	ldr	r2, [r4, #0]
 800fa24:	1b52      	subs	r2, r2, r5
 800fa26:	d41e      	bmi.n	800fa66 <_malloc_r+0xc6>
 800fa28:	2a0b      	cmp	r2, #11
 800fa2a:	d916      	bls.n	800fa5a <_malloc_r+0xba>
 800fa2c:	1961      	adds	r1, r4, r5
 800fa2e:	42a3      	cmp	r3, r4
 800fa30:	6025      	str	r5, [r4, #0]
 800fa32:	bf18      	it	ne
 800fa34:	6059      	strne	r1, [r3, #4]
 800fa36:	6863      	ldr	r3, [r4, #4]
 800fa38:	bf08      	it	eq
 800fa3a:	6031      	streq	r1, [r6, #0]
 800fa3c:	5162      	str	r2, [r4, r5]
 800fa3e:	604b      	str	r3, [r1, #4]
 800fa40:	4638      	mov	r0, r7
 800fa42:	f104 060b 	add.w	r6, r4, #11
 800fa46:	f000 f8bf 	bl	800fbc8 <__malloc_unlock>
 800fa4a:	f026 0607 	bic.w	r6, r6, #7
 800fa4e:	1d23      	adds	r3, r4, #4
 800fa50:	1af2      	subs	r2, r6, r3
 800fa52:	d0b6      	beq.n	800f9c2 <_malloc_r+0x22>
 800fa54:	1b9b      	subs	r3, r3, r6
 800fa56:	50a3      	str	r3, [r4, r2]
 800fa58:	e7b3      	b.n	800f9c2 <_malloc_r+0x22>
 800fa5a:	6862      	ldr	r2, [r4, #4]
 800fa5c:	42a3      	cmp	r3, r4
 800fa5e:	bf0c      	ite	eq
 800fa60:	6032      	streq	r2, [r6, #0]
 800fa62:	605a      	strne	r2, [r3, #4]
 800fa64:	e7ec      	b.n	800fa40 <_malloc_r+0xa0>
 800fa66:	4623      	mov	r3, r4
 800fa68:	6864      	ldr	r4, [r4, #4]
 800fa6a:	e7b2      	b.n	800f9d2 <_malloc_r+0x32>
 800fa6c:	4634      	mov	r4, r6
 800fa6e:	6876      	ldr	r6, [r6, #4]
 800fa70:	e7b9      	b.n	800f9e6 <_malloc_r+0x46>
 800fa72:	230c      	movs	r3, #12
 800fa74:	603b      	str	r3, [r7, #0]
 800fa76:	4638      	mov	r0, r7
 800fa78:	f000 f8a6 	bl	800fbc8 <__malloc_unlock>
 800fa7c:	e7a1      	b.n	800f9c2 <_malloc_r+0x22>
 800fa7e:	6025      	str	r5, [r4, #0]
 800fa80:	e7de      	b.n	800fa40 <_malloc_r+0xa0>
 800fa82:	bf00      	nop
 800fa84:	20004ad4 	.word	0x20004ad4

0800fa88 <cleanup_glue>:
 800fa88:	b538      	push	{r3, r4, r5, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	6809      	ldr	r1, [r1, #0]
 800fa8e:	4605      	mov	r5, r0
 800fa90:	b109      	cbz	r1, 800fa96 <cleanup_glue+0xe>
 800fa92:	f7ff fff9 	bl	800fa88 <cleanup_glue>
 800fa96:	4621      	mov	r1, r4
 800fa98:	4628      	mov	r0, r5
 800fa9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa9e:	f000 b899 	b.w	800fbd4 <_free_r>
	...

0800faa4 <_reclaim_reent>:
 800faa4:	4b2c      	ldr	r3, [pc, #176]	; (800fb58 <_reclaim_reent+0xb4>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4283      	cmp	r3, r0
 800faaa:	b570      	push	{r4, r5, r6, lr}
 800faac:	4604      	mov	r4, r0
 800faae:	d051      	beq.n	800fb54 <_reclaim_reent+0xb0>
 800fab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fab2:	b143      	cbz	r3, 800fac6 <_reclaim_reent+0x22>
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d14a      	bne.n	800fb50 <_reclaim_reent+0xac>
 800faba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fabc:	6819      	ldr	r1, [r3, #0]
 800fabe:	b111      	cbz	r1, 800fac6 <_reclaim_reent+0x22>
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 f887 	bl	800fbd4 <_free_r>
 800fac6:	6961      	ldr	r1, [r4, #20]
 800fac8:	b111      	cbz	r1, 800fad0 <_reclaim_reent+0x2c>
 800faca:	4620      	mov	r0, r4
 800facc:	f000 f882 	bl	800fbd4 <_free_r>
 800fad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fad2:	b111      	cbz	r1, 800fada <_reclaim_reent+0x36>
 800fad4:	4620      	mov	r0, r4
 800fad6:	f000 f87d 	bl	800fbd4 <_free_r>
 800fada:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fadc:	b111      	cbz	r1, 800fae4 <_reclaim_reent+0x40>
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 f878 	bl	800fbd4 <_free_r>
 800fae4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fae6:	b111      	cbz	r1, 800faee <_reclaim_reent+0x4a>
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 f873 	bl	800fbd4 <_free_r>
 800faee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800faf0:	b111      	cbz	r1, 800faf8 <_reclaim_reent+0x54>
 800faf2:	4620      	mov	r0, r4
 800faf4:	f000 f86e 	bl	800fbd4 <_free_r>
 800faf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fafa:	b111      	cbz	r1, 800fb02 <_reclaim_reent+0x5e>
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 f869 	bl	800fbd4 <_free_r>
 800fb02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb04:	b111      	cbz	r1, 800fb0c <_reclaim_reent+0x68>
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 f864 	bl	800fbd4 <_free_r>
 800fb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb0e:	b111      	cbz	r1, 800fb16 <_reclaim_reent+0x72>
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 f85f 	bl	800fbd4 <_free_r>
 800fb16:	69a3      	ldr	r3, [r4, #24]
 800fb18:	b1e3      	cbz	r3, 800fb54 <_reclaim_reent+0xb0>
 800fb1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	4798      	blx	r3
 800fb20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb22:	b1b9      	cbz	r1, 800fb54 <_reclaim_reent+0xb0>
 800fb24:	4620      	mov	r0, r4
 800fb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb2a:	f7ff bfad 	b.w	800fa88 <cleanup_glue>
 800fb2e:	5949      	ldr	r1, [r1, r5]
 800fb30:	b941      	cbnz	r1, 800fb44 <_reclaim_reent+0xa0>
 800fb32:	3504      	adds	r5, #4
 800fb34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb36:	2d80      	cmp	r5, #128	; 0x80
 800fb38:	68d9      	ldr	r1, [r3, #12]
 800fb3a:	d1f8      	bne.n	800fb2e <_reclaim_reent+0x8a>
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f000 f849 	bl	800fbd4 <_free_r>
 800fb42:	e7ba      	b.n	800faba <_reclaim_reent+0x16>
 800fb44:	680e      	ldr	r6, [r1, #0]
 800fb46:	4620      	mov	r0, r4
 800fb48:	f000 f844 	bl	800fbd4 <_free_r>
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	e7ef      	b.n	800fb30 <_reclaim_reent+0x8c>
 800fb50:	2500      	movs	r5, #0
 800fb52:	e7ef      	b.n	800fb34 <_reclaim_reent+0x90>
 800fb54:	bd70      	pop	{r4, r5, r6, pc}
 800fb56:	bf00      	nop
 800fb58:	200000d8 	.word	0x200000d8

0800fb5c <_sbrk_r>:
 800fb5c:	b538      	push	{r3, r4, r5, lr}
 800fb5e:	4d06      	ldr	r5, [pc, #24]	; (800fb78 <_sbrk_r+0x1c>)
 800fb60:	2300      	movs	r3, #0
 800fb62:	4604      	mov	r4, r0
 800fb64:	4608      	mov	r0, r1
 800fb66:	602b      	str	r3, [r5, #0]
 800fb68:	f7f5 fe3c 	bl	80057e4 <_sbrk>
 800fb6c:	1c43      	adds	r3, r0, #1
 800fb6e:	d102      	bne.n	800fb76 <_sbrk_r+0x1a>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	b103      	cbz	r3, 800fb76 <_sbrk_r+0x1a>
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
 800fb78:	20004adc 	.word	0x20004adc

0800fb7c <siprintf>:
 800fb7c:	b40e      	push	{r1, r2, r3}
 800fb7e:	b500      	push	{lr}
 800fb80:	b09c      	sub	sp, #112	; 0x70
 800fb82:	ab1d      	add	r3, sp, #116	; 0x74
 800fb84:	9002      	str	r0, [sp, #8]
 800fb86:	9006      	str	r0, [sp, #24]
 800fb88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb8c:	4809      	ldr	r0, [pc, #36]	; (800fbb4 <siprintf+0x38>)
 800fb8e:	9107      	str	r1, [sp, #28]
 800fb90:	9104      	str	r1, [sp, #16]
 800fb92:	4909      	ldr	r1, [pc, #36]	; (800fbb8 <siprintf+0x3c>)
 800fb94:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb98:	9105      	str	r1, [sp, #20]
 800fb9a:	6800      	ldr	r0, [r0, #0]
 800fb9c:	9301      	str	r3, [sp, #4]
 800fb9e:	a902      	add	r1, sp, #8
 800fba0:	f000 f8c0 	bl	800fd24 <_svfiprintf_r>
 800fba4:	9b02      	ldr	r3, [sp, #8]
 800fba6:	2200      	movs	r2, #0
 800fba8:	701a      	strb	r2, [r3, #0]
 800fbaa:	b01c      	add	sp, #112	; 0x70
 800fbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb0:	b003      	add	sp, #12
 800fbb2:	4770      	bx	lr
 800fbb4:	200000d8 	.word	0x200000d8
 800fbb8:	ffff0208 	.word	0xffff0208

0800fbbc <__malloc_lock>:
 800fbbc:	4801      	ldr	r0, [pc, #4]	; (800fbc4 <__malloc_lock+0x8>)
 800fbbe:	f7ff beb7 	b.w	800f930 <__retarget_lock_acquire_recursive>
 800fbc2:	bf00      	nop
 800fbc4:	20004ad0 	.word	0x20004ad0

0800fbc8 <__malloc_unlock>:
 800fbc8:	4801      	ldr	r0, [pc, #4]	; (800fbd0 <__malloc_unlock+0x8>)
 800fbca:	f7ff beb2 	b.w	800f932 <__retarget_lock_release_recursive>
 800fbce:	bf00      	nop
 800fbd0:	20004ad0 	.word	0x20004ad0

0800fbd4 <_free_r>:
 800fbd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbd6:	2900      	cmp	r1, #0
 800fbd8:	d044      	beq.n	800fc64 <_free_r+0x90>
 800fbda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbde:	9001      	str	r0, [sp, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f1a1 0404 	sub.w	r4, r1, #4
 800fbe6:	bfb8      	it	lt
 800fbe8:	18e4      	addlt	r4, r4, r3
 800fbea:	f7ff ffe7 	bl	800fbbc <__malloc_lock>
 800fbee:	4a1e      	ldr	r2, [pc, #120]	; (800fc68 <_free_r+0x94>)
 800fbf0:	9801      	ldr	r0, [sp, #4]
 800fbf2:	6813      	ldr	r3, [r2, #0]
 800fbf4:	b933      	cbnz	r3, 800fc04 <_free_r+0x30>
 800fbf6:	6063      	str	r3, [r4, #4]
 800fbf8:	6014      	str	r4, [r2, #0]
 800fbfa:	b003      	add	sp, #12
 800fbfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc00:	f7ff bfe2 	b.w	800fbc8 <__malloc_unlock>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d908      	bls.n	800fc1a <_free_r+0x46>
 800fc08:	6825      	ldr	r5, [r4, #0]
 800fc0a:	1961      	adds	r1, r4, r5
 800fc0c:	428b      	cmp	r3, r1
 800fc0e:	bf01      	itttt	eq
 800fc10:	6819      	ldreq	r1, [r3, #0]
 800fc12:	685b      	ldreq	r3, [r3, #4]
 800fc14:	1949      	addeq	r1, r1, r5
 800fc16:	6021      	streq	r1, [r4, #0]
 800fc18:	e7ed      	b.n	800fbf6 <_free_r+0x22>
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	b10b      	cbz	r3, 800fc24 <_free_r+0x50>
 800fc20:	42a3      	cmp	r3, r4
 800fc22:	d9fa      	bls.n	800fc1a <_free_r+0x46>
 800fc24:	6811      	ldr	r1, [r2, #0]
 800fc26:	1855      	adds	r5, r2, r1
 800fc28:	42a5      	cmp	r5, r4
 800fc2a:	d10b      	bne.n	800fc44 <_free_r+0x70>
 800fc2c:	6824      	ldr	r4, [r4, #0]
 800fc2e:	4421      	add	r1, r4
 800fc30:	1854      	adds	r4, r2, r1
 800fc32:	42a3      	cmp	r3, r4
 800fc34:	6011      	str	r1, [r2, #0]
 800fc36:	d1e0      	bne.n	800fbfa <_free_r+0x26>
 800fc38:	681c      	ldr	r4, [r3, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	6053      	str	r3, [r2, #4]
 800fc3e:	4421      	add	r1, r4
 800fc40:	6011      	str	r1, [r2, #0]
 800fc42:	e7da      	b.n	800fbfa <_free_r+0x26>
 800fc44:	d902      	bls.n	800fc4c <_free_r+0x78>
 800fc46:	230c      	movs	r3, #12
 800fc48:	6003      	str	r3, [r0, #0]
 800fc4a:	e7d6      	b.n	800fbfa <_free_r+0x26>
 800fc4c:	6825      	ldr	r5, [r4, #0]
 800fc4e:	1961      	adds	r1, r4, r5
 800fc50:	428b      	cmp	r3, r1
 800fc52:	bf04      	itt	eq
 800fc54:	6819      	ldreq	r1, [r3, #0]
 800fc56:	685b      	ldreq	r3, [r3, #4]
 800fc58:	6063      	str	r3, [r4, #4]
 800fc5a:	bf04      	itt	eq
 800fc5c:	1949      	addeq	r1, r1, r5
 800fc5e:	6021      	streq	r1, [r4, #0]
 800fc60:	6054      	str	r4, [r2, #4]
 800fc62:	e7ca      	b.n	800fbfa <_free_r+0x26>
 800fc64:	b003      	add	sp, #12
 800fc66:	bd30      	pop	{r4, r5, pc}
 800fc68:	20004ad4 	.word	0x20004ad4

0800fc6c <__ssputs_r>:
 800fc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc70:	688e      	ldr	r6, [r1, #8]
 800fc72:	429e      	cmp	r6, r3
 800fc74:	4682      	mov	sl, r0
 800fc76:	460c      	mov	r4, r1
 800fc78:	4690      	mov	r8, r2
 800fc7a:	461f      	mov	r7, r3
 800fc7c:	d838      	bhi.n	800fcf0 <__ssputs_r+0x84>
 800fc7e:	898a      	ldrh	r2, [r1, #12]
 800fc80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc84:	d032      	beq.n	800fcec <__ssputs_r+0x80>
 800fc86:	6825      	ldr	r5, [r4, #0]
 800fc88:	6909      	ldr	r1, [r1, #16]
 800fc8a:	eba5 0901 	sub.w	r9, r5, r1
 800fc8e:	6965      	ldr	r5, [r4, #20]
 800fc90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc98:	3301      	adds	r3, #1
 800fc9a:	444b      	add	r3, r9
 800fc9c:	106d      	asrs	r5, r5, #1
 800fc9e:	429d      	cmp	r5, r3
 800fca0:	bf38      	it	cc
 800fca2:	461d      	movcc	r5, r3
 800fca4:	0553      	lsls	r3, r2, #21
 800fca6:	d531      	bpl.n	800fd0c <__ssputs_r+0xa0>
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f7ff fe79 	bl	800f9a0 <_malloc_r>
 800fcae:	4606      	mov	r6, r0
 800fcb0:	b950      	cbnz	r0, 800fcc8 <__ssputs_r+0x5c>
 800fcb2:	230c      	movs	r3, #12
 800fcb4:	f8ca 3000 	str.w	r3, [sl]
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc8:	6921      	ldr	r1, [r4, #16]
 800fcca:	464a      	mov	r2, r9
 800fccc:	f7ff fe32 	bl	800f934 <memcpy>
 800fcd0:	89a3      	ldrh	r3, [r4, #12]
 800fcd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcda:	81a3      	strh	r3, [r4, #12]
 800fcdc:	6126      	str	r6, [r4, #16]
 800fcde:	6165      	str	r5, [r4, #20]
 800fce0:	444e      	add	r6, r9
 800fce2:	eba5 0509 	sub.w	r5, r5, r9
 800fce6:	6026      	str	r6, [r4, #0]
 800fce8:	60a5      	str	r5, [r4, #8]
 800fcea:	463e      	mov	r6, r7
 800fcec:	42be      	cmp	r6, r7
 800fcee:	d900      	bls.n	800fcf2 <__ssputs_r+0x86>
 800fcf0:	463e      	mov	r6, r7
 800fcf2:	6820      	ldr	r0, [r4, #0]
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	4641      	mov	r1, r8
 800fcf8:	f000 faa8 	bl	801024c <memmove>
 800fcfc:	68a3      	ldr	r3, [r4, #8]
 800fcfe:	1b9b      	subs	r3, r3, r6
 800fd00:	60a3      	str	r3, [r4, #8]
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	4433      	add	r3, r6
 800fd06:	6023      	str	r3, [r4, #0]
 800fd08:	2000      	movs	r0, #0
 800fd0a:	e7db      	b.n	800fcc4 <__ssputs_r+0x58>
 800fd0c:	462a      	mov	r2, r5
 800fd0e:	f000 fab7 	bl	8010280 <_realloc_r>
 800fd12:	4606      	mov	r6, r0
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d1e1      	bne.n	800fcdc <__ssputs_r+0x70>
 800fd18:	6921      	ldr	r1, [r4, #16]
 800fd1a:	4650      	mov	r0, sl
 800fd1c:	f7ff ff5a 	bl	800fbd4 <_free_r>
 800fd20:	e7c7      	b.n	800fcb2 <__ssputs_r+0x46>
	...

0800fd24 <_svfiprintf_r>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	4698      	mov	r8, r3
 800fd2a:	898b      	ldrh	r3, [r1, #12]
 800fd2c:	061b      	lsls	r3, r3, #24
 800fd2e:	b09d      	sub	sp, #116	; 0x74
 800fd30:	4607      	mov	r7, r0
 800fd32:	460d      	mov	r5, r1
 800fd34:	4614      	mov	r4, r2
 800fd36:	d50e      	bpl.n	800fd56 <_svfiprintf_r+0x32>
 800fd38:	690b      	ldr	r3, [r1, #16]
 800fd3a:	b963      	cbnz	r3, 800fd56 <_svfiprintf_r+0x32>
 800fd3c:	2140      	movs	r1, #64	; 0x40
 800fd3e:	f7ff fe2f 	bl	800f9a0 <_malloc_r>
 800fd42:	6028      	str	r0, [r5, #0]
 800fd44:	6128      	str	r0, [r5, #16]
 800fd46:	b920      	cbnz	r0, 800fd52 <_svfiprintf_r+0x2e>
 800fd48:	230c      	movs	r3, #12
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd50:	e0d1      	b.n	800fef6 <_svfiprintf_r+0x1d2>
 800fd52:	2340      	movs	r3, #64	; 0x40
 800fd54:	616b      	str	r3, [r5, #20]
 800fd56:	2300      	movs	r3, #0
 800fd58:	9309      	str	r3, [sp, #36]	; 0x24
 800fd5a:	2320      	movs	r3, #32
 800fd5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd64:	2330      	movs	r3, #48	; 0x30
 800fd66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff10 <_svfiprintf_r+0x1ec>
 800fd6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd6e:	f04f 0901 	mov.w	r9, #1
 800fd72:	4623      	mov	r3, r4
 800fd74:	469a      	mov	sl, r3
 800fd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd7a:	b10a      	cbz	r2, 800fd80 <_svfiprintf_r+0x5c>
 800fd7c:	2a25      	cmp	r2, #37	; 0x25
 800fd7e:	d1f9      	bne.n	800fd74 <_svfiprintf_r+0x50>
 800fd80:	ebba 0b04 	subs.w	fp, sl, r4
 800fd84:	d00b      	beq.n	800fd9e <_svfiprintf_r+0x7a>
 800fd86:	465b      	mov	r3, fp
 800fd88:	4622      	mov	r2, r4
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f7ff ff6d 	bl	800fc6c <__ssputs_r>
 800fd92:	3001      	adds	r0, #1
 800fd94:	f000 80aa 	beq.w	800feec <_svfiprintf_r+0x1c8>
 800fd98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd9a:	445a      	add	r2, fp
 800fd9c:	9209      	str	r2, [sp, #36]	; 0x24
 800fd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 80a2 	beq.w	800feec <_svfiprintf_r+0x1c8>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdb2:	f10a 0a01 	add.w	sl, sl, #1
 800fdb6:	9304      	str	r3, [sp, #16]
 800fdb8:	9307      	str	r3, [sp, #28]
 800fdba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdbe:	931a      	str	r3, [sp, #104]	; 0x68
 800fdc0:	4654      	mov	r4, sl
 800fdc2:	2205      	movs	r2, #5
 800fdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdc8:	4851      	ldr	r0, [pc, #324]	; (800ff10 <_svfiprintf_r+0x1ec>)
 800fdca:	f7f0 fa21 	bl	8000210 <memchr>
 800fdce:	9a04      	ldr	r2, [sp, #16]
 800fdd0:	b9d8      	cbnz	r0, 800fe0a <_svfiprintf_r+0xe6>
 800fdd2:	06d0      	lsls	r0, r2, #27
 800fdd4:	bf44      	itt	mi
 800fdd6:	2320      	movmi	r3, #32
 800fdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fddc:	0711      	lsls	r1, r2, #28
 800fdde:	bf44      	itt	mi
 800fde0:	232b      	movmi	r3, #43	; 0x2b
 800fde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fde6:	f89a 3000 	ldrb.w	r3, [sl]
 800fdea:	2b2a      	cmp	r3, #42	; 0x2a
 800fdec:	d015      	beq.n	800fe1a <_svfiprintf_r+0xf6>
 800fdee:	9a07      	ldr	r2, [sp, #28]
 800fdf0:	4654      	mov	r4, sl
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f04f 0c0a 	mov.w	ip, #10
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdfe:	3b30      	subs	r3, #48	; 0x30
 800fe00:	2b09      	cmp	r3, #9
 800fe02:	d94e      	bls.n	800fea2 <_svfiprintf_r+0x17e>
 800fe04:	b1b0      	cbz	r0, 800fe34 <_svfiprintf_r+0x110>
 800fe06:	9207      	str	r2, [sp, #28]
 800fe08:	e014      	b.n	800fe34 <_svfiprintf_r+0x110>
 800fe0a:	eba0 0308 	sub.w	r3, r0, r8
 800fe0e:	fa09 f303 	lsl.w	r3, r9, r3
 800fe12:	4313      	orrs	r3, r2
 800fe14:	9304      	str	r3, [sp, #16]
 800fe16:	46a2      	mov	sl, r4
 800fe18:	e7d2      	b.n	800fdc0 <_svfiprintf_r+0x9c>
 800fe1a:	9b03      	ldr	r3, [sp, #12]
 800fe1c:	1d19      	adds	r1, r3, #4
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	9103      	str	r1, [sp, #12]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bfbb      	ittet	lt
 800fe26:	425b      	neglt	r3, r3
 800fe28:	f042 0202 	orrlt.w	r2, r2, #2
 800fe2c:	9307      	strge	r3, [sp, #28]
 800fe2e:	9307      	strlt	r3, [sp, #28]
 800fe30:	bfb8      	it	lt
 800fe32:	9204      	strlt	r2, [sp, #16]
 800fe34:	7823      	ldrb	r3, [r4, #0]
 800fe36:	2b2e      	cmp	r3, #46	; 0x2e
 800fe38:	d10c      	bne.n	800fe54 <_svfiprintf_r+0x130>
 800fe3a:	7863      	ldrb	r3, [r4, #1]
 800fe3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe3e:	d135      	bne.n	800feac <_svfiprintf_r+0x188>
 800fe40:	9b03      	ldr	r3, [sp, #12]
 800fe42:	1d1a      	adds	r2, r3, #4
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	9203      	str	r2, [sp, #12]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	bfb8      	it	lt
 800fe4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe50:	3402      	adds	r4, #2
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff20 <_svfiprintf_r+0x1fc>
 800fe58:	7821      	ldrb	r1, [r4, #0]
 800fe5a:	2203      	movs	r2, #3
 800fe5c:	4650      	mov	r0, sl
 800fe5e:	f7f0 f9d7 	bl	8000210 <memchr>
 800fe62:	b140      	cbz	r0, 800fe76 <_svfiprintf_r+0x152>
 800fe64:	2340      	movs	r3, #64	; 0x40
 800fe66:	eba0 000a 	sub.w	r0, r0, sl
 800fe6a:	fa03 f000 	lsl.w	r0, r3, r0
 800fe6e:	9b04      	ldr	r3, [sp, #16]
 800fe70:	4303      	orrs	r3, r0
 800fe72:	3401      	adds	r4, #1
 800fe74:	9304      	str	r3, [sp, #16]
 800fe76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe7a:	4826      	ldr	r0, [pc, #152]	; (800ff14 <_svfiprintf_r+0x1f0>)
 800fe7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe80:	2206      	movs	r2, #6
 800fe82:	f7f0 f9c5 	bl	8000210 <memchr>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	d038      	beq.n	800fefc <_svfiprintf_r+0x1d8>
 800fe8a:	4b23      	ldr	r3, [pc, #140]	; (800ff18 <_svfiprintf_r+0x1f4>)
 800fe8c:	bb1b      	cbnz	r3, 800fed6 <_svfiprintf_r+0x1b2>
 800fe8e:	9b03      	ldr	r3, [sp, #12]
 800fe90:	3307      	adds	r3, #7
 800fe92:	f023 0307 	bic.w	r3, r3, #7
 800fe96:	3308      	adds	r3, #8
 800fe98:	9303      	str	r3, [sp, #12]
 800fe9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe9c:	4433      	add	r3, r6
 800fe9e:	9309      	str	r3, [sp, #36]	; 0x24
 800fea0:	e767      	b.n	800fd72 <_svfiprintf_r+0x4e>
 800fea2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea6:	460c      	mov	r4, r1
 800fea8:	2001      	movs	r0, #1
 800feaa:	e7a5      	b.n	800fdf8 <_svfiprintf_r+0xd4>
 800feac:	2300      	movs	r3, #0
 800feae:	3401      	adds	r4, #1
 800feb0:	9305      	str	r3, [sp, #20]
 800feb2:	4619      	mov	r1, r3
 800feb4:	f04f 0c0a 	mov.w	ip, #10
 800feb8:	4620      	mov	r0, r4
 800feba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800febe:	3a30      	subs	r2, #48	; 0x30
 800fec0:	2a09      	cmp	r2, #9
 800fec2:	d903      	bls.n	800fecc <_svfiprintf_r+0x1a8>
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d0c5      	beq.n	800fe54 <_svfiprintf_r+0x130>
 800fec8:	9105      	str	r1, [sp, #20]
 800feca:	e7c3      	b.n	800fe54 <_svfiprintf_r+0x130>
 800fecc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fed0:	4604      	mov	r4, r0
 800fed2:	2301      	movs	r3, #1
 800fed4:	e7f0      	b.n	800feb8 <_svfiprintf_r+0x194>
 800fed6:	ab03      	add	r3, sp, #12
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	462a      	mov	r2, r5
 800fedc:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <_svfiprintf_r+0x1f8>)
 800fede:	a904      	add	r1, sp, #16
 800fee0:	4638      	mov	r0, r7
 800fee2:	f3af 8000 	nop.w
 800fee6:	1c42      	adds	r2, r0, #1
 800fee8:	4606      	mov	r6, r0
 800feea:	d1d6      	bne.n	800fe9a <_svfiprintf_r+0x176>
 800feec:	89ab      	ldrh	r3, [r5, #12]
 800feee:	065b      	lsls	r3, r3, #25
 800fef0:	f53f af2c 	bmi.w	800fd4c <_svfiprintf_r+0x28>
 800fef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fef6:	b01d      	add	sp, #116	; 0x74
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	ab03      	add	r3, sp, #12
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	462a      	mov	r2, r5
 800ff02:	4b06      	ldr	r3, [pc, #24]	; (800ff1c <_svfiprintf_r+0x1f8>)
 800ff04:	a904      	add	r1, sp, #16
 800ff06:	4638      	mov	r0, r7
 800ff08:	f000 f87a 	bl	8010000 <_printf_i>
 800ff0c:	e7eb      	b.n	800fee6 <_svfiprintf_r+0x1c2>
 800ff0e:	bf00      	nop
 800ff10:	08071de8 	.word	0x08071de8
 800ff14:	08071df2 	.word	0x08071df2
 800ff18:	00000000 	.word	0x00000000
 800ff1c:	0800fc6d 	.word	0x0800fc6d
 800ff20:	08071dee 	.word	0x08071dee

0800ff24 <_printf_common>:
 800ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff28:	4616      	mov	r6, r2
 800ff2a:	4699      	mov	r9, r3
 800ff2c:	688a      	ldr	r2, [r1, #8]
 800ff2e:	690b      	ldr	r3, [r1, #16]
 800ff30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff34:	4293      	cmp	r3, r2
 800ff36:	bfb8      	it	lt
 800ff38:	4613      	movlt	r3, r2
 800ff3a:	6033      	str	r3, [r6, #0]
 800ff3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff40:	4607      	mov	r7, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	b10a      	cbz	r2, 800ff4a <_printf_common+0x26>
 800ff46:	3301      	adds	r3, #1
 800ff48:	6033      	str	r3, [r6, #0]
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	0699      	lsls	r1, r3, #26
 800ff4e:	bf42      	ittt	mi
 800ff50:	6833      	ldrmi	r3, [r6, #0]
 800ff52:	3302      	addmi	r3, #2
 800ff54:	6033      	strmi	r3, [r6, #0]
 800ff56:	6825      	ldr	r5, [r4, #0]
 800ff58:	f015 0506 	ands.w	r5, r5, #6
 800ff5c:	d106      	bne.n	800ff6c <_printf_common+0x48>
 800ff5e:	f104 0a19 	add.w	sl, r4, #25
 800ff62:	68e3      	ldr	r3, [r4, #12]
 800ff64:	6832      	ldr	r2, [r6, #0]
 800ff66:	1a9b      	subs	r3, r3, r2
 800ff68:	42ab      	cmp	r3, r5
 800ff6a:	dc26      	bgt.n	800ffba <_printf_common+0x96>
 800ff6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff70:	1e13      	subs	r3, r2, #0
 800ff72:	6822      	ldr	r2, [r4, #0]
 800ff74:	bf18      	it	ne
 800ff76:	2301      	movne	r3, #1
 800ff78:	0692      	lsls	r2, r2, #26
 800ff7a:	d42b      	bmi.n	800ffd4 <_printf_common+0xb0>
 800ff7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff80:	4649      	mov	r1, r9
 800ff82:	4638      	mov	r0, r7
 800ff84:	47c0      	blx	r8
 800ff86:	3001      	adds	r0, #1
 800ff88:	d01e      	beq.n	800ffc8 <_printf_common+0xa4>
 800ff8a:	6823      	ldr	r3, [r4, #0]
 800ff8c:	68e5      	ldr	r5, [r4, #12]
 800ff8e:	6832      	ldr	r2, [r6, #0]
 800ff90:	f003 0306 	and.w	r3, r3, #6
 800ff94:	2b04      	cmp	r3, #4
 800ff96:	bf08      	it	eq
 800ff98:	1aad      	subeq	r5, r5, r2
 800ff9a:	68a3      	ldr	r3, [r4, #8]
 800ff9c:	6922      	ldr	r2, [r4, #16]
 800ff9e:	bf0c      	ite	eq
 800ffa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffa4:	2500      	movne	r5, #0
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	bfc4      	itt	gt
 800ffaa:	1a9b      	subgt	r3, r3, r2
 800ffac:	18ed      	addgt	r5, r5, r3
 800ffae:	2600      	movs	r6, #0
 800ffb0:	341a      	adds	r4, #26
 800ffb2:	42b5      	cmp	r5, r6
 800ffb4:	d11a      	bne.n	800ffec <_printf_common+0xc8>
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	e008      	b.n	800ffcc <_printf_common+0xa8>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	4652      	mov	r2, sl
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	47c0      	blx	r8
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	d103      	bne.n	800ffd0 <_printf_common+0xac>
 800ffc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd0:	3501      	adds	r5, #1
 800ffd2:	e7c6      	b.n	800ff62 <_printf_common+0x3e>
 800ffd4:	18e1      	adds	r1, r4, r3
 800ffd6:	1c5a      	adds	r2, r3, #1
 800ffd8:	2030      	movs	r0, #48	; 0x30
 800ffda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffde:	4422      	add	r2, r4
 800ffe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffe8:	3302      	adds	r3, #2
 800ffea:	e7c7      	b.n	800ff7c <_printf_common+0x58>
 800ffec:	2301      	movs	r3, #1
 800ffee:	4622      	mov	r2, r4
 800fff0:	4649      	mov	r1, r9
 800fff2:	4638      	mov	r0, r7
 800fff4:	47c0      	blx	r8
 800fff6:	3001      	adds	r0, #1
 800fff8:	d0e6      	beq.n	800ffc8 <_printf_common+0xa4>
 800fffa:	3601      	adds	r6, #1
 800fffc:	e7d9      	b.n	800ffb2 <_printf_common+0x8e>
	...

08010000 <_printf_i>:
 8010000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010004:	7e0f      	ldrb	r7, [r1, #24]
 8010006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010008:	2f78      	cmp	r7, #120	; 0x78
 801000a:	4691      	mov	r9, r2
 801000c:	4680      	mov	r8, r0
 801000e:	460c      	mov	r4, r1
 8010010:	469a      	mov	sl, r3
 8010012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010016:	d807      	bhi.n	8010028 <_printf_i+0x28>
 8010018:	2f62      	cmp	r7, #98	; 0x62
 801001a:	d80a      	bhi.n	8010032 <_printf_i+0x32>
 801001c:	2f00      	cmp	r7, #0
 801001e:	f000 80d8 	beq.w	80101d2 <_printf_i+0x1d2>
 8010022:	2f58      	cmp	r7, #88	; 0x58
 8010024:	f000 80a3 	beq.w	801016e <_printf_i+0x16e>
 8010028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801002c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010030:	e03a      	b.n	80100a8 <_printf_i+0xa8>
 8010032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010036:	2b15      	cmp	r3, #21
 8010038:	d8f6      	bhi.n	8010028 <_printf_i+0x28>
 801003a:	a101      	add	r1, pc, #4	; (adr r1, 8010040 <_printf_i+0x40>)
 801003c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010040:	08010099 	.word	0x08010099
 8010044:	080100ad 	.word	0x080100ad
 8010048:	08010029 	.word	0x08010029
 801004c:	08010029 	.word	0x08010029
 8010050:	08010029 	.word	0x08010029
 8010054:	08010029 	.word	0x08010029
 8010058:	080100ad 	.word	0x080100ad
 801005c:	08010029 	.word	0x08010029
 8010060:	08010029 	.word	0x08010029
 8010064:	08010029 	.word	0x08010029
 8010068:	08010029 	.word	0x08010029
 801006c:	080101b9 	.word	0x080101b9
 8010070:	080100dd 	.word	0x080100dd
 8010074:	0801019b 	.word	0x0801019b
 8010078:	08010029 	.word	0x08010029
 801007c:	08010029 	.word	0x08010029
 8010080:	080101db 	.word	0x080101db
 8010084:	08010029 	.word	0x08010029
 8010088:	080100dd 	.word	0x080100dd
 801008c:	08010029 	.word	0x08010029
 8010090:	08010029 	.word	0x08010029
 8010094:	080101a3 	.word	0x080101a3
 8010098:	682b      	ldr	r3, [r5, #0]
 801009a:	1d1a      	adds	r2, r3, #4
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	602a      	str	r2, [r5, #0]
 80100a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100a8:	2301      	movs	r3, #1
 80100aa:	e0a3      	b.n	80101f4 <_printf_i+0x1f4>
 80100ac:	6820      	ldr	r0, [r4, #0]
 80100ae:	6829      	ldr	r1, [r5, #0]
 80100b0:	0606      	lsls	r6, r0, #24
 80100b2:	f101 0304 	add.w	r3, r1, #4
 80100b6:	d50a      	bpl.n	80100ce <_printf_i+0xce>
 80100b8:	680e      	ldr	r6, [r1, #0]
 80100ba:	602b      	str	r3, [r5, #0]
 80100bc:	2e00      	cmp	r6, #0
 80100be:	da03      	bge.n	80100c8 <_printf_i+0xc8>
 80100c0:	232d      	movs	r3, #45	; 0x2d
 80100c2:	4276      	negs	r6, r6
 80100c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c8:	485e      	ldr	r0, [pc, #376]	; (8010244 <_printf_i+0x244>)
 80100ca:	230a      	movs	r3, #10
 80100cc:	e019      	b.n	8010102 <_printf_i+0x102>
 80100ce:	680e      	ldr	r6, [r1, #0]
 80100d0:	602b      	str	r3, [r5, #0]
 80100d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100d6:	bf18      	it	ne
 80100d8:	b236      	sxthne	r6, r6
 80100da:	e7ef      	b.n	80100bc <_printf_i+0xbc>
 80100dc:	682b      	ldr	r3, [r5, #0]
 80100de:	6820      	ldr	r0, [r4, #0]
 80100e0:	1d19      	adds	r1, r3, #4
 80100e2:	6029      	str	r1, [r5, #0]
 80100e4:	0601      	lsls	r1, r0, #24
 80100e6:	d501      	bpl.n	80100ec <_printf_i+0xec>
 80100e8:	681e      	ldr	r6, [r3, #0]
 80100ea:	e002      	b.n	80100f2 <_printf_i+0xf2>
 80100ec:	0646      	lsls	r6, r0, #25
 80100ee:	d5fb      	bpl.n	80100e8 <_printf_i+0xe8>
 80100f0:	881e      	ldrh	r6, [r3, #0]
 80100f2:	4854      	ldr	r0, [pc, #336]	; (8010244 <_printf_i+0x244>)
 80100f4:	2f6f      	cmp	r7, #111	; 0x6f
 80100f6:	bf0c      	ite	eq
 80100f8:	2308      	moveq	r3, #8
 80100fa:	230a      	movne	r3, #10
 80100fc:	2100      	movs	r1, #0
 80100fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010102:	6865      	ldr	r5, [r4, #4]
 8010104:	60a5      	str	r5, [r4, #8]
 8010106:	2d00      	cmp	r5, #0
 8010108:	bfa2      	ittt	ge
 801010a:	6821      	ldrge	r1, [r4, #0]
 801010c:	f021 0104 	bicge.w	r1, r1, #4
 8010110:	6021      	strge	r1, [r4, #0]
 8010112:	b90e      	cbnz	r6, 8010118 <_printf_i+0x118>
 8010114:	2d00      	cmp	r5, #0
 8010116:	d04d      	beq.n	80101b4 <_printf_i+0x1b4>
 8010118:	4615      	mov	r5, r2
 801011a:	fbb6 f1f3 	udiv	r1, r6, r3
 801011e:	fb03 6711 	mls	r7, r3, r1, r6
 8010122:	5dc7      	ldrb	r7, [r0, r7]
 8010124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010128:	4637      	mov	r7, r6
 801012a:	42bb      	cmp	r3, r7
 801012c:	460e      	mov	r6, r1
 801012e:	d9f4      	bls.n	801011a <_printf_i+0x11a>
 8010130:	2b08      	cmp	r3, #8
 8010132:	d10b      	bne.n	801014c <_printf_i+0x14c>
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	07de      	lsls	r6, r3, #31
 8010138:	d508      	bpl.n	801014c <_printf_i+0x14c>
 801013a:	6923      	ldr	r3, [r4, #16]
 801013c:	6861      	ldr	r1, [r4, #4]
 801013e:	4299      	cmp	r1, r3
 8010140:	bfde      	ittt	le
 8010142:	2330      	movle	r3, #48	; 0x30
 8010144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010148:	f105 35ff 	addle.w	r5, r5, #4294967295
 801014c:	1b52      	subs	r2, r2, r5
 801014e:	6122      	str	r2, [r4, #16]
 8010150:	f8cd a000 	str.w	sl, [sp]
 8010154:	464b      	mov	r3, r9
 8010156:	aa03      	add	r2, sp, #12
 8010158:	4621      	mov	r1, r4
 801015a:	4640      	mov	r0, r8
 801015c:	f7ff fee2 	bl	800ff24 <_printf_common>
 8010160:	3001      	adds	r0, #1
 8010162:	d14c      	bne.n	80101fe <_printf_i+0x1fe>
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	b004      	add	sp, #16
 801016a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016e:	4835      	ldr	r0, [pc, #212]	; (8010244 <_printf_i+0x244>)
 8010170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010174:	6829      	ldr	r1, [r5, #0]
 8010176:	6823      	ldr	r3, [r4, #0]
 8010178:	f851 6b04 	ldr.w	r6, [r1], #4
 801017c:	6029      	str	r1, [r5, #0]
 801017e:	061d      	lsls	r5, r3, #24
 8010180:	d514      	bpl.n	80101ac <_printf_i+0x1ac>
 8010182:	07df      	lsls	r7, r3, #31
 8010184:	bf44      	itt	mi
 8010186:	f043 0320 	orrmi.w	r3, r3, #32
 801018a:	6023      	strmi	r3, [r4, #0]
 801018c:	b91e      	cbnz	r6, 8010196 <_printf_i+0x196>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	f023 0320 	bic.w	r3, r3, #32
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	2310      	movs	r3, #16
 8010198:	e7b0      	b.n	80100fc <_printf_i+0xfc>
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	f043 0320 	orr.w	r3, r3, #32
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	2378      	movs	r3, #120	; 0x78
 80101a4:	4828      	ldr	r0, [pc, #160]	; (8010248 <_printf_i+0x248>)
 80101a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101aa:	e7e3      	b.n	8010174 <_printf_i+0x174>
 80101ac:	0659      	lsls	r1, r3, #25
 80101ae:	bf48      	it	mi
 80101b0:	b2b6      	uxthmi	r6, r6
 80101b2:	e7e6      	b.n	8010182 <_printf_i+0x182>
 80101b4:	4615      	mov	r5, r2
 80101b6:	e7bb      	b.n	8010130 <_printf_i+0x130>
 80101b8:	682b      	ldr	r3, [r5, #0]
 80101ba:	6826      	ldr	r6, [r4, #0]
 80101bc:	6961      	ldr	r1, [r4, #20]
 80101be:	1d18      	adds	r0, r3, #4
 80101c0:	6028      	str	r0, [r5, #0]
 80101c2:	0635      	lsls	r5, r6, #24
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	d501      	bpl.n	80101cc <_printf_i+0x1cc>
 80101c8:	6019      	str	r1, [r3, #0]
 80101ca:	e002      	b.n	80101d2 <_printf_i+0x1d2>
 80101cc:	0670      	lsls	r0, r6, #25
 80101ce:	d5fb      	bpl.n	80101c8 <_printf_i+0x1c8>
 80101d0:	8019      	strh	r1, [r3, #0]
 80101d2:	2300      	movs	r3, #0
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	4615      	mov	r5, r2
 80101d8:	e7ba      	b.n	8010150 <_printf_i+0x150>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	1d1a      	adds	r2, r3, #4
 80101de:	602a      	str	r2, [r5, #0]
 80101e0:	681d      	ldr	r5, [r3, #0]
 80101e2:	6862      	ldr	r2, [r4, #4]
 80101e4:	2100      	movs	r1, #0
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7f0 f812 	bl	8000210 <memchr>
 80101ec:	b108      	cbz	r0, 80101f2 <_printf_i+0x1f2>
 80101ee:	1b40      	subs	r0, r0, r5
 80101f0:	6060      	str	r0, [r4, #4]
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	2300      	movs	r3, #0
 80101f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101fc:	e7a8      	b.n	8010150 <_printf_i+0x150>
 80101fe:	6923      	ldr	r3, [r4, #16]
 8010200:	462a      	mov	r2, r5
 8010202:	4649      	mov	r1, r9
 8010204:	4640      	mov	r0, r8
 8010206:	47d0      	blx	sl
 8010208:	3001      	adds	r0, #1
 801020a:	d0ab      	beq.n	8010164 <_printf_i+0x164>
 801020c:	6823      	ldr	r3, [r4, #0]
 801020e:	079b      	lsls	r3, r3, #30
 8010210:	d413      	bmi.n	801023a <_printf_i+0x23a>
 8010212:	68e0      	ldr	r0, [r4, #12]
 8010214:	9b03      	ldr	r3, [sp, #12]
 8010216:	4298      	cmp	r0, r3
 8010218:	bfb8      	it	lt
 801021a:	4618      	movlt	r0, r3
 801021c:	e7a4      	b.n	8010168 <_printf_i+0x168>
 801021e:	2301      	movs	r3, #1
 8010220:	4632      	mov	r2, r6
 8010222:	4649      	mov	r1, r9
 8010224:	4640      	mov	r0, r8
 8010226:	47d0      	blx	sl
 8010228:	3001      	adds	r0, #1
 801022a:	d09b      	beq.n	8010164 <_printf_i+0x164>
 801022c:	3501      	adds	r5, #1
 801022e:	68e3      	ldr	r3, [r4, #12]
 8010230:	9903      	ldr	r1, [sp, #12]
 8010232:	1a5b      	subs	r3, r3, r1
 8010234:	42ab      	cmp	r3, r5
 8010236:	dcf2      	bgt.n	801021e <_printf_i+0x21e>
 8010238:	e7eb      	b.n	8010212 <_printf_i+0x212>
 801023a:	2500      	movs	r5, #0
 801023c:	f104 0619 	add.w	r6, r4, #25
 8010240:	e7f5      	b.n	801022e <_printf_i+0x22e>
 8010242:	bf00      	nop
 8010244:	08071df9 	.word	0x08071df9
 8010248:	08071e0a 	.word	0x08071e0a

0801024c <memmove>:
 801024c:	4288      	cmp	r0, r1
 801024e:	b510      	push	{r4, lr}
 8010250:	eb01 0402 	add.w	r4, r1, r2
 8010254:	d902      	bls.n	801025c <memmove+0x10>
 8010256:	4284      	cmp	r4, r0
 8010258:	4623      	mov	r3, r4
 801025a:	d807      	bhi.n	801026c <memmove+0x20>
 801025c:	1e43      	subs	r3, r0, #1
 801025e:	42a1      	cmp	r1, r4
 8010260:	d008      	beq.n	8010274 <memmove+0x28>
 8010262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010266:	f803 2f01 	strb.w	r2, [r3, #1]!
 801026a:	e7f8      	b.n	801025e <memmove+0x12>
 801026c:	4402      	add	r2, r0
 801026e:	4601      	mov	r1, r0
 8010270:	428a      	cmp	r2, r1
 8010272:	d100      	bne.n	8010276 <memmove+0x2a>
 8010274:	bd10      	pop	{r4, pc}
 8010276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801027a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801027e:	e7f7      	b.n	8010270 <memmove+0x24>

08010280 <_realloc_r>:
 8010280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010284:	4680      	mov	r8, r0
 8010286:	4614      	mov	r4, r2
 8010288:	460e      	mov	r6, r1
 801028a:	b921      	cbnz	r1, 8010296 <_realloc_r+0x16>
 801028c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010290:	4611      	mov	r1, r2
 8010292:	f7ff bb85 	b.w	800f9a0 <_malloc_r>
 8010296:	b92a      	cbnz	r2, 80102a4 <_realloc_r+0x24>
 8010298:	f7ff fc9c 	bl	800fbd4 <_free_r>
 801029c:	4625      	mov	r5, r4
 801029e:	4628      	mov	r0, r5
 80102a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a4:	f000 f81b 	bl	80102de <_malloc_usable_size_r>
 80102a8:	4284      	cmp	r4, r0
 80102aa:	4607      	mov	r7, r0
 80102ac:	d802      	bhi.n	80102b4 <_realloc_r+0x34>
 80102ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102b2:	d812      	bhi.n	80102da <_realloc_r+0x5a>
 80102b4:	4621      	mov	r1, r4
 80102b6:	4640      	mov	r0, r8
 80102b8:	f7ff fb72 	bl	800f9a0 <_malloc_r>
 80102bc:	4605      	mov	r5, r0
 80102be:	2800      	cmp	r0, #0
 80102c0:	d0ed      	beq.n	801029e <_realloc_r+0x1e>
 80102c2:	42bc      	cmp	r4, r7
 80102c4:	4622      	mov	r2, r4
 80102c6:	4631      	mov	r1, r6
 80102c8:	bf28      	it	cs
 80102ca:	463a      	movcs	r2, r7
 80102cc:	f7ff fb32 	bl	800f934 <memcpy>
 80102d0:	4631      	mov	r1, r6
 80102d2:	4640      	mov	r0, r8
 80102d4:	f7ff fc7e 	bl	800fbd4 <_free_r>
 80102d8:	e7e1      	b.n	801029e <_realloc_r+0x1e>
 80102da:	4635      	mov	r5, r6
 80102dc:	e7df      	b.n	801029e <_realloc_r+0x1e>

080102de <_malloc_usable_size_r>:
 80102de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102e2:	1f18      	subs	r0, r3, #4
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bfbc      	itt	lt
 80102e8:	580b      	ldrlt	r3, [r1, r0]
 80102ea:	18c0      	addlt	r0, r0, r3
 80102ec:	4770      	bx	lr
	...

080102f0 <_init>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	bf00      	nop
 80102f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f6:	bc08      	pop	{r3}
 80102f8:	469e      	mov	lr, r3
 80102fa:	4770      	bx	lr

080102fc <_fini>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	bf00      	nop
 8010300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010302:	bc08      	pop	{r3}
 8010304:	469e      	mov	lr, r3
 8010306:	4770      	bx	lr
